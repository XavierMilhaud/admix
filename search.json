[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"/articles/admixture-clustering.html","id":"algorithm","dir":"Articles","previous_headings":"","what":"Algorithm","title":"Clustering of unknown subpopulations in admixture models","text":"now detail steps algorithm. Initialization: create first cluster filled, .e. \\(c = 1\\). convention, \\(S_0=\\emptyset\\). Select \\(\\{x,y\\}={\\rm argmin}\\{d_n(,j); \\neq j \\S \\setminus \\bigcup_{k=1}^c S_{k-1}\\}\\). Test \\(H_0\\) \\(x\\) \\(y\\). \\(S\\setminus \\bigcup_{k=1}^c S_k = \\emptyset\\) ","code":"If $H_0$ is not rejected then $S_1 = \\{x,y\\}$,\\\\ Else $S_1 = \\{x\\}$, $S_{c+1} = \\{y\\}$ and then $c=c+1$. Select $u={\\rm argmin}\\{d(i,j); i\\in S_c, j\\in S\\setminus \\bigcup_{k=1}^c S_k\\}$; Test $H_0$ the simultaneous equality of all the $f_j$, $j\\in S_c$ :\\\\   If $H_0$ not rejected, then put $S_c=S_c\\bigcup \\{u\\}$;\\\\   Else $S_{c+1} = \\{u\\}$ and $c = c+1$."},{"path":[]},{"path":"/articles/admixture-clustering.html","id":"on-mathbbr","dir":"Articles","previous_headings":"Applications","what":"On \\(\\mathbb{R}^+\\)","title":"Clustering of unknown subpopulations in admixture models","text":"present case study 5 populations cluster \\(\\mathbb{R}^+\\), Gamma-Exponential Gamma-Gamma mixtures.","code":"## Simulate data (chosen parameters indicate 3 clusters (populations (1,3), (2,5) and 4)!): list.comp <- list(f1 = \"gamma\", g1 = \"exp\",                   f2 = \"gamma\", g2 = \"exp\",                   f3 = \"gamma\", g3 = \"gamma\",                   f4 = \"exp\", g4 = \"exp\",                   f5 = \"gamma\", g5 = \"exp\") list.param <- list(f1 = list(shape = 16, rate = 4), g1 = list(rate = 1/3.5),                    f2 = list(shape = 14, rate = 2), g2 = list(rate = 1/5),                    f3 = list(shape = 16, rate = 4), g3 = list(shape = 12, rate = 2),                    f4 = list(rate = 1/2), g4 = list(rate = 1/7),                    f5 = list(shape = 14, rate = 2), g5 = list(rate = 1/6)) A.sim <- rsimmix(n=6000, unknownComp_weight=0.8, comp.dist = list(list.comp$f1,list.comp$g1),                  comp.param = list(list.param$f1, list.param$g1))$mixt.data B.sim <- rsimmix(n=6000, unknownComp_weight=0.5, comp.dist = list(list.comp$f2,list.comp$g2),                  comp.param = list(list.param$f2, list.param$g2))$mixt.data C.sim <- rsimmix(n=6000, unknownComp_weight=0.65, comp.dist = list(list.comp$f3,list.comp$g3),                  comp.param = list(list.param$f3, list.param$g3))$mixt.data D.sim <- rsimmix(n=6000, unknownComp_weight=0.75, comp.dist = list(list.comp$f4,list.comp$g4),                  comp.param = list(list.param$f4, list.param$g4))$mixt.data E.sim <- rsimmix(n=6000, unknownComp_weight=0.55, comp.dist = list(list.comp$f5,list.comp$g5),                  comp.param = list(list.param$f5, list.param$g5))$mixt.data ## Look for the clusters: list.comp <- list(f1 = NULL, g1 = \"exp\",                   f2 = NULL, g2 = \"exp\",                   f3 = NULL, g3 = \"gamma\",                   f4 = NULL, g4 = \"exp\",                   f5 = NULL, g5 = \"exp\") list.param <- list(f1 = NULL, g1 = list(rate = 1/3.5),                    f2 = NULL, g2 = list(rate = 1/5),                    f3 = NULL, g3 = list(shape = 12, rate = 2),                    f4 = NULL, g4 = list(rate = 1/7),                    f5 = NULL, g5 = list(rate = 1/6)) clusters <- admix_clustering(samples = list(A.sim,B.sim,C.sim,D.sim,E.sim), n_sim_tab = 10,                              comp.dist=list.comp, comp.param=list.param, parallel=FALSE, n_cpu=2) #>    |                                                           |                                                  |   0%   |                                                           |====                                              |   8%   |                                                           |==============================                    |  60%   |                                                           |========================================          |  80%   |                                                           |==================================================| 100% clusters #> Call: #> admix_clustering(samples = list(A.sim, B.sim, C.sim, D.sim, E.sim),  #>     n_sim_tab = 10, comp.dist = list.comp, comp.param = list.param,  #>     parallel = FALSE, n_cpu = 2) #>  #> The number of populations/samples under study is 5. #> The level of the underlying k-sample testing procedure is set to 5%. #>  #> The number of detected clusters in these populations equals 3. #> The p-values of the k-sample tests (showing when to close the clusters (i.e. p-value < 0.05) equal: 0.75, 0, 0, 0.125. #>  #> The list of clusters with populations belonging to them (in numeric format, i.e. inside c()) : #>    - Cluster #1: vector of populations c(2, 5) #>   - Cluster #2: vector of populations 4 #>   - Cluster #3: vector of populations c(1, 3) #>  #> The list of estimated weights for the unknown component distributions in each detected cluster #>       (in the same format and order as listed populations for clusters just above) : #>    - estimated weights of the unknown component distributions for cluster  1 :  c(0.606149321190825, 0.675610951643957) #>   - estimated weights of the unknown component distributions for cluster  2 :  numeric(0) #>   - estimated weights of the unknown component distributions for cluster  3 :  c(0.807245184714174, 0.643356876212108) #>  #> The matrix giving the distances between populations, used in the clustering procedure through the k-sample tests: #>             [,1]        [,2]        [,3]      [,4]        [,5] #> [1,]  0.00000000 32.47191728  0.07513872  7.057797 44.74215341 #> [2,] 32.47191728  0.00000000 20.34361797  4.177533  0.07323042 #> [3,]  0.07513872 20.34361797  0.00000000 64.324554 17.69953977 #> [4,]  7.05779719  4.17753259 64.32455428  0.000000  2.80992846 #> [5,] 44.74215341  0.07323042 17.69953977  2.809928  0.00000000"},{"path":"/articles/admixture-weight-estimation.html","id":"estimation-of-the-unknown-component-weight-in-an-admixture-model","dir":"Articles","previous_headings":"","what":"Estimation of the unknown component weight in an admixture model","title":"Estimation of unknown elements in admixture models","text":"mixture weight \\(p\\) unknown component distribution can estimated using diverse techniques depending assumptions made unknown cdf \\(F\\), among ones discussed sequel: estimator provided Bordes Vandekerkhove, see (L. Bordes Vandekerkhove 2010); estimator provided Patra Sen, (Patra Sen 2016); estimator provided Inversion - Best Matching method, (Milhaud Vandekerkhove 2022). estimation methods presented hereafter can performed using one single generic function estimation appropriate arguments, -called \\(admix_estim\\) function.","code":""},{"path":"/articles/admixture-weight-estimation.html","id":"the-one-sample-case","dir":"Articles","previous_headings":"Estimation of the unknown component weight in an admixture model","what":"The one-sample case","title":"Estimation of unknown elements in admixture models","text":"Many works studied estimation unknown proportion two-component admixture models. Among , seminal papers (D. Bordes L. Vandekerkhove 2006) (S. Bordes L. Mottelet Vandekerkhove 2006). papers closely connected paper (L. Bordes Vandekerkhove 2010), asymptotic normal estimator provided unknown component weight.","code":""},{"path":"/articles/admixture-weight-estimation.html","id":"case-of-symmetric-unknown-density","dir":"Articles","previous_headings":"Estimation of the unknown component weight in an admixture model > The one-sample case","what":"Case of symmetric unknown density","title":"Estimation of unknown elements in admixture models","text":"case, use Bordes Vandekerkhove estimator, see (L. Bordes Vandekerkhove 2010). look first listed parameter, corresponds estimate unknown component weight.","code":"## Simulate data: list.comp <- list(f = 'norm', g = 'norm') list.param <- list(f = list(mean = 3, sd = 0.5), g = list(mean = 0, sd = 1)) data1 <- rsimmix(n = 800, unknownComp_weight = 0.7, list.comp, list.param)[['mixt.data']] ## Perform the estimation of parameters in real-life: list.comp <- list(f = NULL, g = 'norm') list.param <- list(f = NULL, g = list(mean = 0, sd = 1)) BVdk_estimParam(data1, method = 'L-BFGS-B', list.comp, list.param) #> [1] 0.7138049 3.0011637"},{"path":"/articles/admixture-weight-estimation.html","id":"other-cases","dir":"Articles","previous_headings":"Estimation of the unknown component weight in an admixture model > The one-sample case","what":"Other cases","title":"Estimation of unknown elements in admixture models","text":"case, use Patra Sen estimator, see (Patra Sen 2016).","code":"## Simulate data: list.comp <- list(f = 'norm', g = 'norm') list.param <- list(f = list(mean = 3, sd = 0.5), g = list(mean = 0, sd = 1)) data1 <- rsimmix(n = 1000, unknownComp_weight = 0.6, list.comp, list.param)[['mixt.data']] ## Transform the known component of the admixture model into a Uniform(O,1) distribution: list.comp <- list(f = NULL, g = 'norm') list.param <- list(f = NULL, g = list(mean = 0, sd = 1)) data1_transfo <- knownComp_to_uniform(data = data1, comp.dist=list.comp, comp.param=list.param) PatraSen_est_mix_model(data = data1_transfo, method = 'fixed',                         c.n = 0.1*log(log(length(data1_transfo))), gridsize = 1000)$alp.hat #> [1] 0.604"},{"path":"/articles/admixture-weight-estimation.html","id":"the-two-sample-case","dir":"Articles","previous_headings":"Estimation of the unknown component weight in an admixture model","what":"The two-sample case","title":"Estimation of unknown elements in admixture models","text":"two-sample setting, idea use Inversion - Best Matching (IBM) approach. IBM method sensures asymptotically normal estimators unknown quantities, useful testing perspective. However, important note estimators mostly biased \\(F_1 \\neq F_2\\), general one-sample estimation strategies (Patra Sen 2016) (L. Bordes Vandekerkhove 2010) may preferred estimate unknown component proportion general settings (despite much time-consuming). latter case, one performs twice estimation method, two samples study.","code":""},{"path":"/articles/admixture-weight-estimation.html","id":"under-the-null-hypothesis-h_0-f_1-f_2","dir":"Articles","previous_headings":"Estimation of the unknown component weight in an admixture model > The two-sample case","what":"Under the null hypothesis \\(H_0: F_1 = F_2\\)","title":"Estimation of unknown elements in admixture models","text":"null, Milhaud Vandekerkhove (2022) show estimatorsis consistent towards true parameter values. Indeed, two unknown proportions consistently estimated.","code":"## Simulate data: list.comp <- list(f1 = 'norm', g1 = 'norm',                   f2 = 'norm', g2 = 'norm') list.param <- list(f1 = list(mean = 3, sd = 0.5), g1 = list(mean = 0, sd = 1),                    f2 = list(mean = 3, sd = 0.5), g2 = list(mean = 5, sd = 2)) sample1 <- rsimmix(n=1700, unknownComp_weight=0.5, comp.dist = list(list.comp$f1,list.comp$g1),                                                    comp.param=list(list.param$f1,list.param$g1)) sample2 <- rsimmix(n=1500, unknownComp_weight=0.7, comp.dist = list(list.comp$f2,list.comp$g2),                                                    comp.param=list(list.param$f2,list.param$g2)) ##### On a real-life example (unknown component densities, unknown mixture weights). list.comp <- list(f1 = NULL, g1 = 'norm',                   f2 = NULL, g2 = 'norm') list.param <- list(f1 = NULL, g1 = list(mean = 0, sd = 1),                    f2 = NULL, g2 = list(mean = 5, sd = 2)) ## Estimate the mixture weights of the two admixture models (provide only hat(theta)_n): estim <- IBM_estimProp(sample1 = sample1[['mixt.data']], sample2 = sample2[['mixt.data']],                        known.prop = NULL, comp.dist = list.comp, comp.param = list.param,                        with.correction = FALSE, n.integ = 1000) estim[['prop.estim']] #> [1] 0.5002275 0.7034010"},{"path":"/articles/admixture-weight-estimation.html","id":"under-the-alternative-hypothesis-h_1-f_1-neq-f_2","dir":"Articles","previous_headings":"Estimation of the unknown component weight in an admixture model > The two-sample case","what":"Under the alternative hypothesis \\(H_1: F_1 \\neq F_2\\)","title":"Estimation of unknown elements in admixture models","text":"Estimators consistent \\(H_1\\), although can (strongly) biased compared true values.","code":"## Simulate data: list.comp <- list(f1 = 'norm', g1 = 'norm',                   f2 = 'norm', g2 = 'norm') list.param <- list(f1 = list(mean = 1, sd = 0.5), g1 = list(mean = 0, sd = 1),                    f2 = list(mean = 3, sd = 0.5), g2 = list(mean = 5, sd = 2)) sample1 <- rsimmix(n=1700, unknownComp_weight=0.5, comp.dist = list(list.comp$f1,list.comp$g1),                                                    comp.param=list(list.param$f1,list.param$g1)) sample2 <- rsimmix(n=1500, unknownComp_weight=0.7, comp.dist = list(list.comp$f2,list.comp$g2),                                                    comp.param=list(list.param$f2,list.param$g2)) ##### On a real-life example (unknown component densities, unknown mixture weights). list.comp <- list(f1 = NULL, g1 = 'norm',                   f2 = NULL, g2 = 'norm') list.param <- list(f1 = NULL, g1 = list(mean = 0, sd = 1),                    f2 = NULL, g2 = list(mean = 5, sd = 2)) ## Estimate the mixture weights of the two admixture models (provide only hat(theta)_n): estim <- IBM_estimProp(sample1 = sample1[['mixt.data']], sample2 = sample2[['mixt.data']],                        known.prop = NULL, comp.dist = list.comp, comp.param = list.param,                        with.correction = FALSE, n.integ = 1000) estim[['prop.estim']] #> [1] 0.3696302 0.6219262"},{"path":"/articles/admixture-weight-estimation.html","id":"estimation-of-the-unknown-cumulative-distribution-function","dir":"Articles","previous_headings":"","what":"Estimation of the unknown cumulative distribution function","title":"Estimation of unknown elements in admixture models","text":"Concerning unknown cdf \\(F\\), one usually estimate thanks inversion formula \\[F(x) = \\dfrac{L(x) - (1-p)G(x)}{p},\\] \\(p\\) consistenly estimated. commonly called decontaminated density unknown component. following, propose compare two decontaminated densities obtained unknown quantities consistently estimated IBM approach. Note null (\\(F_1=F_2\\)), thus decontaminated densities look similar.","code":"## Simulate data: list.comp <- list(f1 = 'norm', g1 = 'norm',                   f2 = 'norm', g2 = 'norm') list.param <- list(f1 = list(mean = 3, sd = 0.5), g1 = list(mean = 0, sd = 1),                    f2 = list(mean = 3, sd = 0.5), g2 = list(mean = 5, sd = 2)) sample1 <- rsimmix(n=1700, unknownComp_weight=0.5, comp.dist = list(list.comp$f1,list.comp$g1),                    comp.param=list(list.param$f1,list.param$g1)) sample2 <- rsimmix(n=1500, unknownComp_weight=0.7, comp.dist = list(list.comp$f2,list.comp$g2),                    comp.param=list(list.param$f2,list.param$g2)) ## Estimate the mixture weight in each of the sample in real-life setting: list.comp <- list(f1 = NULL, g1 = 'norm',                   f2 = NULL, g2 = 'norm') list.param <- list(f1 = NULL, g1 = list(mean = 0, sd = 1),                    f2 = NULL, g2 = list(mean = 5, sd = 2)) estimate <- IBM_estimProp(sample1[['mixt.data']], sample2[['mixt.data']], comp.dist = list.comp,                           comp.param = list.param, with.correction = FALSE, n.integ = 1000) ## Determine the decontaminated version of the unknown density by inversion: res1 <- decontaminated_density(sample1 = sample1[['mixt.data']], comp.dist = list.comp[1:2],                                 comp.param = list.param[1:2], estim.p = estimate$prop.estim[1]) res2 <- decontaminated_density(sample1 = sample2[['mixt.data']], comp.dist = list.comp[3:4],                                 comp.param = list.param[3:4], estim.p = estimate$prop.estim[2]) plot(x = res1, type = \"l\", x_val = seq(from=-1,to=6,length.out=40), add_plot = FALSE) plot(x = res2, type=\"l\", col=\"red\", x_val = seq(from=-1,to=6,length.out=40), add_plot = TRUE)"},{"path":[]},{"path":"/articles/test-hypothesis.html","id":"the-one-sample-case-only-available-to-symmetric-unknown-density","dir":"Articles","previous_headings":"","what":"The one-sample case only available to symmetric unknown density","title":"Hypothesis test in admixture models","text":"setting, test performed parametric family testing, .e. \\[H_0: \\, F\\\\mathcal{F} \\qquad \\mbox{} \\qquad  H_1: \\, F\\notin \\mathcal{F},\\] \\(\\mathcal{F}=\\left\\{F_\\theta:~\\theta\\\\Theta \\right\\}\\). support known component density identical one unknown component density. tests introduced (Pommeret Vandekerkhove 2019). idea underlying hypothesis test one-sample case basically always : decompose observed known densities orthonormal polynomial basis, get expansion coefficients densities, reformulate null hypothesis test coefficients, adopt \\(\\chi^2\\) test strategy relies Central Limit Theorem (CLT) results estimators (unknown) weight related unknown component distribution \\(F\\). Taking account , possible use estimator provided (Patra Sen 2016) perform hypothesis testing. contrary, Bordes Vandekerkhove (2010) propose asymptotically normal estimator can used unknown component density assumed symmetric. generally, Pommeret Vandekerkhove (2019) give details statistic distribution null hypothesis \\(H_0\\) alternative \\(H_1\\). , implemented function allows perform -called gaussianity test, meaning parametric family unknown component tested belongs Gaussian distributions. example hypothesis testing one-sample case: result test reject null hypothesis \\(H_0\\), line specified parameters unknown components. Indeed, simulated data normally-distributed unknown component, .e. \\(F \\sim \\mathcal{N}(\\mu,\\sigma)\\) \\(\\mu=3\\) \\(\\sigma=0.5\\).","code":"####### Under the null hypothesis H0. ## Parameters of the gaussian distribution to be tested: list.comp <- list(f = 'norm', g = 'norm') list.param <- list(f = c(mean = 2, sd = 0.5), g = c(mean = 0, sd = 1)) ## Simulate data: obs.data <- rsimmix(n = 700, unknownComp_weight = 0.8, comp.dist = list.comp,                     comp.param = list.param)[['mixt.data']] ## Performs the test: list.comp <- list(f = NULL, g = 'norm') list.param <- list(f = NULL, g = c(mean = 0, sd = 1)) gaussianity_test(sample1 = obs.data, comp.dist = list.comp, comp.param = list.param,                  K = 3, lambda = 0.1, support = 'Real')$rejection_rule #> [1] FALSE"},{"path":"/articles/test-hypothesis.html","id":"the-two-sample-case","dir":"Articles","previous_headings":"","what":"The two-sample case","title":"Hypothesis test in admixture models","text":"Let us introduce two random samples \\(X_1\\) \\(X_2\\) following admixture models, \\[\\begin{align*}   \\left\\{     \\begin{array}{l}         L_1(x) = (1-p_1)G_1(x) + p_1F_1(x) \\\\         L_2(x) = (1-p_2)G_2(x) + p_2F_2(x),     \\end{array}     \\right. \\end{align*}\\] goal perform following hypothesis test: \\[H_0: ~ F_1=F_2 \\qquad \\mbox{} \\qquad H_1: F_1\\neq F_2.\\]","code":""},{"path":"/articles/test-hypothesis.html","id":"case-of-symmetric-unknown-densities","dir":"Articles","previous_headings":"The two-sample case","what":"Case of symmetric unknown densities","title":"Hypothesis test in admixture models","text":"framework, assume \\(F_1\\) \\(F_2\\) symmetric density. way normally-distributed estimator \\(p_1\\) \\(p_2\\), proposed (Bordes Vandekerkhove 2010), can used together testing strategy suggested (Milhaud Vandekerkhove 2022a). testing strategy closely connected (Pommeret Vandekerkhove 2019), computation expansion coefficients duplicated two samples study. follows, simulate two samples null check whether test provides satisfactory results.  hypothesis test conclude null hypothesis rejected, line expected given specified parameters simulating data. Note following arguments function ‘two_sample_test’ intentionnally set specific values: ‘method’ equals ‘Poly’ define testing strategy based comparisons expansion coefficients decomposing densities orthonormal polynomial basis, ‘K’ equals 3 mention expansions computed third order decomposition, ‘est.method’ set ‘BVdk’ tell program estimate unknown proportions \\(p_1\\) \\(p_2\\) using estimator proposed (Bordes Vandekerkhove 2010), ‘nb.ssEch’ equals 2 since basically two quantities estimate (sample study), namely unknown component proportion expansion coefficients. enables create subsamples order artificially uncorrelate estimators. unknown component distributions supposed symmetric densities, another solution use IBM method (see ).","code":"##### Under the null hypothesis H0. ## Simulate data: list.comp <- list(f1 = 'norm', g1 = 'norm',                   f2 = 'norm', g2 = 'norm') list.param <- list(f1 = list(mean = 3, sd = 0.5), g1 = list(mean = 0, sd = 1),                    f2 = list(mean = 3, sd = 0.5), g2 = list(mean = 6, sd = 1.2)) sample1 <- rsimmix(n=1000, unknownComp_weight=0.8, comp.dist = list(list.comp$f1,list.comp$g1),                    comp.param = list(list.param$f1,list.param$g1))[['mixt.data']] sample2 <- rsimmix(n=1100, unknownComp_weight=0.7, comp.dist = list(list.comp$f2,list.comp$g2),                    comp.param = list(list.param$f2,list.param$g2))[['mixt.data']] plot_mixt_density(samples = list(sample1,sample2), user.bounds = NULL, support='continuous') ##### Performs the test: list.comp <- list(f1 = NULL, g1 = 'norm',                   f2 = NULL, g2 = 'norm') list.param <- list(f1 = NULL, g1 = list(mean = 0, sd = 1),                    f2 = NULL, g2 = list(mean = 6, sd = 1.2)) ## Using expansion coefficients in orthonormal polynomial basis: two_samples_test(samples = list(sample1,sample2), comp.dist = list.comp,                  comp.param = list.param, method = 'Poly', K = 3, support = 'Real',                  est.method = 'BVdk', s = 0.3, nb.ssEch=2, var.explicit = TRUE)$rejection_rule #> [1] FALSE"},{"path":"/articles/test-hypothesis.html","id":"case-of-fully-unknown-densities","dir":"Articles","previous_headings":"The two-sample case","what":"Case of fully unknown densities","title":"Hypothesis test in admixture models","text":"Estimation unknown quantities made Inversion - Best Matching approach, see (Milhaud Vandekerkhove 2022b). case, one can still use function ‘two_sample_test()’ arguments except \\(method=\\)’ICV’. user also define number simulated gaussian processes used tabulate test statistic distribution (n-sim-tab), can accelerate computations using parallel computations choosing adequate number cpus. arguments \\(support\\) \\(est-method\\) useless.","code":""},{"path":"/articles/test-hypothesis.html","id":"the-k-sample-case","dir":"Articles","previous_headings":"","what":"The K-sample case","title":"Hypothesis test in admixture models","text":"introduce hereafter natural extension two-sample case K-sample one, see (Milhaud Vandekerkhove 2023). follows, K-sample test illustrated within framework IBM approach, .e. using associated inner convergence property. course, case unknown component densities assumed symmetric, one use pairwise version two sample test using comparison expansion coefficients polynomial orthonormal basis, associated estimation method provided (Bordes Vandekerkhove 2010). Consider \\(K\\) samples. \\(=1,...,K\\), sample \\(X^{()} = (X_1^{()}, ..., X_{n_i}^{()})\\) follows \\[L_i(x) = p_i F_i(x) + (1-p_i) G_i, \\qquad x \\\\mathbb{R}.\\] test perform given \\[H_0 : \\; F_1 = ... = F_K \\qquad \\mbox{} \\qquad H_1: \\; F_i \\neq F_j \\quad \\mbox{} \\quad \\neq j.\\] use IBM approach , assumptions (straightforwardly) adapted deal \\(K\\) samples. Basically, apply theoretical results IBM pair populations \\((,j)\\), build series embedded statistics. Consider set pair indices: \\({\\cal S}(K) = \\{(,j)\\\\mathbb{N}^2 ; \\; 1\\leq <j \\leq K\\}\\).\\ Order \\({\\cal S}(K)\\) lexicographically, denote \\(r_K[(,j)]\\) rank \\((,j)\\) set \\(S(K)\\). , \\(\\forall \\neq j \\\\{1,...,K\\}\\), Estimate \\(\\hat{\\theta}_{n}(,j) = \\arg\\min_{\\theta\\\\Theta_{,j}}d_n[,j](\\theta)\\), Compute statistic \\(T_{,j} = n \\, d_n[,j](\\hat{\\theta}_n(,j))\\). obtain \\(d(K) = K(K-1)/2\\) comparisons embed series statistics: \\[\\begin{eqnarray*}     U_1 &= &T_{1,2} \\\\     U_2 & = & T_{1,2}+T_{1,3} \\\\         &\\vdots& \\\\     U_{d(K)} & = &T_{1,2} + \\cdots + T_{K-1,K}, \\end{eqnarray*}\\] choose automatically right order \\(k\\) testing, consider penalization rule (mimicking Schwarz criteria procedure, see (Schwarz 1978)): \\[S(n) = \\min \\left\\{\\arg\\max_{1 \\leq k \\leq d(K)} \\left ({U}_{k} - k \\sum_{(,j)\\S(K)} l_n(,j) \\; 1_{\\left\\{r_K(,j)=k\\right\\}} \\right )  \\right\\}.\\] data-driven test statistic given \\[\\tilde{U}_n =  U_{S(n)}.\\] can shown \\(H_0\\) appropriate assumptions, \\(S(n)\\) converges probablity towards 1 \\(n \\rightarrow +\\infty\\); meaning asymptotically choose first element \\({\\cal S}(K)\\).\\ Moreover, \\(H_0\\), \\(U_{S(n)}\\) converges law towards \\(U^{0}(1,2)\\), exactly null limit distribution studied two-sample case. Finally, thus consider \\(H_0\\)-rejection rule: \\[\\tilde{U}_n \\quad \\geq \\quad \\hat q_{1-\\alpha} \\qquad \\Rightarrow \\qquad H_0 \\; \\mbox{rejected}.\\] now provide way perform test package admix gaussian mixture models. First, let us study case null hypothesis \\(H_0\\), considering \\(K=3\\) different populations.","code":"## Simulate data under the null H0: list.comp <- list(f1 = 'norm', g1 = 'norm',                   f2 = 'norm', g2 = 'norm',                   f3 = 'norm', g3 = 'norm') list.param <- list(f1 = list(mean = 0, sd = 1), g1 = list(mean = 2, sd = 0.7),                    f2 = list(mean = 0, sd = 1), g2 = list(mean = 4, sd = 1.1),                    f3 = list(mean = 0, sd = 1), g3 = list(mean = 3, sd = 0.8)) sim1 <- rsimmix(n = 1500, unknownComp_weight = 0.8, comp.dist = list(list.comp$f1,list.comp$g1),                 comp.param = list(list.param$f1, list.param$g1))$mixt.data sim2 <- rsimmix(n = 1700, unknownComp_weight = 0.7, comp.dist = list(list.comp$f2,list.comp$g2),                 comp.param = list(list.param$f2, list.param$g2))$mixt.data sim3 <- rsimmix(n = 2000, unknownComp_weight = 0.6, comp.dist = list(list.comp$f3,list.comp$g3),                 comp.param = list(list.param$f3, list.param$g3))$mixt.data ## Perform the 3-samples test in a real-life setting: list.comp <- list(f1 = NULL, g1 = 'norm',                   f2 = NULL, g2 = 'norm',                   f3 = NULL, g3 = 'norm') list.param <- list(f1 = NULL, g1 = list(mean = 2, sd = 0.7),                    f2 = NULL, g2 = list(mean = 4, sd = 1.1),                    f3 = NULL, g3 = list(mean = 3, sd = 0.8)) obj <- IBM_k_samples_test(samples = list(sim1,sim2,sim3), sim_U = NULL, n_sim_tab = 8, min_size = NULL,                           comp.dist = list.comp, comp.param = list.param, tune.penalty = TRUE,                           parallel = FALSE, n_cpu = 2) obj$rejection_rule #>   95%  #> FALSE"},{"path":[]},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Xavier Milhaud. Author, maintainer. Pierre Vandekerkhove. Contributor. Denys Pommeret. Contributor. Yahia Salhi. Contributor.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Milhaud X (2023). admix: Package Admix Admixture (aka Contamination) Models. R package version 2.1-1, https://github.com/XavierMilhaud/admix.","code":"@Manual{,   title = {admix: Package Admix for Admixture (aka Contamination) Models},   author = {Xavier Milhaud},   year = {2023},   note = {R package version 2.1-1},   url = {https://github.com/XavierMilhaud/admix}, }"},{"path":"/index.html","id":"welcome-to-r-package-admix","dir":"","previous_headings":"","what":"Package Admix for Admixture (aka Contamination) Models","title":"Package Admix for Admixture (aka Contamination) Models","text":"goal admix provide code estimation, hypothesis testing clustering methods admixture models. remind admixture model following cumulative distribution function (cdf) L(x) = *p**F(x) + (1−p)G(x),   x* ∈ ℝ, G perfectly known cdf, p F unknown. cdf F relates contamination phenomenon added well-known signal G, proportion p. proportion unknown component two-component mixture model can easily estimated weak nonparametric assumptions related distribution. decontaminated version unknown component distribution can tested specified distribution (included another decontaminated unknown component). Finally, clustering K populations made possible, based hypothesis tests compare unknown component distributions. package suited one-sample well multi-samples analysis.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Package Admix for Admixture (aka Contamination) Models","text":"can install released version admix Github : optional argument build_vignettes can set TRUE get vignettes help understand functionnalities package. get help functionalities package, installed: details can also found vignettes, available admix github-pages (see https://xaviermilhaud.github.io/admix/, Menu Articles).","code":"#once on CRAN with : install.package(\"admix\") # from now on: remotes::install_github(repo = \"XavierMilhaud/admix@main\", build_manual = TRUE, build_vignettes = FALSE) help(package = 'admix')"},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Package Admix for Admixture (aka Contamination) Models","text":"basic example shows estimate unknown component proportion localization shift parameters admixture model unknown component density assumed symmetric. practice, cdf L given L(x) = *p**F(x−μ) + (1−p)G(x),   x ∈ ℝ, p* unknown component weight, μ localization shift parameter unknown cdf F symmetric density. estimation made following commands:","code":"library(admix) ## Simulate data: list.comp <- list(f = 'norm', g = 'norm') list.param <- list(f = list(mean = 3, sd = 0.5),                    g = list(mean = 0, sd = 1)) data1 <- rsimmix(n = 1000, unknownComp_weight = 0.8, list.comp, list.param)[['mixt.data']] ## Perform the estimation of parameters in real-life: list.comp <- list(f = NULL, g = 'norm') list.param <- list(f = NULL, g = list(mean = 0, sd = 1)) BVdk_estimParam(data1, method = 'L-BFGS-B', list.comp, list.param) #> [1] 0.7977239 3.0114174"},{"path":"/reference/BVdk_ML_varCov_estimators.html","id":null,"dir":"Reference","previous_headings":"","what":"Maximum Likelihood estimation of the variance of the unknown density variance estimator in an admixture model — BVdk_ML_varCov_estimators","title":"Maximum Likelihood estimation of the variance of the unknown density variance estimator in an admixture model — BVdk_ML_varCov_estimators","text":"Parametric estimation variance variance parameter Bordes & Vandekerkhove (2010) setting, .e. considering admixture model probability density function (pdf) l: l(x) = p*f(x-mu) + (1-p)*g, g known component two-component mixture, p mixture proportion, f unknown component symmetric density, mu location shift parameter. estimation variance variance related density f made maximum likelihood optimization information matrix, assumption unknown f gaussian.","code":""},{"path":"/reference/BVdk_ML_varCov_estimators.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Maximum Likelihood estimation of the variance of the unknown density variance estimator in an admixture model — BVdk_ML_varCov_estimators","text":"","code":"BVdk_ML_varCov_estimators(data, hat_w, hat_loc, hat_var, comp.dist, comp.param)"},{"path":"/reference/BVdk_ML_varCov_estimators.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Maximum Likelihood estimation of the variance of the unknown density variance estimator in an admixture model — BVdk_ML_varCov_estimators","text":"data observed sample study. hat_w Estimate unknown component weight. hat_loc Estimate location shift parameter. hat_var Estimate variance symmetric density f, obtained plugging-previous estimates. See 'Details' information. comp.dist list two elements corresponding component distributions (specified R native names distributions) involved admixture model. Unknown elements must specified 'NULL' objects, e.g. 'f' unknown: list(f=NULL, g='norm'). comp.param list two elements corresponding parameters component distributions, element list . names used list must correspond native R argument names distributions. Unknown elements must specified 'NULL' objects, e.g. 'f' unknown: list(f=NULL, g=list(mean=0,sd=1)).","code":""},{"path":"/reference/BVdk_ML_varCov_estimators.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Maximum Likelihood estimation of the variance of the unknown density variance estimator in an admixture model — BVdk_ML_varCov_estimators","text":"variance estimator variance unknown component density f.","code":""},{"path":"/reference/BVdk_ML_varCov_estimators.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Maximum Likelihood estimation of the variance of the unknown density variance estimator in an admixture model — BVdk_ML_varCov_estimators","text":"Plug-strategy defined Pommeret, D. Vandekerkhove, P. (2019); Semiparametric density testing contamination model; Electronic Journal Statistics, 13, pp. 4743--4793. variance estimator variance unknown density f needed testing perspective, since included variance test statistic. details information matrix can found Bordes, L. Vandekerkhove, P. (2010); Semiparametric two-component mixture model component known: asymptotically normal estimator; Math. Meth. Stat.; 19, pp. 22--41.","code":""},{"path":"/reference/BVdk_ML_varCov_estimators.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Maximum Likelihood estimation of the variance of the unknown density variance estimator in an admixture model — BVdk_ML_varCov_estimators","text":"Xavier Milhaud xavier.milhaud.research@gmail.com","code":""},{"path":"/reference/BVdk_ML_varCov_estimators.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Maximum Likelihood estimation of the variance of the unknown density variance estimator in an admixture model — BVdk_ML_varCov_estimators","text":"","code":"# \\donttest{ ## Simulate data: list.comp <- list(f = \"norm\", g = \"norm\") list.param <- list(f = c(mean = 4, sd = 1), g = c(mean = 7, sd = 0.5)) sim.data <- rsimmix(n = 400, unknownComp_weight = 0.9, list.comp, list.param)$mixt.data ## Estimate mixture weight and location shift parameters in real-life: list.comp <- list(f = NULL, g = \"norm\") list.param <- list(f = NULL, g = c(mean = 7, sd = 0.5)) estim <- BVdk_estimParam(data = sim.data, method = \"L-BFGS-B\",                          comp.dist = list.comp, comp.param = list.param) ## Estimation of the second-order moment of the known component distribution: m2_knownComp <- mean(rnorm(n = 1000000, mean = 7, sd = 0.5)^2) hat_s2 <- (1/estim[1]) * (mean(sim.data^2) - ((1-estim[1])*m2_knownComp)) - estim[2]^2 ## Estimated variance of variance estimator related to the unknown symmetric component density: BVdk_ML_varCov_estimators(data = sim.data, hat_w = estim[1], hat_loc = estim[2],                           hat_var = hat_s2, comp.dist = list.comp, comp.param = list.param) #> [1] 0.004116679 # }"},{"path":"/reference/BVdk_contrast.html","id":null,"dir":"Reference","previous_headings":"","what":"Contrast as defined in Bordes & Vandekerkhove (2010) — BVdk_contrast","title":"Contrast as defined in Bordes & Vandekerkhove (2010) — BVdk_contrast","text":"Compute contrast defined Bordes & Vandekerkhove (2010) (see section 'Details'), needed optimization purpose. Remind one considers admixture model symmetric unknown density, .e. l(x) = p*f(x-mu) + (1-p)*g(x), l denotes probability density function (pdf) mixture known component pdf g, p unknown mixture weight, f relates unknown symmetric component pdf f, mu location shift parameter.","code":""},{"path":"/reference/BVdk_contrast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Contrast as defined in Bordes & Vandekerkhove (2010) — BVdk_contrast","text":"","code":"BVdk_contrast(param, data, h, comp.dist, comp.param)"},{"path":"/reference/BVdk_contrast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Contrast as defined in Bordes & Vandekerkhove (2010) — BVdk_contrast","text":"param Numeric vector two elements, corresponding two parameters (first unknown component weight, location shift parameter symmetric unknown component distribution). data Numeric vector observations following admixture model given pdf l. h Width window used kernel estimations. comp.dist list two elements corresponding component distributions (specified R native names distributions) involved admixture model. Unknown elements must specified 'NULL' objects, e.g. 'f' unknown: list(f=NULL, g='norm'). comp.param list two elements corresponding parameters component distributions, element list . names used list must correspond native R argument names distributions. Unknown elements must specified 'NULL' objects, e.g. 'f' unknown: list(f=NULL, g=list(mean=0,sd=1)).","code":""},{"path":"/reference/BVdk_contrast.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Contrast as defined in Bordes & Vandekerkhove (2010) — BVdk_contrast","text":"value contrast.","code":""},{"path":"/reference/BVdk_contrast.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Contrast as defined in Bordes & Vandekerkhove (2010) — BVdk_contrast","text":"contrast defined Bordes, L. Vandekerkhove, P. (2010); Semiparametric two-component mixture model component known: asymptotically normal estimator; Math. Meth. Stat.; 19, pp. 22--41.","code":""},{"path":"/reference/BVdk_contrast.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Contrast as defined in Bordes & Vandekerkhove (2010) — BVdk_contrast","text":"Xavier Milhaud xavier.milhaud.research@gmail.com","code":""},{"path":"/reference/BVdk_contrast.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Contrast as defined in Bordes & Vandekerkhove (2010) — BVdk_contrast","text":"","code":"## Simulate data: comp.dist <- list(f = 'norm', g = 'norm') comp.param <- list(f = list(mean = 3, sd = 0.5), g = list(mean = 0, sd = 1)) data1 <- rsimmix(n = 1000, unknownComp_weight = 0.6, comp.dist, comp.param)[['mixt.data']] ## Compute the contrast value for some given parameter vector in real-life framework: comp.dist <- list(f = NULL, g = 'norm') comp.param <- list(f = NULL, g = list(mean = 0, sd = 1)) BVdk_contrast(c(0.3,2), data1, density(data1)$bw, comp.dist, comp.param) #> [1] 2.122924"},{"path":"/reference/BVdk_contrast_gradient.html","id":null,"dir":"Reference","previous_headings":"","what":"Gradient of the contrast as defined in Bordes & Vandekerkhove (2010) — BVdk_contrast_gradient","title":"Gradient of the contrast as defined in Bordes & Vandekerkhove (2010) — BVdk_contrast_gradient","text":"Compute gradient contrast defined Bordes & Vandekerkhove (2010) (see section 'Details'), needed optimization purpose. Remind one considers admixture model, .e. l = p*f + (1-p)*g ; l denotes probability density function (pdf) mixture known component pdf g, p unknown mixture weight, f relates  unknown symmetric component pdf f.","code":""},{"path":"/reference/BVdk_contrast_gradient.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gradient of the contrast as defined in Bordes & Vandekerkhove (2010) — BVdk_contrast_gradient","text":"","code":"BVdk_contrast_gradient(param, data, h, comp.dist, comp.param)"},{"path":"/reference/BVdk_contrast_gradient.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gradient of the contrast as defined in Bordes & Vandekerkhove (2010) — BVdk_contrast_gradient","text":"param numeric vector two elements corresponding parameters estimated. First unknown component weight, second location shift parameter symmetric unknown component distribution. data vector observations following admixture model given pdf l. h window width used kernel estimations. comp.dist list two elements corresponding component distributions (specified R native names distributions) involved admixture model. Unknown elements must specified 'NULL' objects, e.g. 'f' unknown: list(f=NULL, g='norm'). comp.param list two elements corresponding parameters component distributions, element list . names used list must correspond native R argument names distributions. Unknown elements must specified 'NULL' objects, e.g. 'f' unknown: list(f=NULL, g=list(mean=0,sd=1)).","code":""},{"path":"/reference/BVdk_contrast_gradient.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gradient of the contrast as defined in Bordes & Vandekerkhove (2010) — BVdk_contrast_gradient","text":"numeric vector composed two partial derivatives w.r.t. two parameters optimize contrast.","code":""},{"path":"/reference/BVdk_contrast_gradient.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Gradient of the contrast as defined in Bordes & Vandekerkhove (2010) — BVdk_contrast_gradient","text":"contrast defined Bordes, L. Vandekerkhove, P. (2010); Semiparametric two-component mixture model component known: asymptotically normal estimator; Math. Meth. Stat.; 19, pp. 22--41.","code":""},{"path":"/reference/BVdk_contrast_gradient.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Gradient of the contrast as defined in Bordes & Vandekerkhove (2010) — BVdk_contrast_gradient","text":"Xavier Milhaud xavier.milhaud.research@gmail.com","code":""},{"path":"/reference/BVdk_contrast_gradient.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gradient of the contrast as defined in Bordes & Vandekerkhove (2010) — BVdk_contrast_gradient","text":"","code":"## Simulate data: comp.dist <- list(f = 'norm', g = 'norm') comp.param <- list(f = list(mean = 3, sd = 0.5), g = list(mean = 0, sd = 1)) data1 <- rsimmix(n = 1000, unknownComp_weight = 0.6, comp.dist, comp.param)[['mixt.data']] ## Compute the contrast gradient for some given parameter vector in real-life framework: comp.dist <- list(f = NULL, g = 'norm') comp.param <- list(f = NULL, g = list(mean = 0, sd = 1)) BVdk_contrast_gradient(c(0.3,2), data1, density(data1)$bw, comp.dist, comp.param) #> [1] -8.7764491 -0.6644662"},{"path":"/reference/BVdk_estimParam.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimation of the parameters in a two-component admixture model with symmetric unknown density — BVdk_estimParam","title":"Estimation of the parameters in a two-component admixture model with symmetric unknown density — BVdk_estimParam","text":"Estimation two parameters (mixture weight well location shift) admixture model pdf: l(x) = p*f(x-mu) + (1-p)*g(x), x R, g known component, p proportion f unknown component symmetric density. localization shift parameter thus denoted mu, component weight p. See 'Details' information.","code":""},{"path":"/reference/BVdk_estimParam.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimation of the parameters in a two-component admixture model with symmetric unknown density — BVdk_estimParam","text":"","code":"BVdk_estimParam(   data,   method = c(\"L-BFGS-B\", \"Nelder-Mead\"),   comp.dist,   comp.param )"},{"path":"/reference/BVdk_estimParam.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimation of the parameters in a two-component admixture model with symmetric unknown density — BVdk_estimParam","text":"data observed sample study. method method used throughout optimization process, either 'L-BFGS-B' 'Nelder-Mead' (see ?optim). comp.dist list two elements corresponding component distributions (specified R native names distributions) involved admixture model. Unknown elements must specified 'NULL' objects, e.g. 'f' unknown: list(f=NULL, g='norm'). comp.param list two elements corresponding parameters component distributions, element list . names used list must correspond native R argument names distributions. Unknown elements must specified 'NULL' objects, e.g. 'f' unknown: list(f=NULL, g=list(mean=0,sd=1)).","code":""},{"path":"/reference/BVdk_estimParam.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimation of the parameters in a two-component admixture model with symmetric unknown density — BVdk_estimParam","text":"numeric vector two estimated parameters (proportion first, location shift).","code":""},{"path":"/reference/BVdk_estimParam.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimation of the parameters in a two-component admixture model with symmetric unknown density — BVdk_estimParam","text":"Parameters estimated minimization contrast function, contrast defined Bordes, L. Vandekerkhove, P. (2010); Semiparametric two-component mixture model component known: asymptotically normal estimator; Math. Meth. Stat.; 19, pp. 22--41.","code":""},{"path":"/reference/BVdk_estimParam.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Estimation of the parameters in a two-component admixture model with symmetric unknown density — BVdk_estimParam","text":"Xavier Milhaud xavier.milhaud.research@gmail.com","code":""},{"path":"/reference/BVdk_estimParam.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimation of the parameters in a two-component admixture model with symmetric unknown density — BVdk_estimParam","text":"","code":"## Simulate data: list.comp <- list(f = 'norm', g = 'norm') list.param <- list(f = list(mean = -2, sd = 0.5),                    g = list(mean = 0, sd = 1)) data1 <- rsimmix(n = 200, unknownComp_weight = 0.4, list.comp, list.param)[['mixt.data']] ## Perform the estimation of parameters in real-life: list.comp <- list(f = NULL, g = 'norm') list.param <- list(f = NULL, g = list(mean = 0, sd = 1)) BVdk_estimParam(data1, method = 'L-BFGS-B', list.comp, list.param) #> [1]  0.4842826 -1.7771148"},{"path":"/reference/BVdk_varCov_estimators.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimation of the variance of the estimators in admixture models with symmetric unknown density. — BVdk_varCov_estimators","title":"Estimation of the variance of the estimators in admixture models with symmetric unknown density. — BVdk_varCov_estimators","text":"Semiparametric estimation variance estimators, .e. mixture weight p location shift parameter mu considering admixture model probability density function l: l(x) = p*f(x-mu) + (1-p)*g(x), x R, g known component two-component mixture, p unknown proportion, f unknown component density mu location shift. See 'Details' information.","code":""},{"path":"/reference/BVdk_varCov_estimators.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimation of the variance of the estimators in admixture models with symmetric unknown density. — BVdk_varCov_estimators","text":"","code":"BVdk_varCov_estimators(data, loc, p, comp.dist, comp.param)"},{"path":"/reference/BVdk_varCov_estimators.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimation of the variance of the estimators in admixture models with symmetric unknown density. — BVdk_varCov_estimators","text":"data observed sample study. loc estimated location shift parameter, related unknown symmetric density. p estimated unknown component weight. comp.dist list two elements corresponding component distributions (specified R native names distributions) involved admixture model. Unknown elements must specified 'NULL' objects, e.g. 'f' unknown: list(f=NULL, g='norm'). comp.param list two elements corresponding parameters component distributions, element list . names used list must correspond native R argument names distributions. Unknown elements must specified 'NULL' objects, e.g. 'f' unknown: list(f=NULL, g=list(mean=0,sd=1)).","code":""},{"path":"/reference/BVdk_varCov_estimators.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimation of the variance of the estimators in admixture models with symmetric unknown density. — BVdk_varCov_estimators","text":"list containing 1) variance-covariance matrix estimators (assessed specific time points 'u' 'v' u=v=mean(data)); 2) variance mixture weight estimator; 3) variance location shift estimator; 4) variance unknown component cumulative distribution function points 'u' 'v' (useless applications, explaining 'u' 'v' set equal mean(data) default, corresponding arguments ).","code":""},{"path":"/reference/BVdk_varCov_estimators.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimation of the variance of the estimators in admixture models with symmetric unknown density. — BVdk_varCov_estimators","text":"See formulas pp.28--30 Appendix Bordes, L. Vandekerkhove, P. (2010); Semiparametric two-component mixture model component known: asymptotically normal estimator; Math. Meth. Stat.; 19, pp. 22--41.","code":""},{"path":"/reference/BVdk_varCov_estimators.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Estimation of the variance of the estimators in admixture models with symmetric unknown density. — BVdk_varCov_estimators","text":"Xavier Milhaud xavier.milhaud.research@gmail.com","code":""},{"path":"/reference/BVdk_varCov_estimators.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimation of the variance of the estimators in admixture models with symmetric unknown density. — BVdk_varCov_estimators","text":"","code":"## Simulate data: list.comp <- list(f = 'norm', g = 'norm') list.param <- list(f = c(mean = 4, sd = 1), g = c(mean = 7, sd = 0.5)) sim.data <- rsimmix(n=140, unknownComp_weight=0.9, comp.dist=list.comp, comp.param=list.param) ## Estimate the location shift and mixture weight parameters in real-life setting: list.comp <- list(f = NULL, g = 'norm') list.param <- list(f = NULL, g = c(mean = 7, sd = 0.5)) estimators <- BVdk_estimParam(data = sim.data[['mixt.data']], method = \"L-BFGS-B\",                               comp.dist = list.comp, comp.param = list.param) ## Estimate the variance of the two estimators (first mixture weight, then location shift): BVdk_varCov_estimators(data = sim.data[['mixt.data']], loc = estimators[2], p = estimators[1],                        comp.dist = list.comp, comp.param = list.param) #> $varCov.mat #>              [,1]         [,2]         [,3] #> [1,] 0.0011133671 0.0004112253 0.0001354021 #> [2,] 0.0004112253 0.0042888010 0.0002438986 #> [3,] 0.0001354021 0.0002438986 0.0001275619 #>  #> $var_pEstim #> [1] 0.001113367 #>  #> $var_muEstim #> [1] 0.004288801 #>  #> $var_FEstim #> [1] 0.0001275619 #>"},{"path":"/reference/IBM_2samples_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Equality test of unknown component distributions in two admixture models with IBM approach — IBM_2samples_test","title":"Equality test of unknown component distributions in two admixture models with IBM approach — IBM_2samples_test","text":"Two-sample test unknown component distribution admixture models using Inversion - Best Matching (IBM) method. Recall two admixture models respective probability density functions (pdf) l1 = p1 f1 + (1-p1) g1 l2 = p2 f2 + (1-p2) g2, g1 g2 known pdf l1 l2 observed. Perform following hypothesis test: H0 : f1 = f2 versus H1 : f1 differs f2.","code":""},{"path":"/reference/IBM_2samples_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Equality test of unknown component distributions in two admixture models with IBM approach — IBM_2samples_test","text":"","code":"IBM_2samples_test(   samples,   known.p = NULL,   comp.dist = NULL,   comp.param = NULL,   sim_U = NULL,   n_sim_tab = 50,   min_size = NULL,   conf.level = 0.95,   parallel = FALSE,   n_cpu = 2 )"},{"path":"/reference/IBM_2samples_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Equality test of unknown component distributions in two admixture models with IBM approach — IBM_2samples_test","text":"samples list two observed samples, sample follows mixture distribution given l = p*f + (1-p)*g, f p unknown g known. known.p (default NULL) Numeric vector two elements, known (true) mixture weights. comp.dist list four elements corresponding component distributions (specified R native names distributions) involved two admixture models. two first elements refer unknown known components 1st admixture model, last two ones second admixture model. unknown elements, must specified 'NULL' objects. instance, 'comp.dist' specified follows: list(f1=NULL, g1='norm', f2=NULL, g2='norm'). comp.param list four elements corresponding parameters component distributions, element list . names used list must correspond native R argument names distributions. two first elements refer parameters unknown known components 1st admixture model, last two ones second admixture model. unknown elements, must specified 'NULL' objects. instance, 'comp.param' specified follows: : list(f1=NULL, g1=list(mean=0,sd=1), f2=NULL, g2=list(mean=3,sd=1.1)). sim_U Random draws inner convergence part contrast defined IBM approach (see 'Details' ). n_sim_tab Number simulated gaussian processes used tabulation inner convergence distribution IBM approach. min_size (default NULL) k-sample case, useful provide minimal size among samples. Otherwise, useless. conf.level confidence level 2-samples test, .e. quantile level test statistic compared. parallel (default FALSE) Boolean indicate whether parallel computations performed (speed-tabulation). n_cpu (default 2) Number cores used parallelizing.","code":""},{"path":"/reference/IBM_2samples_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Equality test of unknown component distributions in two admixture models with IBM approach — IBM_2samples_test","text":"list five elements, containing : 1) test statistic value; 2) rejection decision; 3) p-value test, 4) estimated weights unknown component two admixture models, 5) simulated distribution inner convergence regime (useful perform test comparing extreme quantile distribution).","code":""},{"path":"/reference/IBM_2samples_test.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Equality test of unknown component distributions in two admixture models with IBM approach — IBM_2samples_test","text":"See paper presenting IBM approach following HAL weblink: https://hal.science/hal-03201760","code":""},{"path":"/reference/IBM_2samples_test.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Equality test of unknown component distributions in two admixture models with IBM approach — IBM_2samples_test","text":"Xavier Milhaud xavier.milhaud.research@gmail.com","code":""},{"path":"/reference/IBM_2samples_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Equality test of unknown component distributions in two admixture models with IBM approach — IBM_2samples_test","text":"","code":"# \\donttest{ ####### Under the null hypothesis H0 : ## Simulate data: list.comp <- list(f1 = \"norm\", g1 = \"norm\",                   f2 = \"norm\", g2 = \"norm\") list.param <- list(f1 = list(mean = 1, sd = 1), g1 = list(mean = 2, sd = 0.7),                    f2 = list(mean = 1, sd = 1), g2 = list(mean = 3, sd = 1.2)) X.sim <- rsimmix(n= 1100, unknownComp_weight=0.85, comp.dist = list(list.comp$f1,list.comp$g1),                  comp.param = list(list.param$f1, list.param$g1))$mixt.data Y.sim <- rsimmix(n= 1200, unknownComp_weight=0.75, comp.dist = list(list.comp$f2,list.comp$g2),                  comp.param = list(list.param$f2, list.param$g2))$mixt.data list.comp <- list(f1 = NULL, g1 = \"norm\",                   f2 = NULL, g2 = \"norm\") list.param <- list(f1 = NULL, g1 = list(mean = 2, sd = 0.7),                    f2 = NULL, g2 = list(mean = 3, sd = 1.2)) IBM_2samples_test(samples = list(X.sim, Y.sim), known.p = NULL, comp.dist = list.comp,                   comp.param = list.param, sim_U = NULL, n_sim_tab = 6, min_size = NULL,                   conf.level = 0.95, parallel = FALSE, n_cpu = 2) #> $confidence_level #> [1] 0.95 #>  #> $rejection_rule #>  95%  #> TRUE  #>  #> $p_value #> [1] 0 #>  #> $test.stat #> [1] 0.1188723 #>  #> $weights #> [1] 0.8745271 0.7466063 #>  #> $sim_U #> [1] 0.02447547 0.11532770 0.04172086 0.05280862 0.03849815 0.07561056 #>   ####### Under the alternative H1 : ## Simulate data: list.comp <- list(f1 = \"norm\", g1 = \"norm\",                   f2 = \"norm\", g2 = \"norm\") list.param <- list(f1 = list(mean = 1, sd = 1), g1 = list(mean = 2, sd = 0.7),                    f2 = list(mean = 2, sd = 1), g2 = list(mean = 3, sd = 1.2)) X.sim <- rsimmix(n= 1100, unknownComp_weight=0.85, comp.dist = list(list.comp$f1,list.comp$g1),                  comp.param = list(list.param$f1, list.param$g1))$mixt.data Y.sim <- rsimmix(n= 1200, unknownComp_weight=0.75, comp.dist = list(list.comp$f2,list.comp$g2),                  comp.param = list(list.param$f2, list.param$g2))$mixt.data list.comp <- list(f1 = NULL, g1 = \"norm\",                   f2 = NULL, g2 = \"norm\") list.param <- list(f1 = NULL, g1 = list(mean = 2, sd = 0.7),                    f2 = NULL, g2 = list(mean = 3, sd = 1.2)) IBM_2samples_test(samples = list(X.sim, Y.sim), known.p = NULL, comp.dist = list.comp,                   comp.param = list.param, sim_U = NULL, n_sim_tab = 6, min_size = NULL,                   conf.level = 0.95, parallel = FALSE, n_cpu = 2) #> $confidence_level #> [1] 0.95 #>  #> $rejection_rule #> [1] TRUE #>  #> $p_value #> [1] 1e-16 #>  #> $test.stat #> [1] 0.2148901 #>  #> $weights #> [1] 3.3372750 0.5973457 #>  #> $sim_U #> [1] NA #>  # }"},{"path":"/reference/IBM_empirical_contrast.html","id":null,"dir":"Reference","previous_headings":"","what":"Empirical computation of the contrast in the Inversion - Best Matching (IBM) method — IBM_empirical_contrast","title":"Empirical computation of the contrast in the Inversion - Best Matching (IBM) method — IBM_empirical_contrast","text":"Defines empirical version contrast IBM method, minimized optimization process. details contrast definition, see 'Details' .","code":""},{"path":"/reference/IBM_empirical_contrast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Empirical computation of the contrast in the Inversion - Best Matching (IBM) method — IBM_empirical_contrast","text":"","code":"IBM_empirical_contrast(   par,   fixed.p.X = NULL,   sample1,   sample2,   G,   comp.dist,   comp.param )"},{"path":"/reference/IBM_empirical_contrast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Empirical computation of the contrast in the Inversion - Best Matching (IBM) method — IBM_empirical_contrast","text":"par Numeric vector two elements, corresponding two parameter values compute contrast. practice component weights two admixture models. fixed.p.X Arbitrary value chosen user component weight related unknown component first admixture model. useful optimization known components two models identical (G1=G2, leading unidimensional optimization). sample1 Observations first sample study. sample2 Observations second sample study. G Distribution integrate calculating contrast. comp.dist list four elements corresponding component distributions (specified R native names distributions) involved two admixture models. two first elements refer unknown known components 1st admixture model, last two ones second admixture model. unknown elements, must specified 'NULL' objects. instance, 'comp.dist' specified follows: list(f1=NULL, g1='norm', f2=NULL, g2='norm'). comp.param list four elements corresponding parameters component distributions, element list . names used list must correspond native R argument names distributions. two first elements refer parameters unknown known components 1st admixture model, last two ones second admixture model. unknown elements, must specified 'NULL' objects. instance, 'comp.param' specified follows: : list(f1=NULL, g1=list(mean=0,sd=1), f2=NULL, g2=list(mean=3,sd=1.1)).","code":""},{"path":"/reference/IBM_empirical_contrast.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Empirical computation of the contrast in the Inversion - Best Matching (IBM) method — IBM_empirical_contrast","text":"empirical contrast value evaluated parameter values.","code":""},{"path":"/reference/IBM_empirical_contrast.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Empirical computation of the contrast in the Inversion - Best Matching (IBM) method — IBM_empirical_contrast","text":"See paper presenting IBM approach following HAL weblink: https://hal.science/hal-03201760","code":""},{"path":"/reference/IBM_empirical_contrast.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Empirical computation of the contrast in the Inversion - Best Matching (IBM) method — IBM_empirical_contrast","text":"Xavier Milhaud xavier.milhaud.research@gmail.com","code":""},{"path":"/reference/IBM_empirical_contrast.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Empirical computation of the contrast in the Inversion - Best Matching (IBM) method — IBM_empirical_contrast","text":"","code":"## Simulate data: list.comp <- list(f1 = 'norm', g1 = 'norm',                   f2 = 'norm', g2 = 'norm') list.param <- list(f1 = list(mean = 3, sd = 0.5), g1 = list(mean = 0, sd = 1),                    f2 = list(mean = 1, sd = 0.1), g2 = list(mean = 5, sd = 2)) sample1 <- rsimmix(n=1500, unknownComp_weight=0.5, comp.dist = list(list.comp$f1,list.comp$g1),                                                comp.param = list(list.param$f1,list.param$g1)) sample2 <- rsimmix(n=2000, unknownComp_weight=0.7, comp.dist = list(list.comp$f2,list.comp$g2),                                                comp.param = list(list.param$f2,list.param$g2)) ## Create the distribution on which the contrast will be integrated: G <- stats::rnorm(n = 1000, mean = sample(c(sample1[['mixt.data']], sample2[['mixt.data']]),                                           size = 1000, replace = TRUE),                   sd = density(c(sample1[['mixt.data']], sample2[['mixt.data']]))$bw) ## Compute the empirical contrast at parameters (p1,p2) = (0.2,0.7) in a real-life setting: list.comp <- list(f1 = NULL, g1 = 'norm',                   f2 = NULL, g2 = 'norm') list.param <- list(f1 = NULL, g1 = list(mean = 0, sd = 1),                    f2 = NULL, g2 = list(mean = 5, sd = 2)) IBM_empirical_contrast(par = c(0.2,0.7), fixed.p.X = NULL, sample1 = sample1[['mixt.data']],            sample2= sample2[['mixt.data']], G=G, comp.dist = list.comp, comp.param = list.param) #> [1] 2.162624"},{"path":"/reference/IBM_estimProp.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate the weights related to the proportions of the unknown components of the two admixture models — IBM_estimProp","title":"Estimate the weights related to the proportions of the unknown components of the two admixture models — IBM_estimProp","text":"Estimate component weights Inversion - Best Matching (IBM) method, related two admixture models respective probability density function (pdf) l1 l2, : l1 = p1*f1 + (1-p1)g1 l2 = p2f2 + (1-p2)*g2, g1 g2 known component densities. details IBM approach, see 'Details' .","code":""},{"path":"/reference/IBM_estimProp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate the weights related to the proportions of the unknown components of the two admixture models — IBM_estimProp","text":"","code":"IBM_estimProp(   sample1,   sample2,   known.prop = NULL,   comp.dist = NULL,   comp.param = NULL,   with.correction = TRUE,   n.integ = 1000 )"},{"path":"/reference/IBM_estimProp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate the weights related to the proportions of the unknown components of the two admixture models — IBM_estimProp","text":"sample1 Observations first sample study. sample2 Observations second sample study. known.prop (optional) Numeric vector two elements, respectively component weight unknown component first second samples. comp.dist list four elements corresponding component distributions (specified R native names distributions) involved two admixture models. two first elements refer unknown known components 1st admixture model, last two ones second admixture model. unknown elements, must specified 'NULL' objects. instance, 'comp.dist' specified follows: list(f1=NULL, g1='norm', f2=NULL, g2='norm'). comp.param list four elements corresponding parameters component distributions, element list . names used list must correspond native R argument names distributions. two first elements refer parameters unknown known components 1st admixture model, last two ones second admixture model. unknown elements, must specified 'NULL' objects. instance, 'comp.param' specified follows: : list(f1=NULL, g1=list(mean=0,sd=1), f2=NULL, g2=list(mean=3,sd=1.1)). .correction Boolean indicating whether solution (estimated proportions) adjusted (constant determined thanks exact proportion, usually unknown except case simulations). n.integ Number data points generated distribution integrate.","code":""},{"path":"/reference/IBM_estimProp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate the weights related to the proportions of the unknown components of the two admixture models — IBM_estimProp","text":"list two estimates component weights admixture model, plus theoretical model specified.","code":""},{"path":"/reference/IBM_estimProp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate the weights related to the proportions of the unknown components of the two admixture models — IBM_estimProp","text":"See paper presenting IBM approach following HAL weblink: https://hal.science/hal-03201760","code":""},{"path":"/reference/IBM_estimProp.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Estimate the weights related to the proportions of the unknown components of the two admixture models — IBM_estimProp","text":"Xavier Milhaud xavier.milhaud.research@gmail.com","code":""},{"path":"/reference/IBM_estimProp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate the weights related to the proportions of the unknown components of the two admixture models — IBM_estimProp","text":"","code":"##### On a simulated example to see whether the true parameters are well estimated. ## Simulate data: list.comp <- list(f1 = 'norm', g1 = 'norm',                   f2 = 'norm', g2 = 'norm') list.param <- list(f1 = list(mean = 3, sd = 0.5), g1 = list(mean = 0, sd = 1),                    f2 = list(mean = 3, sd = 0.5), g2 = list(mean = 5, sd = 2)) sample1 <- rsimmix(n=1500, unknownComp_weight=0.5, comp.dist = list(list.comp$f1,list.comp$g1),                                                  comp.param=list(list.param$f1,list.param$g1)) sample2 <- rsimmix(n=2000, unknownComp_weight=0.7, comp.dist = list(list.comp$f2,list.comp$g2),                                                  comp.param=list(list.param$f2,list.param$g2)) ## Estimate the mixture weights of the two admixture models (provide hat(theta)_n and theta^c): estim <- IBM_estimProp(sample1 = sample1[['mixt.data']], sample2 = sample2[['mixt.data']],                        known.prop = c(0.5,0.7), comp.dist = list.comp, comp.param = list.param,                        with.correction = FALSE, n.integ = 1000) estim[['prop.estim']] #> [1] 0.4912966 0.6824242 estim[['theo.prop.estim']] #> [1] 0.4999903 0.7000001 ##### On a real-life example (unknown component densities, unknown mixture weights). list.comp <- list(f1 = NULL, g1 = 'norm',                   f2 = NULL, g2 = 'norm') list.param <- list(f1 = NULL, g1 = list(mean = 0, sd = 1),                    f2 = NULL, g2 = list(mean = 5, sd = 2)) ## Estimate the mixture weights of the two admixture models (provide only hat(theta)_n): estim <- IBM_estimProp(sample1 = sample1[['mixt.data']], sample2 = sample2[['mixt.data']],                        known.prop = NULL, comp.dist = list.comp, comp.param = list.param,                        with.correction = FALSE, n.integ = 1000) estim[['prop.estim']] #> [1] 0.4912158 0.6812165 estim[['theo.prop.estim']] #> NULL"},{"path":"/reference/IBM_estimVarCov_gaussVect.html","id":null,"dir":"Reference","previous_headings":"","what":"Nonparametric estimation of the variance-covariance matrix of the gaussian vector in IBM approach — IBM_estimVarCov_gaussVect","title":"Nonparametric estimation of the variance-covariance matrix of the gaussian vector in IBM approach — IBM_estimVarCov_gaussVect","text":"Estimate variance-covariance matrix gaussian vector point 'z', considering use Inversion - Best Matching (IBM) method estimate model parameters two-sample admixture models. Recall two admixture models respective probability density functions (pdf) l1 l2, : l1 = p1*f1 + (1-p1)g1 l2 = p2f2 + (1-p2)*g2, g1 g2 known component densities. information IBM approach given 'Details' .","code":""},{"path":"/reference/IBM_estimVarCov_gaussVect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Nonparametric estimation of the variance-covariance matrix of the gaussian vector in IBM approach — IBM_estimVarCov_gaussVect","text":"","code":"IBM_estimVarCov_gaussVect(   x,   y,   estim.obj,   fixed.p1 = NULL,   known.p = NULL,   sample1,   sample2,   min_size = NULL,   comp.dist = NULL,   comp.param = NULL )"},{"path":"/reference/IBM_estimVarCov_gaussVect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Nonparametric estimation of the variance-covariance matrix of the gaussian vector in IBM approach — IBM_estimVarCov_gaussVect","text":"x Time point first (related first parameter) underlying empirical process looked . y Time point second (related second parameter) underlying empirical process looked . estim.obj Object obtained estimation component weights related proportions unknown component two admixture models. fixed.p1 Arbitrary value chosen user component weight related unknown component first admixture model. useful optimization known components two models identical (G1=G2, leading unidimensional optimization). known.p (optional, NULL default) Numeric vector two elements, known (true) mixture weights. sample1 Observations first sample study. sample2 Observations second sample study. min_size (optional, NULL default) k-sample case, useful provide minimal size among samples (needed take account correction factor variance-covariance assessment). Otherwise, useless. comp.dist list four elements corresponding component distributions (specified R native names distributions) involved two admixture models. two first elements refer unknown known components 1st admixture model, last two ones second admixture model. unknown elements, must specified 'NULL' objects. instance, 'comp.dist' specified follows: list(f1=NULL, g1='norm', f2=NULL, g2='norm'). comp.param list four elements corresponding parameters component distributions, element list . names used list must correspond native R argument names distributions. two first elements refer parameters unknown known components 1st admixture model, last two ones second admixture model. unknown elements, must specified 'NULL' objects. instance, 'comp.param' specified follows: : list(f1=NULL, g1=list(mean=0,sd=1), f2=NULL, g2=list(mean=3,sd=1.1)).","code":""},{"path":"/reference/IBM_estimVarCov_gaussVect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Nonparametric estimation of the variance-covariance matrix of the gaussian vector in IBM approach — IBM_estimVarCov_gaussVect","text":"estimated variance-covariance matrix gaussian vector Z = (hat(p1),(hat(p2),Dn(z)), location '(x,y)'.","code":""},{"path":"/reference/IBM_estimVarCov_gaussVect.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Nonparametric estimation of the variance-covariance matrix of the gaussian vector in IBM approach — IBM_estimVarCov_gaussVect","text":"See paper presenting IBM approach following HAL weblink: https://hal.science/hal-03201760","code":""},{"path":"/reference/IBM_estimVarCov_gaussVect.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Nonparametric estimation of the variance-covariance matrix of the gaussian vector in IBM approach — IBM_estimVarCov_gaussVect","text":"Xavier Milhaud xavier.milhaud.research@gmail.com","code":""},{"path":"/reference/IBM_estimVarCov_gaussVect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Nonparametric estimation of the variance-covariance matrix of the gaussian vector in IBM approach — IBM_estimVarCov_gaussVect","text":"","code":"# \\donttest{ ######## Analysis by simulated data: ## Simulate Gamma - Exponential admixtures : list.comp <- list(f1 = \"gamma\", g1 = \"exp\",                   f2 = \"gamma\", g2 = \"exp\") list.param <- list(f1 = list(shape = 2, scale = 3), g1 = list(rate = 1/3),                    f2 = list(shape = 2, scale = 3), g2 = list(rate = 1/5)) X.sim <- rsimmix(n=400, unknownComp_weight=0.8, comp.dist = list(list.comp$f1,list.comp$g1),                  comp.param = list(list.param$f1, list.param$g1))$mixt.data Y.sim <- rsimmix(n=350, unknownComp_weight=0.9, comp.dist = list(list.comp$f2,list.comp$g2),                  comp.param = list(list.param$f2, list.param$g2))$mixt.data ## Real-life setting: list.comp <- list(f1 = NULL, g1 = \"exp\",                   f2 = NULL, g2 = \"exp\") list.param <- list(f1 = NULL, g1 = list(rate = 1/3),                    f2 = NULL, g2 = list(rate = 1/5)) ## Estimate the unknown component weights in the two admixture models: estim <- IBM_estimProp(sample1 =X.sim, sample2 =Y.sim, known.prop = NULL, comp.dist = list.comp,                        comp.param = list.param, with.correction = FALSE, n.integ = 1000) IBM_estimVarCov_gaussVect(x = mean(X.sim), y = mean(Y.sim), estim.obj = estim,                           fixed.p1 = estim[[\"p.X.fixed\"]], known.p = NULL, sample1=X.sim,                           sample2 = Y.sim, min_size = NULL,                           comp.dist = list.comp, comp.param = list.param) #>             [,1]        [,2]        [,3] #> [1,]  5.41937446  7.20653623 -0.03912162 #> [2,]  7.20653623 18.41659954 -0.06177646 #> [3,] -0.02603337  0.05496426  0.06561772 # }"},{"path":"/reference/IBM_gap.html","id":null,"dir":"Reference","previous_headings":"","what":"Difference between the unknown empirical cumulative distribution functions in two admixture models — IBM_gap","title":"Difference between the unknown empirical cumulative distribution functions in two admixture models — IBM_gap","text":"Compute 'gap' two unknown cumulative distribution functions (ecdf) given point, admixture models probability distribution function (pdf) given l l = p*f + (1-p)*g. Uses inversion method , .e. f = (1/p) (l - (1-p)*g), g represents known component admixture model p unknown proportion unknown component. Therefore, compute: D(z,L1,L2,p1,p2) = F1(z,L1,p1) - F2(z,L2,p2) measure integrated domain compute global discrepancy, see information 'Details' .","code":""},{"path":"/reference/IBM_gap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Difference between the unknown empirical cumulative distribution functions in two admixture models — IBM_gap","text":"","code":"IBM_gap(z, par, fixed.p1 = NULL, sample1, sample2, comp.dist, comp.param)"},{"path":"/reference/IBM_gap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Difference between the unknown empirical cumulative distribution functions in two admixture models — IBM_gap","text":"z point difference unknown (estimated) component distributions computed. par Numeric vector two elements, corresponding weights unknown component two admixture models. fixed.p1 (optional, NULL default) Arbitrary value chosen user component weight related unknown component first admixture model. useful optimization known components two models identical (G1=G2, leading unidimensional optimization). sample1 Observations first sample study. sample2 Observations second sample study. comp.dist list four elements corresponding component distributions (specified R native names distributions) involved two admixture models. two first elements refer unknown known components 1st admixture model, last two ones second admixture model. unknown elements, must specified 'NULL' objects. instance, 'comp.dist' specified follows: list(f1=NULL, g1='norm', f2=NULL, g2='norm'). comp.param list four elements corresponding parameters component distributions, element list . names used list must correspond native R argument names distributions. two first elements refer parameters unknown known components 1st admixture model, last two ones second admixture model. unknown elements, must specified 'NULL' objects. instance, 'comp.param' specified follows: : list(f1=NULL, g1=list(mean=0,sd=1), f2=NULL, g2=list(mean=3,sd=1.1)).","code":""},{"path":"/reference/IBM_gap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Difference between the unknown empirical cumulative distribution functions in two admixture models — IBM_gap","text":"gap evaluated specified point unknown components two observed samples.","code":""},{"path":"/reference/IBM_gap.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Difference between the unknown empirical cumulative distribution functions in two admixture models — IBM_gap","text":"See paper presenting IBM approach following HAL weblink: https://hal.science/hal-03201760","code":""},{"path":"/reference/IBM_gap.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Difference between the unknown empirical cumulative distribution functions in two admixture models — IBM_gap","text":"Xavier Milhaud xavier.milhaud.research@gmail.com","code":""},{"path":"/reference/IBM_gap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Difference between the unknown empirical cumulative distribution functions in two admixture models — IBM_gap","text":"","code":"list.comp <- list(f1 = 'norm', g1 = 'norm',                   f2 = 'norm', g2 = 'norm') list.param <- list(f1 = list(mean = 3, sd = 0.5), g1 = list(mean = 0, sd = 1),                    f2 = list(mean = 1, sd = 0.1), g2 = list(mean = 5, sd = 2)) sample1 <- rsimmix(n=1500, unknownComp_weight=0.5, comp.dist = list(list.comp$f1,list.comp$g1),                                                    comp.param=list(list.param$f1,list.param$g1)) sample2 <- rsimmix(n=2000, unknownComp_weight=0.7, comp.dist = list(list.comp$f2,list.comp$g2),                                                    comp.param=list(list.param$f2,list.param$g2)) IBM_gap(z = 2.8, par = c(0.3,0.6), fixed.p1 = NULL, sample1 = sample1[['mixt.data']],         sample2 = sample2[['mixt.data']], comp.dist = list.comp, comp.param = list.param) #> [1] -1.19915"},{"path":"/reference/IBM_greenLight_criterion.html","id":null,"dir":"Reference","previous_headings":"","what":"Green-light criterion to decide whether to perform full equality test between unknown components between two admixture models — IBM_greenLight_criterion","title":"Green-light criterion to decide whether to perform full equality test between unknown components between two admixture models — IBM_greenLight_criterion","text":"Indicate whether need perform statistical test equality unknown components comparing unknown components two samples following admixture models. Based IBM approach, see 'Details' .","code":""},{"path":"/reference/IBM_greenLight_criterion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Green-light criterion to decide whether to perform full equality test between unknown components between two admixture models — IBM_greenLight_criterion","text":"","code":"IBM_greenLight_criterion(   estim.obj,   sample1,   sample2,   comp.dist = NULL,   comp.param = NULL,   min_size = NULL,   alpha = 0.05 )"},{"path":"/reference/IBM_greenLight_criterion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Green-light criterion to decide whether to perform full equality test between unknown components between two admixture models — IBM_greenLight_criterion","text":"estim.obj Object obtained estimation component weights related proportions unknown component two admixture models studied. sample1 Observations first sample study. sample2 Observations second sample study. comp.dist list four elements corresponding component distributions (specified R native names distributions) involved two admixture models. two first elements refer unknown known components 1st admixture model, last two ones second admixture model. unknown elements, must specified 'NULL' objects. instance, 'comp.dist' specified follows: list(f1=NULL, g1='norm', f2=NULL, g2='norm'). comp.param list four elements corresponding parameters component distributions, element list . names used list must correspond native R argument names distributions. two first elements refer parameters unknown known components 1st admixture model, last two ones second admixture model. unknown elements, must specified 'NULL' objects. instance, 'comp.param' specified follows: : list(f1=NULL, g1=list(mean=0,sd=1), f2=NULL, g2=list(mean=3,sd=1.1)). min_size (optional, NULL default) k-sample case, useful provide minimal size among samples (needed take account correction factor variance-covariance assessment). Otherwise, useless. alpha Confidence level criterion assessed (used compute confidence bands estimators unknown component weights).","code":""},{"path":"/reference/IBM_greenLight_criterion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Green-light criterion to decide whether to perform full equality test between unknown components between two admixture models — IBM_greenLight_criterion","text":"boolean indicating whether useful useless tabulate contrast distribution order answer testing problem (f1 = f2).","code":""},{"path":"/reference/IBM_greenLight_criterion.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Green-light criterion to decide whether to perform full equality test between unknown components between two admixture models — IBM_greenLight_criterion","text":"See paper presenting IBM approach following HAL weblink: https://hal.science/hal-03201760","code":""},{"path":"/reference/IBM_greenLight_criterion.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Green-light criterion to decide whether to perform full equality test between unknown components between two admixture models — IBM_greenLight_criterion","text":"Xavier Milhaud xavier.milhaud.research@gmail.com","code":""},{"path":"/reference/IBM_greenLight_criterion.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Green-light criterion to decide whether to perform full equality test between unknown components between two admixture models — IBM_greenLight_criterion","text":"","code":"# \\donttest{ ## Simulate data: list.comp <- list(f1 = 'norm', g1 = 'norm',                   f2 = 'norm', g2 = 'norm') list.param <- list(f1 = list(mean = 3, sd = 0.5), g1 = list(mean = 0, sd = 1),                    f2 = list(mean = 3, sd = 0.5), g2 = list(mean = 5, sd = 2)) sample1 <- rsimmix(n=550, unknownComp_weight=0.7, comp.dist = list(list.comp$f1,list.comp$g1),                                                    comp.param=list(list.param$f1,list.param$g1)) sample2 <- rsimmix(n=450, unknownComp_weight=0.8, comp.dist = list(list.comp$f2,list.comp$g2),                                                    comp.param=list(list.param$f2,list.param$g2)) ## Estimate the unknown component weights in the two admixture models in real-life setting: list.comp <- list(f1 = NULL, g1 = 'norm',                   f2 = NULL, g2 = 'norm') list.param <- list(f1 = NULL, g1 = list(mean = 0, sd = 1),                    f2 = NULL, g2 = list(mean = 5, sd = 2)) estim <- IBM_estimProp(sample1[['mixt.data']], sample2[['mixt.data']], known.prop = NULL,                        comp.dist = list.comp, comp.param = list.param,                        with.correction = FALSE, n.integ = 1000) IBM_greenLight_criterion(estim.obj = estim, sample1 = sample1[['mixt.data']],                         sample2 = sample2[['mixt.data']], comp.dist = list.comp,                         comp.param = list.param, min_size = NULL, alpha = 0.05) #> $green_light #> [1] TRUE #>  #> $conf_interval_p1 #> [1] 0.6811624 0.7753222 #>  #> $conf_interval_p2 #> [1] 0.7130768 0.8371156 #>  # }"},{"path":"/reference/IBM_hessian_contrast.html","id":null,"dir":"Reference","previous_headings":"","what":"Hessian matrix of the contrast function in the Inversion - Best Matching (IBM) method — IBM_hessian_contrast","title":"Hessian matrix of the contrast function in the Inversion - Best Matching (IBM) method — IBM_hessian_contrast","text":"Compute hessian matrix contrast defined IBM approach, point (p1,p2). , based two samples following admixture models, recall admixture models probability distribution function (pdf) given l l = p*f + (1-p)*g, g represents known quantity l pdf observed sample. See 'Details' information definition contrast.","code":""},{"path":"/reference/IBM_hessian_contrast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hessian matrix of the contrast function in the Inversion - Best Matching (IBM) method — IBM_hessian_contrast","text":"","code":"IBM_hessian_contrast(   par,   fixed.p1 = NULL,   known.p = NULL,   sample1,   sample2,   G,   comp.dist = NULL,   comp.param = NULL )"},{"path":"/reference/IBM_hessian_contrast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hessian matrix of the contrast function in the Inversion - Best Matching (IBM) method — IBM_hessian_contrast","text":"par Numeric vector two elements (corresponding two unknown component weights) hessian computed. fixed.p1 (optional, NULL default) Arbitrary value chosen user component weight related unknown component first admixture model. useful optimization known components two models identical (G1=G2, leading unidimensional optimization). known.p (optional, NULL default) Numeric vector two elements, known (true) mixture weights. sample1 Observations first sample study. sample2 Observations second sample study. G Distribution integrate calculating contrast. comp.dist list four elements corresponding component distributions (specified R native names distributions) involved two admixture models. two first elements refer unknown known components 1st admixture model, last two ones second admixture model. unknown elements, must specified 'NULL' objects. instance, 'comp.dist' specified follows: list(f1=NULL, g1='norm', f2=NULL, g2='norm'). comp.param list four elements corresponding parameters component distributions, element list . names used list must correspond native R argument names distributions. two first elements refer parameters unknown known components 1st admixture model, last two ones second admixture model. unknown elements, must specified 'NULL' objects. instance, 'comp.param' specified follows: : list(f1=NULL, g1=list(mean=0,sd=1), f2=NULL, g2=list(mean=3,sd=1.1)).","code":""},{"path":"/reference/IBM_hessian_contrast.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hessian matrix of the contrast function in the Inversion - Best Matching (IBM) method — IBM_hessian_contrast","text":"hessian matrix contrast.","code":""},{"path":"/reference/IBM_hessian_contrast.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Hessian matrix of the contrast function in the Inversion - Best Matching (IBM) method — IBM_hessian_contrast","text":"See paper presenting IBM approach following HAL weblink: https://hal.science/hal-03201760","code":""},{"path":"/reference/IBM_hessian_contrast.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Hessian matrix of the contrast function in the Inversion - Best Matching (IBM) method — IBM_hessian_contrast","text":"Xavier Milhaud xavier.milhaud.research@gmail.com","code":""},{"path":"/reference/IBM_hessian_contrast.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hessian matrix of the contrast function in the Inversion - Best Matching (IBM) method — IBM_hessian_contrast","text":"","code":"## Simulate data: list.comp <- list(f1 = 'norm', g1 = 'norm',                   f2 = 'norm', g2 = 'norm') list.param <- list(f1 = list(mean = 3, sd = 0.5), g1 = list(mean = 0, sd = 1),                    f2 = list(mean = 1, sd = 0.1), g2 = list(mean = 5, sd = 2)) sample1 <- rsimmix(n=1500, unknownComp_weight=0.5, comp.dist = list(list.comp$f1,list.comp$g1),                                                    comp.param=list(list.param$f1,list.param$g1)) sample2 <- rsimmix(n=2000, unknownComp_weight=0.7, comp.dist = list(list.comp$f2,list.comp$g2),                                                    comp.param=list(list.param$f2,list.param$g2)) ## Define the distribution over which to integrate: fit.all <- stats::density(x = c(sample1[['mixt.data']],sample2[['mixt.data']])) G <- stats::rnorm(n = 1000, mean = sample(c(sample1[['mixt.data']], sample2[['mixt.data']]),                                           size = 1000, replace = TRUE), sd = fit.all$bw) ## Evaluate the hessian matrix at point (p1,p2) = (0.3,0.6): list.comp <- list(f1 = NULL, g1 = 'norm',                   f2 = NULL, g2 = 'norm') list.param <- list(f1 = NULL, g1 = list(mean = 0, sd = 1),                    f2 = NULL, g2 = list(mean = 5, sd = 2)) IBM_hessian_contrast(par = c(0.3,0.6), fixed.p1 = NULL, known.p = NULL,                      sample1 = sample1[['mixt.data']],  sample2 = sample2[['mixt.data']], G = G,                      comp.dist = list.comp, comp.param = list.param) #>           [,1]      [,2] #> [1,] 85.075057  7.260569 #> [2,]  7.260569 67.032905"},{"path":"/reference/IBM_k_samples_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Equality test of unknown component distributions in K admixture models, with IBM approach — IBM_k_samples_test","title":"Equality test of unknown component distributions in K admixture models, with IBM approach — IBM_k_samples_test","text":"Test hypothesis unknown component K (K > 1) admixture models using Inversion - Best Matching method. K-samples test unknown component distribution admixture models using Inversion - Best Matching (IBM) method. Recall K populations following admixture models, one probability density functions (pdf) l_k = p_k*f_k + (1-p_k)*g_k, g_k known pdf l_k corresponds observed sample. Perform following hypothesis test: H0 : f_1 = ... = f_K   H1 : f_i differs f_j (different j, ,j 1,...,K).","code":""},{"path":"/reference/IBM_k_samples_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Equality test of unknown component distributions in K admixture models, with IBM approach — IBM_k_samples_test","text":"","code":"IBM_k_samples_test(   samples = NULL,   sim_U = NULL,   n_sim_tab = 100,   min_size = NULL,   comp.dist = NULL,   comp.param = NULL,   conf.level = 0.95,   tune.penalty = TRUE,   parallel = FALSE,   n_cpu = 2 )"},{"path":"/reference/IBM_k_samples_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Equality test of unknown component distributions in K admixture models, with IBM approach — IBM_k_samples_test","text":"samples list K samples studied, following admixture distributions. sim_U (default NULL) Random draws inner convergence part contrast defined IBM approach (see 'Details' ). n_sim_tab Number simulated gaussian processes tabulating inner convergence distribution IBM approach. min_size (default NULL) Useful provide minimal size among samples (needed take account correction factor variance-covariance assessment). Automatically calculated NULL. comp.dist list 2*K elements corresponding component distributions (specified R native names distributions) involved K admixture models. Elements, grouped 2, refer unknown known components admixture model, unknown elements, must specified 'NULL' objects. instance, 'comp.dist' specified follows K = 3: list(f1 = NULL, g1 = 'norm', f2 = NULL, g2 = 'norm', f3 = NULL, g3 = 'rnorm'). comp.param list 2*K elements corresponding parameters component distributions, element list . names used list must correspond native R argument names distributions. Elements, grouped 2, refer parameters unknown known components admixture model. unknown elements, must specified 'NULL' objects. instance, 'comp.param' specified follows (K = 3): list(f1 = NULL, g1 = list(mean=0,sd=1), f2 = NULL, g2 = list(mean=3,sd=1.1), f3 = NULL, g3 = list(mean=-2,sd=0.6)). conf.level confidence level K-sample test. tune.penalty boolean allows choose classical penalty term optimized penalty embedding tuning parameters (automatically optimized). Optimized penalty particularly useful low sample size. parallel (default FALSE) Boolean indicating whether parallel computations performed. n_cpu (default 2) Number cores used parallelizing.","code":""},{"path":"/reference/IBM_k_samples_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Equality test of unknown component distributions in K admixture models, with IBM approach — IBM_k_samples_test","text":"list ten elements, containing: 1) rejection decision; 2) test p-value; 3) terms involved test statistic; 4) test statistic value; 5) selected rank (number terms involved test statistic); 6) value penalized test statistic; 7) boolean indicating whether applied penalty rule null H0; 8) sorted contrast values; 9) 95th-quantile contrast distribution; 10) final terms statistic; 11) contrast matrix.","code":""},{"path":"/reference/IBM_k_samples_test.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Equality test of unknown component distributions in K admixture models, with IBM approach — IBM_k_samples_test","text":"See paper following HAL weblink: https://hal.science/hal-04129130","code":""},{"path":"/reference/IBM_k_samples_test.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Equality test of unknown component distributions in K admixture models, with IBM approach — IBM_k_samples_test","text":"Xavier Milhaud xavier.milhaud.research@gmail.com","code":""},{"path":"/reference/IBM_k_samples_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Equality test of unknown component distributions in K admixture models, with IBM approach — IBM_k_samples_test","text":"","code":"# \\donttest{ ####### Under the null hypothesis H0 (with K=3 populations): ## Specify the parameters of the mixture models for simulation: list.comp <- list(f1 = \"norm\", g1 = \"norm\",                   f2 = \"norm\", g2 = \"norm\",                   f3 = \"norm\", g3 = \"norm\") list.param <- list(f1 = list(mean = 0, sd = 1), g1 = list(mean = 2, sd = 0.7),                    f2 = list(mean = 0, sd = 1), g2 = list(mean = 4, sd = 1.1),                    f3 = list(mean = 0, sd = 1), g3 = list(mean = -3, sd = 0.8)) ## Simulate the data: sim1 <- rsimmix(n = 1000, unknownComp_weight = 0.8, comp.dist = list(list.comp$f1,list.comp$g1),                 comp.param = list(list.param$f1, list.param$g1))$mixt.data sim2 <- rsimmix(n= 1300, unknownComp_weight = 0.6, comp.dist = list(list.comp$f2,list.comp$g2),                 comp.param = list(list.param$f2, list.param$g2))$mixt.data sim3 <- rsimmix(n = 1100, unknownComp_weight = 0.7, comp.dist = list(list.comp$f3,list.comp$g3),                 comp.param = list(list.param$f3, list.param$g3))$mixt.data ## Back to the context of admixture models, where one mixture component is unknown: list.comp <- list(f1 = NULL, g1 = \"norm\",                   f2 = NULL, g2 = \"norm\",                   f3 = NULL, g3 = \"norm\") list.param <- list(f1 = NULL, g1 = list(mean = 2, sd = 0.7),                    f2 = NULL, g2 = list(mean = 4, sd = 1.1),                    f3 = NULL, g3 = list(mean = -3, sd = 0.8)) ## Perform the 3-samples test: IBM_k_samples_test(samples = list(sim1,sim2,sim3), sim_U= NULL, n_sim_tab = 20, min_size = NULL,                    comp.dist = list.comp, comp.param = list.param, conf.level = 0.95,                    tune.penalty = FALSE, parallel = FALSE, n_cpu = 2) #> $confidence_level #> [1] 0.95 #>  #> $rejection_rule #>   95%  #> FALSE  #>  #> $p_value #> [1] 0.1111111 #>  #> $stat_name #> [1] \"d_1-2\" #>  #> $test.stat #> [1] 0.1406934 #>  #> $stat_rank #> [1] 1 #>  #> $penalized_stat #> [1]  -407.2  -814.4 -1221.6 #>  #> $penalty_H0 #> [1] NA #>  #> $gamma #> [1] NA #>  #> $tuning_constant #> [1] NA #>  #> $ordered_contrasts #> [1] 0.1406934 0.2146323 0.2336900 #>  #> $quantiles #> [1] 0.1781016 #>  #> $sim_U #>  [1] 0.09165706 0.11142468 0.07616017 0.04670654 0.04930151 0.10147686 #>  [7] 0.11188597 0.07374056 0.09825457 0.05960682 0.09525916 0.16690077 #> [13] 0.08459062 0.24157288 0.05130121 0.05334781 0.12206449 0.09842049 #>  #> $stat_terms #> [1] \"d_1-2\"                 \"d_1-2 + d_2-3\"         \"d_1-2 + d_2-3 + d_1-3\" #>  #> $contr_mat #>      [,1]      [,2]      [,3] #> [1,]   NA 0.1406934 0.2336900 #> [2,]   NA        NA 0.2146323 #> [3,]   NA        NA        NA #>   ####### Now under the alternative H1: list.comp <- list(f1 = \"norm\", g1 = \"norm\",                   f2 = \"norm\", g2 = \"norm\",                   f3 = \"norm\", g3 = \"norm\") list.param <- list(f1 = list(mean = 0, sd = 1), g1 = list(mean = 2, sd = 0.7),                    f2 = list(mean = 0, sd = 1), g2 = list(mean = 4, sd = 1.1),                    f3 = list(mean = 2, sd = 0.7), g3 = list(mean = 3, sd = 0.8)) sim1 <- rsimmix(n = 3000, unknownComp_weight = 0.8, comp.dist = list(list.comp$f1,list.comp$g1),                 comp.param = list(list.param$f1, list.param$g1))$mixt.data sim2 <- rsimmix(n= 3300, unknownComp_weight = 0.6, comp.dist = list(list.comp$f2,list.comp$g2),                 comp.param = list(list.param$f2, list.param$g2))$mixt.data sim3 <- rsimmix(n = 3100, unknownComp_weight = 0.7, comp.dist = list(list.comp$f3,list.comp$g3),                 comp.param = list(list.param$f3, list.param$g3))$mixt.data list.comp <- list(f1 = NULL, g1 = \"norm\",                   f2 = NULL, g2 = \"norm\",                   f3 = NULL, g3 = \"norm\") list.param <- list(f1 = NULL, g1 = list(mean = 2, sd = 0.7),                    f2 = NULL, g2 = list(mean = 4, sd = 1.1),                    f3 = NULL, g3 = list(mean = 3, sd = 0.8)) IBM_k_samples_test(samples = list(sim1,sim2,sim3), sim_U= NULL, n_sim_tab = 20, min_size = NULL,                    comp.dist = list.comp, comp.param = list.param, conf.level = 0.95,                    tune.penalty = FALSE, parallel = FALSE, n_cpu = 2) #> In 'IBM_estimProp': optimization algorithm was changed (in 'optim') from 'Nelder-Mead' to 'BFGS' to avoid the solution to explose. #> In 'IBM_estimProp': optimization algorithm was changed (in 'optim') from 'Nelder-Mead' to 'BFGS' to avoid the solution to explose. #> $confidence_level #> [1] 0.95 #>  #> $rejection_rule #>   95%  #> FALSE  #>  #> $p_value #> [1] 0.7368421 #>  #> $stat_name #> [1] \"d_1-2\" #>  #> $test.stat #> [1] 0.056383 #>  #> $stat_rank #> [1] 1 #>  #> $penalized_stat #> [1] -1059.4 -2111.7 -3113.2 #>  #> $penalty_H0 #> [1] NA #>  #> $gamma #> [1] NA #>  #> $tuning_constant #> [1] NA #>  #> $ordered_contrasts #> [1]  0.056383  7.228324 57.973966 #>  #> $quantiles #> [1] 0.1810461 #>  #> $sim_U #>  [1] 0.06336857 0.10505871 0.13024630 0.06171522 0.14101402 0.04449223 #>  [7] 0.06562402 0.05350937 0.03014167 0.11180409 0.08359223 0.10135126 #> [13] 0.04139095 0.03746550 0.15936422 0.17684165 0.09405541 0.21888626 #> [19] 0.06804066 #>  #> $stat_terms #> [1] \"d_1-2\"                 \"d_1-2 + d_1-3\"         \"d_1-2 + d_1-3 + d_2-3\" #>  #> $contr_mat #>      [,1]     [,2]      [,3] #> [1,]   NA 0.056383  7.228324 #> [2,]   NA       NA 57.973966 #> [3,]   NA       NA        NA #>  # }"},{"path":"/reference/IBM_tabul_stochasticInteg.html","id":null,"dir":"Reference","previous_headings":"","what":"Distribution of the contrast in the Inversion - Best Matching (IBM) method — IBM_tabul_stochasticInteg","title":"Distribution of the contrast in the Inversion - Best Matching (IBM) method — IBM_tabul_stochasticInteg","text":"Tabulate distribution related inner convergence part contrast, simulating trajectories gaussian processes applying transformations. Useful perform test hypothesis , retrieving (1-alpha)-quantile interest. See 'Details' cited paper therein information.","code":""},{"path":"/reference/IBM_tabul_stochasticInteg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Distribution of the contrast in the Inversion - Best Matching (IBM) method — IBM_tabul_stochasticInteg","text":"","code":"IBM_tabul_stochasticInteg(   n.sim = 200,   n.varCovMat = 100,   sample1 = NULL,   sample2 = NULL,   min_size = NULL,   comp.dist = NULL,   comp.param = NULL,   parallel = FALSE,   n_cpu = 2 )"},{"path":"/reference/IBM_tabul_stochasticInteg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Distribution of the contrast in the Inversion - Best Matching (IBM) method — IBM_tabul_stochasticInteg","text":"n.sim Number trajectories simulated gaussian processes (number random draws tabulation). n.varCovMat Number time points gaussian processes simulated. sample1 Observations first sample study. sample2 Observations second sample study. min_size (default NULL) k-sample case, useful provide minimal size among samples. Otherwise, useless. comp.dist list four elements corresponding component distributions (specified R native names distributions) involved two admixture models. two first elements refer unknown known components 1st admixture model, last two ones second admixture model. unknown elements, must specified 'NULL' objects. instance, 'comp.dist' specified follows: list(f1=NULL, g1='norm', f2=NULL, g2='norm'). comp.param list four elements corresponding parameters component distributions, element list . names used list must correspond native R argument names distributions. two first elements refer parameters unknown known components 1st admixture model, last two ones second admixture model. unknown elements, must specified 'NULL' objects. instance, 'comp.param' specified follows: : list(f1=NULL, g1=list(mean=0,sd=1), f2=NULL, g2=list(mean=3,sd=1.1)). parallel (default FALSE) Boolean indicate whether parallel computations performed (speed-tabulation). n_cpu (default 2) Number cores used computations parallelizing.","code":""},{"path":"/reference/IBM_tabul_stochasticInteg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Distribution of the contrast in the Inversion - Best Matching (IBM) method — IBM_tabul_stochasticInteg","text":"list four elements, containing: 1) random draws quantity 'sample size times empirical contrast', defined IBM approach (see 'Details' ); 2) estimated unknown component weights two admixture models; 3) value quantity 'sample size times empirical contrast'; 4) sequence points support used evaluate variance-covariance matrix empirical processes.","code":""},{"path":"/reference/IBM_tabul_stochasticInteg.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Distribution of the contrast in the Inversion - Best Matching (IBM) method — IBM_tabul_stochasticInteg","text":"See paper presenting IBM approach following HAL weblink: https://hal.science/hal-03201760","code":""},{"path":"/reference/IBM_tabul_stochasticInteg.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Distribution of the contrast in the Inversion - Best Matching (IBM) method — IBM_tabul_stochasticInteg","text":"Xavier Milhaud xavier.milhaud.research@gmail.com","code":""},{"path":"/reference/IBM_tabul_stochasticInteg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Distribution of the contrast in the Inversion - Best Matching (IBM) method — IBM_tabul_stochasticInteg","text":"","code":"# \\donttest{ ## Simulate data: list.comp <- list(f1 = 'norm', g1 = 'norm',                   f2 = 'norm', g2 = 'norm') list.param <- list(f1 = list(mean = 1, sd = 1), g1 = list(mean = 2, sd = 0.7),                    f2 = list(mean = 1, sd = 1), g2 = list(mean = 3, sd = 1.2)) X.sim <- rsimmix(n=1000, unknownComp_weight=0.7, comp.dist = list(list.comp$f1,list.comp$g1),                  comp.param = list(list.param$f1, list.param$g1))$mixt.data Y.sim <- rsimmix(n=1200, unknownComp_weight=0.6, comp.dist = list(list.comp$f2,list.comp$g2),                  comp.param = list(list.param$f2, list.param$g2))$mixt.data ## Tabulate 1st term of stochastic integral (inner convergence) in a real-life setting: list.comp <- list(f1 = NULL, g1 = 'norm',                   f2 = NULL, g2 = 'norm') list.param <- list(f1 = NULL, g1 = list(mean = 2, sd = 0.7),                    f2 = NULL, g2 = list(mean = 3, sd = 1.2)) U <- IBM_tabul_stochasticInteg(n.sim = 2, n.varCovMat = 20, sample1 = X.sim, sample2 = Y.sim,                                min_size = NULL, comp.dist = list.comp, comp.param = list.param,                                parallel = FALSE, n_cpu = 2) # }"},{"path":"/reference/IBM_theoretical_contrast.html","id":null,"dir":"Reference","previous_headings":"","what":"Theoretical contrast in the Inversion - Best Matching (IBM) method — IBM_theoretical_contrast","title":"Theoretical contrast in the Inversion - Best Matching (IBM) method — IBM_theoretical_contrast","text":"Defines theoretical contrast IBM approach. Useful case simulation studies, since parameters known user. information considered contrast IBM approach, see 'Details' .","code":""},{"path":"/reference/IBM_theoretical_contrast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Theoretical contrast in the Inversion - Best Matching (IBM) method — IBM_theoretical_contrast","text":"","code":"IBM_theoretical_contrast(   par,   theo.par,   fixed.p.X = NULL,   G = NULL,   comp.dist,   comp.param,   sample1,   sample2 )"},{"path":"/reference/IBM_theoretical_contrast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Theoretical contrast in the Inversion - Best Matching (IBM) method — IBM_theoretical_contrast","text":"par Numeric vector two elements, corresponding two parameter values compute contrast. practice component weights two admixture models. theo.par Numeric vector two elements, known (true) mixture weights. fixed.p.X Arbitrary value chosen user component weight related unknown component first admixture model. useful optimization known components two models identical (G1=G2, leading unidimensional optimization). G Distribution integrate calculating contrast. comp.dist list four elements corresponding component distributions (specified R native names distributions) involved two admixture models. two first elements refer unknown known components 1st admixture model, last two ones second admixture model. unknown elements permitted. instance, 'comp.dist' specified follows: list(f1='rnorm', g1='norm', f2='rnorm', g2='norm'). comp.param list four elements corresponding parameters component distributions, element list . names used list must correspond native R argument names distributions. two first elements refer parameters unknown known components 1st admixture model, last two ones second admixture model. unknown elements permitted. instance, 'comp.param' specified follows: : list(f1 = list(mean=2,sd=0.3), g1 = list(mean=0,sd=1), f2 = list(mean=2,sd=0.3), g2 = list(mean=3,sd=1.1)). sample1 Observations first sample study. sample2 Observations second sample study.","code":""},{"path":"/reference/IBM_theoretical_contrast.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Theoretical contrast in the Inversion - Best Matching (IBM) method — IBM_theoretical_contrast","text":"theoretical contrast value evaluated parameter values.","code":""},{"path":"/reference/IBM_theoretical_contrast.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Theoretical contrast in the Inversion - Best Matching (IBM) method — IBM_theoretical_contrast","text":"See paper presenting IBM approach following HAL weblink: https://hal.science/hal-03201760","code":""},{"path":"/reference/IBM_theoretical_contrast.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Theoretical contrast in the Inversion - Best Matching (IBM) method — IBM_theoretical_contrast","text":"Xavier Milhaud xavier.milhaud.research@gmail.com","code":""},{"path":"/reference/IBM_theoretical_contrast.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Theoretical contrast in the Inversion - Best Matching (IBM) method — IBM_theoretical_contrast","text":"","code":"## Simulate data: list.comp <- list(f1 = 'norm', g1 = 'norm',                   f2 = 'norm', g2 = 'norm') list.param <- list(f1 = list(mean = 3, sd = 0.5), g1 = list(mean = 0, sd = 1),                    f2 = list(mean = 1, sd = 0.1), g2 = list(mean = 5, sd = 2)) sample1 <- rsimmix(n=1500, unknownComp_weight=0.5, comp.dist = list(list.comp$f1,list.comp$g1),                                                    comp.param=list(list.param$f1,list.param$g1)) sample2 <- rsimmix(n=2000, unknownComp_weight=0.7, comp.dist = list(list.comp$f2,list.comp$g2),                                                    comp.param=list(list.param$f2,list.param$g2)) ## Create the distribution on which the contrast will be integrated: G <- stats::rnorm(n = 1000, mean = sample(c(sample1[['mixt.data']],sample2[['mixt.data']]),                                           size = 1000, replace = TRUE),                   sd = stats::density(c(sample1[['mixt.data']],sample2[['mixt.data']]))$bw) ## Compute the theoretical contrast at parameters (p1,p2) = (0.2,0.7): IBM_theoretical_contrast(par = c(0.2,0.7), theo.par = c(0.5,0.7), fixed.p.X = NULL, G = G,                          comp.dist = list.comp, comp.param = list.param,                          sample1 = sample1[['mixt.data']], sample2 = sample2[['mixt.data']]) #> [1] 2.181017"},{"path":"/reference/IBM_theoretical_gap.html","id":null,"dir":"Reference","previous_headings":"","what":"Difference between unknown cumulative distribution functions of admixture models at some given point — IBM_theoretical_gap","title":"Difference between unknown cumulative distribution functions of admixture models at some given point — IBM_theoretical_gap","text":"Compute gap unknown cumulative distribution functions two considered admixture models given point, admixture model probability distribution function (pdf) given l l = p*f + (1-p)*g. Uses inversion method , .e. f = (1/p) (l - (1-p)g), g represents known component admixture model p proportion unknown component. difference must integrated domain compute global discrepancy, introduced paper presenting IBM approach (see 'Details' ).","code":""},{"path":"/reference/IBM_theoretical_gap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Difference between unknown cumulative distribution functions of admixture models at some given point — IBM_theoretical_gap","text":"","code":"IBM_theoretical_gap(z, par, known.p = c(0.5, 0.5), comp.dist, comp.param)"},{"path":"/reference/IBM_theoretical_gap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Difference between unknown cumulative distribution functions of admixture models at some given point — IBM_theoretical_gap","text":"z Point difference unknown component distributions two considered admixture models computed. par Numeric vector two elements, corresponding two parameter values compute gap. practice component weights two admixture models. known.p Numeric vector two elements, known (true) mixture weights. comp.dist list four elements corresponding component distributions (specified R native names distributions) involved two admixture models. two first elements refer unknown known components 1st admixture model, last two ones second admixture model. unknown elements permitted. instance, 'comp.dist' specified follows: list(f1='rnorm', g1='norm', f2='rnorm', g2='norm'). comp.param list four elements corresponding parameters component distributions, element list . names used list must correspond native R argument names distributions. two first elements refer parameters unknown known components 1st admixture model, last two ones second admixture model. unknown elements permitted. instance, 'comp.param' specified follows: : list(f1 = list(mean=2,sd=0.3), g1 = list(mean=0,sd=1), f2 = list(mean=2,sd=0.3), g2 = list(mean=3,sd=1.1)).","code":""},{"path":"/reference/IBM_theoretical_gap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Difference between unknown cumulative distribution functions of admixture models at some given point — IBM_theoretical_gap","text":"gap F1 F2 (unknown components two admixture models), evaluated specified point.","code":""},{"path":"/reference/IBM_theoretical_gap.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Difference between unknown cumulative distribution functions of admixture models at some given point — IBM_theoretical_gap","text":"See paper presenting IBM approach following HAL weblink: https://hal.science/hal-03201760","code":""},{"path":"/reference/IBM_theoretical_gap.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Difference between unknown cumulative distribution functions of admixture models at some given point — IBM_theoretical_gap","text":"Xavier Milhaud xavier.milhaud.research@gmail.com","code":""},{"path":"/reference/IBM_theoretical_gap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Difference between unknown cumulative distribution functions of admixture models at some given point — IBM_theoretical_gap","text":"","code":"list.comp <- list(f1 = 'norm', g1 = 'norm',                   f2 = 'norm', g2 = 'norm') list.param <- list(f1 = list(mean = 3, sd = 0.5), g1 = list(mean = 0, sd = 1),                    f2 = list(mean = 1, sd = 0.1), g2 = list(mean = 5, sd = 2)) IBM_theoretical_gap(z = 2.8, par = c(0.3,0.6), known.p = c(0.5,0.5),                     comp.dist = list.comp, comp.param = list.param) #> [1] -0.9466105"},{"path":"/reference/PatraSen_cv_mixmodel.html","id":null,"dir":"Reference","previous_headings":"","what":"Cross-validation estimate (by Patra and Sen) of the unknown component weight as well as the unknown distribution in an admixture model — PatraSen_cv_mixmodel","title":"Cross-validation estimate (by Patra and Sen) of the unknown component weight as well as the unknown distribution in an admixture model — PatraSen_cv_mixmodel","text":"Estimation unknown elements (Patra Sen method) admixture model probability density function l: l = p*f + (1-p)*g, g known component two-component admixture, p unknown proportion unknown component distribution f. estimated unknown component weight p selected using cross-validation technique helps choose right penalization, see 'Details' information.","code":""},{"path":"/reference/PatraSen_cv_mixmodel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cross-validation estimate (by Patra and Sen) of the unknown component weight as well as the unknown distribution in an admixture model — PatraSen_cv_mixmodel","text":"","code":"PatraSen_cv_mixmodel(   data,   folds = 10,   reps = 1,   cn.s = NULL,   cn.length = NULL,   gridsize = 200 )"},{"path":"/reference/PatraSen_cv_mixmodel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cross-validation estimate (by Patra and Sen) of the unknown component weight as well as the unknown distribution in an admixture model — PatraSen_cv_mixmodel","text":"data Sample known component density admixture model transformed Uniform(0,1) distribution. folds (default 10) Number folds used cross-validation. reps (default 1) Number replications cross-validation. cn.s (default NULL) sequence 'c.n' used cross-validation (vector values). cn.length (default NULL) Number equally spaced tuning parameter (.001 x log(log(n)) 0.2 x log(log(n))). Values search . gridsize (default 200) Number equally spaced points (0 1) evaluate distance function. Larger values computationally intensive also lead accurate estimates.","code":""},{"path":"/reference/PatraSen_cv_mixmodel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cross-validation estimate (by Patra and Sen) of the unknown component weight as well as the unknown distribution in an admixture model — PatraSen_cv_mixmodel","text":"list containing 'alp.hat' (estimate unknown component weight), 'Fs.hat' (list elements 'x' 'y' values function estimate unknown cumultaive distribution function), 'dist.' object class 'dist.fun' using complete data.gen, 'c.n' value tuning parameter used compute final estimate, finally 'cv.' object class 'cv.mixmodel'. object NULL method \"fixed\".","code":""},{"path":"/reference/PatraSen_cv_mixmodel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cross-validation estimate (by Patra and Sen) of the unknown component weight as well as the unknown distribution in an admixture model — PatraSen_cv_mixmodel","text":"See Patra, R.K. Sen, B. (2016); Estimation Two-component Mixture Model Applications Multiple Testing; JRSS Series B, 78, pp. 869--893.","code":""},{"path":"/reference/PatraSen_cv_mixmodel.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Cross-validation estimate (by Patra and Sen) of the unknown component weight as well as the unknown distribution in an admixture model — PatraSen_cv_mixmodel","text":"Xavier Milhaud xavier.milhaud.research@gmail.com","code":""},{"path":"/reference/PatraSen_cv_mixmodel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cross-validation estimate (by Patra and Sen) of the unknown component weight as well as the unknown distribution in an admixture model — PatraSen_cv_mixmodel","text":"","code":"## Simulate data: comp.dist <- list(f = 'norm', g = 'norm') comp.param <- list(f = list(mean = 3, sd = 0.5),                    g = list(mean = 0, sd = 1)) data1 <- rsimmix(n = 2000, unknownComp_weight = 0.3, comp.dist, comp.param)[['mixt.data']] ## Transform the known component of the admixture model into a Uniform(0,1) distribution: comp.dist <- list(f = NULL, g = 'norm') comp.param <- list(f = NULL, g = list(mean = 0, sd = 1)) data1_transfo <- knownComp_to_uniform(data = data1, comp.dist = list(comp.dist$f, comp.dist$g),                                       comp.param = list(comp.param$f, comp.param$g)) plot(density(data1_transfo))  ## Estimate the proportion of the unknown component of the admixture model: PatraSen_cv_mixmodel(data = data1_transfo, folds = 3, reps = 1, cn.s = NULL,                                cn.length = 3, gridsize = 100)$alp.hat #> Warning: Make sure that data is transformed such that the known component is Uniformly(0,1) distributed. #> [1] 0.29"},{"path":"/reference/PatraSen_density_est.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the estimate of the density of the unknown component in an admixture model — PatraSen_density_est","title":"Compute the estimate of the density of the unknown component in an admixture model — PatraSen_density_est","text":"Compute Patra Sen technique estimate f.s (density corresponding F.s) f.s known either decreasing increasing.","code":""},{"path":"/reference/PatraSen_density_est.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the estimate of the density of the unknown component in an admixture model — PatraSen_density_est","text":"","code":"PatraSen_density_est(input, dec.density = TRUE)"},{"path":"/reference/PatraSen_density_est.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the estimate of the density of the unknown component in an admixture model — PatraSen_density_est","text":"input R object class 'cv.mixmodel' 'mixmodel'. dec.density boolean indicating whether density increasing decreasing.","code":""},{"path":"/reference/PatraSen_density_est.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the estimate of the density of the unknown component in an admixture model — PatraSen_density_est","text":"estimator unknown component density.","code":""},{"path":"/reference/PatraSen_density_est.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute the estimate of the density of the unknown component in an admixture model — PatraSen_density_est","text":"See Patra, R.K. Sen, B. (2016); Estimation Two-component Mixture Model Applications Multiple Testing; JRSS Series B, 78, pp. 869--893.","code":""},{"path":"/reference/PatraSen_density_est.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Compute the estimate of the density of the unknown component in an admixture model — PatraSen_density_est","text":"Xavier Milhaud xavier.milhaud.research@gmail.com","code":""},{"path":"/reference/PatraSen_density_est.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the estimate of the density of the unknown component in an admixture model — PatraSen_density_est","text":"","code":"comp.dist <- list(f = 'norm', g = 'norm') comp.param <- list(f = list(mean = 3, sd = 0.5), g = list(mean = 0, sd = 1)) data1 <- rsimmix(n = 2000, unknownComp_weight = 0.6, comp.dist, comp.param)[['mixt.data']] data1_transfo <- knownComp_to_uniform(data = data1, comp.dist = list(comp.dist$f, comp.dist$g),                                       comp.param = list(comp.param$f, comp.param$g)) res <- PatraSen_cv_mixmodel(data = data1_transfo, folds = 3, reps = 1, cn.s = NULL,                             cn.length = 3, gridsize = 200) #> Warning: Make sure that data is transformed such that the known component is Uniformly(0,1) distributed. PatraSen_density_est(res, dec.density = TRUE) #> $x #> [1] 0.005055278 0.005055278 0.999997082 0.999997082 #>  #> $y #> [1] 0.000000 1.005084 1.005084 0.000000 #>"},{"path":"/reference/PatraSen_dist_calc.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the distance to be minimized using Patra and Sen estimation technique in admixture models — PatraSen_dist_calc","title":"Compute the distance to be minimized using Patra and Sen estimation technique in admixture models — PatraSen_dist_calc","text":"Compute distance minimized using Patra Sen estimation technique integrating along given grid appropriate distance. developments, see 'Details' .","code":""},{"path":"/reference/PatraSen_dist_calc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the distance to be minimized using Patra and Sen estimation technique in admixture models — PatraSen_dist_calc","text":"","code":"PatraSen_dist_calc(data, gridsize = 200)"},{"path":"/reference/PatraSen_dist_calc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the distance to be minimized using Patra and Sen estimation technique in admixture models — PatraSen_dist_calc","text":"data Sample known component density admixture model transformed Uniform(0,1) distribution. gridsize Gridsize make computations.","code":""},{"path":"/reference/PatraSen_dist_calc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the distance to be minimized using Patra and Sen estimation technique in admixture models — PatraSen_dist_calc","text":"list containing evaluated distance additional information.","code":""},{"path":"/reference/PatraSen_dist_calc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute the distance to be minimized using Patra and Sen estimation technique in admixture models — PatraSen_dist_calc","text":"See Patra, R.K. Sen, B. (2016); Estimation Two-component Mixture Model Applications Multiple Testing; JRSS Series B, 78, pp. 869--893.","code":""},{"path":"/reference/PatraSen_dist_calc.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Compute the distance to be minimized using Patra and Sen estimation technique in admixture models — PatraSen_dist_calc","text":"Xavier Milhaud xavier.milhaud.research@gmail.com","code":""},{"path":"/reference/PatraSen_dist_calc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the distance to be minimized using Patra and Sen estimation technique in admixture models — PatraSen_dist_calc","text":"","code":"comp.dist <- list(f = 'norm', g = 'norm') comp.param <- list(f = list(mean = 3, sd = 0.5), g = list(mean = 0, sd = 1)) data1 <- rsimmix(n = 3000, unknownComp_weight = 0.6, comp.dist, comp.param)[['mixt.data']] data1_transfo <- knownComp_to_uniform(data = data1, comp.dist = list(comp.dist$f, comp.dist$g),                                       comp.param = list(comp.param$f, comp.param$g)) PatraSen_dist_calc(data = data1_transfo, gridsize = 200) #> $distance #>   [1] 3.361983e-01 3.324850e-01 3.287842e-01 3.250959e-01 3.214200e-01 #>   [6] 3.177568e-01 3.141061e-01 3.104681e-01 3.068428e-01 3.032303e-01 #>  [11] 2.996304e-01 2.960435e-01 2.924693e-01 2.889081e-01 2.853598e-01 #>  [16] 2.818245e-01 2.783023e-01 2.747931e-01 2.712970e-01 2.678141e-01 #>  [21] 2.643445e-01 2.608881e-01 2.574450e-01 2.540153e-01 2.505990e-01 #>  [26] 2.471961e-01 2.438068e-01 2.404310e-01 2.370689e-01 2.337204e-01 #>  [31] 2.303856e-01 2.270646e-01 2.237574e-01 2.204641e-01 2.171847e-01 #>  [36] 2.139193e-01 2.106680e-01 2.074307e-01 2.042076e-01 2.009987e-01 #>  [41] 1.978041e-01 1.946238e-01 1.914579e-01 1.883064e-01 1.851695e-01 #>  [46] 1.820471e-01 1.789394e-01 1.758464e-01 1.727682e-01 1.697047e-01 #>  [51] 1.666562e-01 1.636227e-01 1.606042e-01 1.576008e-01 1.546126e-01 #>  [56] 1.516396e-01 1.486819e-01 1.457397e-01 1.428129e-01 1.399016e-01 #>  [61] 1.370060e-01 1.341260e-01 1.312619e-01 1.284136e-01 1.255812e-01 #>  [66] 1.227648e-01 1.199646e-01 1.171805e-01 1.144128e-01 1.116613e-01 #>  [71] 1.089264e-01 1.062080e-01 1.035062e-01 1.008211e-01 9.815287e-02 #>  [76] 9.550155e-02 9.286724e-02 9.025005e-02 8.765007e-02 8.506741e-02 #>  [81] 8.250218e-02 7.995448e-02 7.742442e-02 7.491211e-02 7.241769e-02 #>  [86] 6.994127e-02 6.748296e-02 6.504288e-02 6.262118e-02 6.021797e-02 #>  [91] 5.783338e-02 5.546754e-02 5.312060e-02 5.079271e-02 4.848404e-02 #>  [96] 4.619476e-02 4.392502e-02 4.167501e-02 3.944491e-02 3.723491e-02 #> [101] 3.504523e-02 3.287610e-02 3.072777e-02 2.860053e-02 2.649473e-02 #> [106] 2.441073e-02 2.234886e-02 2.030953e-02 1.829332e-02 1.630097e-02 #> [111] 1.433327e-02 1.239131e-02 1.047647e-02 8.590863e-03 6.739034e-03 #> [116] 4.930813e-03 3.197573e-03 1.686933e-03 1.078797e-03 8.578124e-04 #> [121] 6.963532e-04 5.753369e-04 4.873552e-04 4.213681e-04 3.752818e-04 #> [126] 3.406988e-04 3.136501e-04 2.902310e-04 2.690386e-04 2.495100e-04 #> [131] 2.313960e-04 2.147684e-04 1.995807e-04 1.856940e-04 1.730045e-04 #> [136] 1.614530e-04 1.510074e-04 1.416410e-04 1.330587e-04 1.251084e-04 #> [141] 1.177572e-04 1.109756e-04 1.047309e-04 9.889012e-05 9.340704e-05 #> [146] 8.824566e-05 8.332652e-05 7.862976e-05 7.413511e-05 6.983172e-05 #> [151] 6.572084e-05 6.180723e-05 5.808642e-05 5.454483e-05 5.118761e-05 #> [156] 4.802117e-05 4.503094e-05 4.218803e-05 3.949465e-05 3.694356e-05 #> [161] 3.451341e-05 3.218833e-05 2.996938e-05 2.784669e-05 2.581594e-05 #> [166] 2.387188e-05 2.201497e-05 2.024953e-05 1.857592e-05 1.697365e-05 #> [171] 1.544740e-05 1.400826e-05 1.265862e-05 1.139202e-05 1.020006e-05 #> [176] 9.074992e-06 8.014878e-06 7.012690e-06 6.073836e-06 5.203382e-06 #> [181] 4.381030e-06 3.595650e-06 2.864046e-06 2.184070e-06 1.574547e-06 #> [186] 9.929389e-07 4.595550e-07 6.455588e-08 1.188707e-09 1.080642e-09 #> [191] 9.725781e-10 8.645139e-10 7.564496e-10 6.483854e-10 5.403212e-10 #> [196] 4.322569e-10 3.241927e-10 2.161285e-10 1.080642e-10 0.000000e+00 #>  #> $gridsize #> [1] 200 #>  #> $grid.pts #>   [1] 0.005 0.010 0.015 0.020 0.025 0.030 0.035 0.040 0.045 0.050 0.055 0.060 #>  [13] 0.065 0.070 0.075 0.080 0.085 0.090 0.095 0.100 0.105 0.110 0.115 0.120 #>  [25] 0.125 0.130 0.135 0.140 0.145 0.150 0.155 0.160 0.165 0.170 0.175 0.180 #>  [37] 0.185 0.190 0.195 0.200 0.205 0.210 0.215 0.220 0.225 0.230 0.235 0.240 #>  [49] 0.245 0.250 0.255 0.260 0.265 0.270 0.275 0.280 0.285 0.290 0.295 0.300 #>  [61] 0.305 0.310 0.315 0.320 0.325 0.330 0.335 0.340 0.345 0.350 0.355 0.360 #>  [73] 0.365 0.370 0.375 0.380 0.385 0.390 0.395 0.400 0.405 0.410 0.415 0.420 #>  [85] 0.425 0.430 0.435 0.440 0.445 0.450 0.455 0.460 0.465 0.470 0.475 0.480 #>  [97] 0.485 0.490 0.495 0.500 0.505 0.510 0.515 0.520 0.525 0.530 0.535 0.540 #> [109] 0.545 0.550 0.555 0.560 0.565 0.570 0.575 0.580 0.585 0.590 0.595 0.600 #> [121] 0.605 0.610 0.615 0.620 0.625 0.630 0.635 0.640 0.645 0.650 0.655 0.660 #> [133] 0.665 0.670 0.675 0.680 0.685 0.690 0.695 0.700 0.705 0.710 0.715 0.720 #> [145] 0.725 0.730 0.735 0.740 0.745 0.750 0.755 0.760 0.765 0.770 0.775 0.780 #> [157] 0.785 0.790 0.795 0.800 0.805 0.810 0.815 0.820 0.825 0.830 0.835 0.840 #> [169] 0.845 0.850 0.855 0.860 0.865 0.870 0.875 0.880 0.885 0.890 0.895 0.900 #> [181] 0.905 0.910 0.915 0.920 0.925 0.930 0.935 0.940 0.945 0.950 0.955 0.960 #> [193] 0.965 0.970 0.975 0.980 0.985 0.990 0.995 1.000 #>  #> $F.n #>    [1] 0.0003333333 0.0006666667 0.0010000000 0.0013333333 0.0016666667 #>    [6] 0.0020000000 0.0023333333 0.0026666667 0.0030000000 0.0033333333 #>   [11] 0.0036666667 0.0040000000 0.0043333333 0.0046666667 0.0050000000 #>   [16] 0.0053333333 0.0056666667 0.0060000000 0.0063333333 0.0066666667 #>   [21] 0.0070000000 0.0073333333 0.0076666667 0.0080000000 0.0083333333 #>   [26] 0.0086666667 0.0090000000 0.0093333333 0.0096666667 0.0100000000 #>   [31] 0.0103333333 0.0106666667 0.0110000000 0.0113333333 0.0116666667 #>   [36] 0.0120000000 0.0123333333 0.0126666667 0.0130000000 0.0133333333 #>   [41] 0.0136666667 0.0140000000 0.0143333333 0.0146666667 0.0150000000 #>   [46] 0.0153333333 0.0156666667 0.0160000000 0.0163333333 0.0166666667 #>   [51] 0.0170000000 0.0173333333 0.0176666667 0.0180000000 0.0183333333 #>   [56] 0.0186666667 0.0190000000 0.0193333333 0.0196666667 0.0200000000 #>   [61] 0.0203333333 0.0206666667 0.0210000000 0.0213333333 0.0216666667 #>   [66] 0.0220000000 0.0223333333 0.0226666667 0.0230000000 0.0233333333 #>   [71] 0.0236666667 0.0240000000 0.0243333333 0.0246666667 0.0250000000 #>   [76] 0.0253333333 0.0256666667 0.0260000000 0.0263333333 0.0266666667 #>   [81] 0.0270000000 0.0273333333 0.0276666667 0.0280000000 0.0283333333 #>   [86] 0.0286666667 0.0290000000 0.0293333333 0.0296666667 0.0300000000 #>   [91] 0.0303333333 0.0306666667 0.0310000000 0.0313333333 0.0316666667 #>   [96] 0.0320000000 0.0323333333 0.0326666667 0.0330000000 0.0333333333 #>  [101] 0.0336666667 0.0340000000 0.0343333333 0.0346666667 0.0350000000 #>  [106] 0.0353333333 0.0356666667 0.0360000000 0.0363333333 0.0366666667 #>  [111] 0.0370000000 0.0373333333 0.0376666667 0.0380000000 0.0383333333 #>  [116] 0.0386666667 0.0390000000 0.0393333333 0.0396666667 0.0400000000 #>  [121] 0.0403333333 0.0406666667 0.0410000000 0.0413333333 0.0416666667 #>  [126] 0.0420000000 0.0423333333 0.0426666667 0.0430000000 0.0433333333 #>  [131] 0.0436666667 0.0440000000 0.0443333333 0.0446666667 0.0450000000 #>  [136] 0.0453333333 0.0456666667 0.0460000000 0.0463333333 0.0466666667 #>  [141] 0.0470000000 0.0473333333 0.0476666667 0.0480000000 0.0483333333 #>  [146] 0.0486666667 0.0490000000 0.0493333333 0.0496666667 0.0500000000 #>  [151] 0.0503333333 0.0506666667 0.0510000000 0.0513333333 0.0516666667 #>  [156] 0.0520000000 0.0523333333 0.0526666667 0.0530000000 0.0533333333 #>  [161] 0.0536666667 0.0540000000 0.0543333333 0.0546666667 0.0550000000 #>  [166] 0.0553333333 0.0556666667 0.0560000000 0.0563333333 0.0566666667 #>  [171] 0.0570000000 0.0573333333 0.0576666667 0.0580000000 0.0583333333 #>  [176] 0.0586666667 0.0590000000 0.0593333333 0.0596666667 0.0600000000 #>  [181] 0.0603333333 0.0606666667 0.0610000000 0.0613333333 0.0616666667 #>  [186] 0.0620000000 0.0623333333 0.0626666667 0.0630000000 0.0633333333 #>  [191] 0.0636666667 0.0640000000 0.0643333333 0.0646666667 0.0650000000 #>  [196] 0.0653333333 0.0656666667 0.0660000000 0.0663333333 0.0666666667 #>  [201] 0.0670000000 0.0673333333 0.0676666667 0.0680000000 0.0683333333 #>  [206] 0.0686666667 0.0690000000 0.0693333333 0.0696666667 0.0700000000 #>  [211] 0.0703333333 0.0706666667 0.0710000000 0.0713333333 0.0716666667 #>  [216] 0.0720000000 0.0723333333 0.0726666667 0.0730000000 0.0733333333 #>  [221] 0.0736666667 0.0740000000 0.0743333333 0.0746666667 0.0750000000 #>  [226] 0.0753333333 0.0756666667 0.0760000000 0.0763333333 0.0766666667 #>  [231] 0.0770000000 0.0773333333 0.0776666667 0.0780000000 0.0783333333 #>  [236] 0.0786666667 0.0790000000 0.0793333333 0.0796666667 0.0800000000 #>  [241] 0.0803333333 0.0806666667 0.0810000000 0.0813333333 0.0816666667 #>  [246] 0.0820000000 0.0823333333 0.0826666667 0.0830000000 0.0833333333 #>  [251] 0.0836666667 0.0840000000 0.0843333333 0.0846666667 0.0850000000 #>  [256] 0.0853333333 0.0856666667 0.0860000000 0.0863333333 0.0866666667 #>  [261] 0.0870000000 0.0873333333 0.0876666667 0.0880000000 0.0883333333 #>  [266] 0.0886666667 0.0890000000 0.0893333333 0.0896666667 0.0900000000 #>  [271] 0.0903333333 0.0906666667 0.0910000000 0.0913333333 0.0916666667 #>  [276] 0.0920000000 0.0923333333 0.0926666667 0.0930000000 0.0933333333 #>  [281] 0.0936666667 0.0940000000 0.0943333333 0.0946666667 0.0950000000 #>  [286] 0.0953333333 0.0956666667 0.0960000000 0.0963333333 0.0966666667 #>  [291] 0.0970000000 0.0973333333 0.0976666667 0.0980000000 0.0983333333 #>  [296] 0.0986666667 0.0990000000 0.0993333333 0.0996666667 0.1000000000 #>  [301] 0.1003333333 0.1006666667 0.1010000000 0.1013333333 0.1016666667 #>  [306] 0.1020000000 0.1023333333 0.1026666667 0.1030000000 0.1033333333 #>  [311] 0.1036666667 0.1040000000 0.1043333333 0.1046666667 0.1050000000 #>  [316] 0.1053333333 0.1056666667 0.1060000000 0.1063333333 0.1066666667 #>  [321] 0.1070000000 0.1073333333 0.1076666667 0.1080000000 0.1083333333 #>  [326] 0.1086666667 0.1090000000 0.1093333333 0.1096666667 0.1100000000 #>  [331] 0.1103333333 0.1106666667 0.1110000000 0.1113333333 0.1116666667 #>  [336] 0.1120000000 0.1123333333 0.1126666667 0.1130000000 0.1133333333 #>  [341] 0.1136666667 0.1140000000 0.1143333333 0.1146666667 0.1150000000 #>  [346] 0.1153333333 0.1156666667 0.1160000000 0.1163333333 0.1166666667 #>  [351] 0.1170000000 0.1173333333 0.1176666667 0.1180000000 0.1183333333 #>  [356] 0.1186666667 0.1190000000 0.1193333333 0.1196666667 0.1200000000 #>  [361] 0.1203333333 0.1206666667 0.1210000000 0.1213333333 0.1216666667 #>  [366] 0.1220000000 0.1223333333 0.1226666667 0.1230000000 0.1233333333 #>  [371] 0.1236666667 0.1240000000 0.1243333333 0.1246666667 0.1250000000 #>  [376] 0.1253333333 0.1256666667 0.1260000000 0.1263333333 0.1266666667 #>  [381] 0.1270000000 0.1273333333 0.1276666667 0.1280000000 0.1283333333 #>  [386] 0.1286666667 0.1290000000 0.1293333333 0.1296666667 0.1300000000 #>  [391] 0.1303333333 0.1306666667 0.1310000000 0.1313333333 0.1316666667 #>  [396] 0.1320000000 0.1323333333 0.1326666667 0.1330000000 0.1333333333 #>  [401] 0.1336666667 0.1340000000 0.1343333333 0.1346666667 0.1350000000 #>  [406] 0.1353333333 0.1356666667 0.1360000000 0.1363333333 0.1366666667 #>  [411] 0.1370000000 0.1373333333 0.1376666667 0.1380000000 0.1383333333 #>  [416] 0.1386666667 0.1390000000 0.1393333333 0.1396666667 0.1400000000 #>  [421] 0.1403333333 0.1406666667 0.1410000000 0.1413333333 0.1416666667 #>  [426] 0.1420000000 0.1423333333 0.1426666667 0.1430000000 0.1433333333 #>  [431] 0.1436666667 0.1440000000 0.1443333333 0.1446666667 0.1450000000 #>  [436] 0.1453333333 0.1456666667 0.1460000000 0.1463333333 0.1466666667 #>  [441] 0.1470000000 0.1473333333 0.1476666667 0.1480000000 0.1483333333 #>  [446] 0.1486666667 0.1490000000 0.1493333333 0.1496666667 0.1500000000 #>  [451] 0.1503333333 0.1506666667 0.1510000000 0.1513333333 0.1516666667 #>  [456] 0.1520000000 0.1523333333 0.1526666667 0.1530000000 0.1533333333 #>  [461] 0.1536666667 0.1540000000 0.1543333333 0.1546666667 0.1550000000 #>  [466] 0.1553333333 0.1556666667 0.1560000000 0.1563333333 0.1566666667 #>  [471] 0.1570000000 0.1573333333 0.1576666667 0.1580000000 0.1583333333 #>  [476] 0.1586666667 0.1590000000 0.1593333333 0.1596666667 0.1600000000 #>  [481] 0.1603333333 0.1606666667 0.1610000000 0.1613333333 0.1616666667 #>  [486] 0.1620000000 0.1623333333 0.1626666667 0.1630000000 0.1633333333 #>  [491] 0.1636666667 0.1640000000 0.1643333333 0.1646666667 0.1650000000 #>  [496] 0.1653333333 0.1656666667 0.1660000000 0.1663333333 0.1666666667 #>  [501] 0.1670000000 0.1673333333 0.1676666667 0.1680000000 0.1683333333 #>  [506] 0.1686666667 0.1690000000 0.1693333333 0.1696666667 0.1700000000 #>  [511] 0.1703333333 0.1706666667 0.1710000000 0.1713333333 0.1716666667 #>  [516] 0.1720000000 0.1723333333 0.1726666667 0.1730000000 0.1733333333 #>  [521] 0.1736666667 0.1740000000 0.1743333333 0.1746666667 0.1750000000 #>  [526] 0.1753333333 0.1756666667 0.1760000000 0.1763333333 0.1766666667 #>  [531] 0.1770000000 0.1773333333 0.1776666667 0.1780000000 0.1783333333 #>  [536] 0.1786666667 0.1790000000 0.1793333333 0.1796666667 0.1800000000 #>  [541] 0.1803333333 0.1806666667 0.1810000000 0.1813333333 0.1816666667 #>  [546] 0.1820000000 0.1823333333 0.1826666667 0.1830000000 0.1833333333 #>  [551] 0.1836666667 0.1840000000 0.1843333333 0.1846666667 0.1850000000 #>  [556] 0.1853333333 0.1856666667 0.1860000000 0.1863333333 0.1866666667 #>  [561] 0.1870000000 0.1873333333 0.1876666667 0.1880000000 0.1883333333 #>  [566] 0.1886666667 0.1890000000 0.1893333333 0.1896666667 0.1900000000 #>  [571] 0.1903333333 0.1906666667 0.1910000000 0.1913333333 0.1916666667 #>  [576] 0.1920000000 0.1923333333 0.1926666667 0.1930000000 0.1933333333 #>  [581] 0.1936666667 0.1940000000 0.1943333333 0.1946666667 0.1950000000 #>  [586] 0.1953333333 0.1956666667 0.1960000000 0.1963333333 0.1966666667 #>  [591] 0.1970000000 0.1973333333 0.1976666667 0.1980000000 0.1983333333 #>  [596] 0.1986666667 0.1990000000 0.1993333333 0.1996666667 0.2000000000 #>  [601] 0.2003333333 0.2006666667 0.2010000000 0.2013333333 0.2016666667 #>  [606] 0.2020000000 0.2023333333 0.2026666667 0.2030000000 0.2033333333 #>  [611] 0.2036666667 0.2040000000 0.2043333333 0.2046666667 0.2050000000 #>  [616] 0.2053333333 0.2056666667 0.2060000000 0.2063333333 0.2066666667 #>  [621] 0.2070000000 0.2073333333 0.2076666667 0.2080000000 0.2083333333 #>  [626] 0.2086666667 0.2090000000 0.2093333333 0.2096666667 0.2100000000 #>  [631] 0.2103333333 0.2106666667 0.2110000000 0.2113333333 0.2116666667 #>  [636] 0.2120000000 0.2123333333 0.2126666667 0.2130000000 0.2133333333 #>  [641] 0.2136666667 0.2140000000 0.2143333333 0.2146666667 0.2150000000 #>  [646] 0.2153333333 0.2156666667 0.2160000000 0.2163333333 0.2166666667 #>  [651] 0.2170000000 0.2173333333 0.2176666667 0.2180000000 0.2183333333 #>  [656] 0.2186666667 0.2190000000 0.2193333333 0.2196666667 0.2200000000 #>  [661] 0.2203333333 0.2206666667 0.2210000000 0.2213333333 0.2216666667 #>  [666] 0.2220000000 0.2223333333 0.2226666667 0.2230000000 0.2233333333 #>  [671] 0.2236666667 0.2240000000 0.2243333333 0.2246666667 0.2250000000 #>  [676] 0.2253333333 0.2256666667 0.2260000000 0.2263333333 0.2266666667 #>  [681] 0.2270000000 0.2273333333 0.2276666667 0.2280000000 0.2283333333 #>  [686] 0.2286666667 0.2290000000 0.2293333333 0.2296666667 0.2300000000 #>  [691] 0.2303333333 0.2306666667 0.2310000000 0.2313333333 0.2316666667 #>  [696] 0.2320000000 0.2323333333 0.2326666667 0.2330000000 0.2333333333 #>  [701] 0.2336666667 0.2340000000 0.2343333333 0.2346666667 0.2350000000 #>  [706] 0.2353333333 0.2356666667 0.2360000000 0.2363333333 0.2366666667 #>  [711] 0.2370000000 0.2373333333 0.2376666667 0.2380000000 0.2383333333 #>  [716] 0.2386666667 0.2390000000 0.2393333333 0.2396666667 0.2400000000 #>  [721] 0.2403333333 0.2406666667 0.2410000000 0.2413333333 0.2416666667 #>  [726] 0.2420000000 0.2423333333 0.2426666667 0.2430000000 0.2433333333 #>  [731] 0.2436666667 0.2440000000 0.2443333333 0.2446666667 0.2450000000 #>  [736] 0.2453333333 0.2456666667 0.2460000000 0.2463333333 0.2466666667 #>  [741] 0.2470000000 0.2473333333 0.2476666667 0.2480000000 0.2483333333 #>  [746] 0.2486666667 0.2490000000 0.2493333333 0.2496666667 0.2500000000 #>  [751] 0.2503333333 0.2506666667 0.2510000000 0.2513333333 0.2516666667 #>  [756] 0.2520000000 0.2523333333 0.2526666667 0.2530000000 0.2533333333 #>  [761] 0.2536666667 0.2540000000 0.2543333333 0.2546666667 0.2550000000 #>  [766] 0.2553333333 0.2556666667 0.2560000000 0.2563333333 0.2566666667 #>  [771] 0.2570000000 0.2573333333 0.2576666667 0.2580000000 0.2583333333 #>  [776] 0.2586666667 0.2590000000 0.2593333333 0.2596666667 0.2600000000 #>  [781] 0.2603333333 0.2606666667 0.2610000000 0.2613333333 0.2616666667 #>  [786] 0.2620000000 0.2623333333 0.2626666667 0.2630000000 0.2633333333 #>  [791] 0.2636666667 0.2640000000 0.2643333333 0.2646666667 0.2650000000 #>  [796] 0.2653333333 0.2656666667 0.2660000000 0.2663333333 0.2666666667 #>  [801] 0.2670000000 0.2673333333 0.2676666667 0.2680000000 0.2683333333 #>  [806] 0.2686666667 0.2690000000 0.2693333333 0.2696666667 0.2700000000 #>  [811] 0.2703333333 0.2706666667 0.2710000000 0.2713333333 0.2716666667 #>  [816] 0.2720000000 0.2723333333 0.2726666667 0.2730000000 0.2733333333 #>  [821] 0.2736666667 0.2740000000 0.2743333333 0.2746666667 0.2750000000 #>  [826] 0.2753333333 0.2756666667 0.2760000000 0.2763333333 0.2766666667 #>  [831] 0.2770000000 0.2773333333 0.2776666667 0.2780000000 0.2783333333 #>  [836] 0.2786666667 0.2790000000 0.2793333333 0.2796666667 0.2800000000 #>  [841] 0.2803333333 0.2806666667 0.2810000000 0.2813333333 0.2816666667 #>  [846] 0.2820000000 0.2823333333 0.2826666667 0.2830000000 0.2833333333 #>  [851] 0.2836666667 0.2840000000 0.2843333333 0.2846666667 0.2850000000 #>  [856] 0.2853333333 0.2856666667 0.2860000000 0.2863333333 0.2866666667 #>  [861] 0.2870000000 0.2873333333 0.2876666667 0.2880000000 0.2883333333 #>  [866] 0.2886666667 0.2890000000 0.2893333333 0.2896666667 0.2900000000 #>  [871] 0.2903333333 0.2906666667 0.2910000000 0.2913333333 0.2916666667 #>  [876] 0.2920000000 0.2923333333 0.2926666667 0.2930000000 0.2933333333 #>  [881] 0.2936666667 0.2940000000 0.2943333333 0.2946666667 0.2950000000 #>  [886] 0.2953333333 0.2956666667 0.2960000000 0.2963333333 0.2966666667 #>  [891] 0.2970000000 0.2973333333 0.2976666667 0.2980000000 0.2983333333 #>  [896] 0.2986666667 0.2990000000 0.2993333333 0.2996666667 0.3000000000 #>  [901] 0.3003333333 0.3006666667 0.3010000000 0.3013333333 0.3016666667 #>  [906] 0.3020000000 0.3023333333 0.3026666667 0.3030000000 0.3033333333 #>  [911] 0.3036666667 0.3040000000 0.3043333333 0.3046666667 0.3050000000 #>  [916] 0.3053333333 0.3056666667 0.3060000000 0.3063333333 0.3066666667 #>  [921] 0.3070000000 0.3073333333 0.3076666667 0.3080000000 0.3083333333 #>  [926] 0.3086666667 0.3090000000 0.3093333333 0.3096666667 0.3100000000 #>  [931] 0.3103333333 0.3106666667 0.3110000000 0.3113333333 0.3116666667 #>  [936] 0.3120000000 0.3123333333 0.3126666667 0.3130000000 0.3133333333 #>  [941] 0.3136666667 0.3140000000 0.3143333333 0.3146666667 0.3150000000 #>  [946] 0.3153333333 0.3156666667 0.3160000000 0.3163333333 0.3166666667 #>  [951] 0.3170000000 0.3173333333 0.3176666667 0.3180000000 0.3183333333 #>  [956] 0.3186666667 0.3190000000 0.3193333333 0.3196666667 0.3200000000 #>  [961] 0.3203333333 0.3206666667 0.3210000000 0.3213333333 0.3216666667 #>  [966] 0.3220000000 0.3223333333 0.3226666667 0.3230000000 0.3233333333 #>  [971] 0.3236666667 0.3240000000 0.3243333333 0.3246666667 0.3250000000 #>  [976] 0.3253333333 0.3256666667 0.3260000000 0.3263333333 0.3266666667 #>  [981] 0.3270000000 0.3273333333 0.3276666667 0.3280000000 0.3283333333 #>  [986] 0.3286666667 0.3290000000 0.3293333333 0.3296666667 0.3300000000 #>  [991] 0.3303333333 0.3306666667 0.3310000000 0.3313333333 0.3316666667 #>  [996] 0.3320000000 0.3323333333 0.3326666667 0.3330000000 0.3333333333 #> [1001] 0.3336666667 0.3340000000 0.3343333333 0.3346666667 0.3350000000 #> [1006] 0.3353333333 0.3356666667 0.3360000000 0.3363333333 0.3366666667 #> [1011] 0.3370000000 0.3373333333 0.3376666667 0.3380000000 0.3383333333 #> [1016] 0.3386666667 0.3390000000 0.3393333333 0.3396666667 0.3400000000 #> [1021] 0.3403333333 0.3406666667 0.3410000000 0.3413333333 0.3416666667 #> [1026] 0.3420000000 0.3423333333 0.3426666667 0.3430000000 0.3433333333 #> [1031] 0.3436666667 0.3440000000 0.3443333333 0.3446666667 0.3450000000 #> [1036] 0.3453333333 0.3456666667 0.3460000000 0.3463333333 0.3466666667 #> [1041] 0.3470000000 0.3473333333 0.3476666667 0.3480000000 0.3483333333 #> [1046] 0.3486666667 0.3490000000 0.3493333333 0.3496666667 0.3500000000 #> [1051] 0.3503333333 0.3506666667 0.3510000000 0.3513333333 0.3516666667 #> [1056] 0.3520000000 0.3523333333 0.3526666667 0.3530000000 0.3533333333 #> [1061] 0.3536666667 0.3540000000 0.3543333333 0.3546666667 0.3550000000 #> [1066] 0.3553333333 0.3556666667 0.3560000000 0.3563333333 0.3566666667 #> [1071] 0.3570000000 0.3573333333 0.3576666667 0.3580000000 0.3583333333 #> [1076] 0.3586666667 0.3590000000 0.3593333333 0.3596666667 0.3600000000 #> [1081] 0.3603333333 0.3606666667 0.3610000000 0.3613333333 0.3616666667 #> [1086] 0.3620000000 0.3623333333 0.3626666667 0.3630000000 0.3633333333 #> [1091] 0.3636666667 0.3640000000 0.3643333333 0.3646666667 0.3650000000 #> [1096] 0.3653333333 0.3656666667 0.3660000000 0.3663333333 0.3666666667 #> [1101] 0.3670000000 0.3673333333 0.3676666667 0.3680000000 0.3683333333 #> [1106] 0.3686666667 0.3690000000 0.3693333333 0.3696666667 0.3700000000 #> [1111] 0.3703333333 0.3706666667 0.3710000000 0.3713333333 0.3716666667 #> [1116] 0.3720000000 0.3723333333 0.3726666667 0.3730000000 0.3733333333 #> [1121] 0.3736666667 0.3740000000 0.3743333333 0.3746666667 0.3750000000 #> [1126] 0.3753333333 0.3756666667 0.3760000000 0.3763333333 0.3766666667 #> [1131] 0.3770000000 0.3773333333 0.3776666667 0.3780000000 0.3783333333 #> [1136] 0.3786666667 0.3790000000 0.3793333333 0.3796666667 0.3800000000 #> [1141] 0.3803333333 0.3806666667 0.3810000000 0.3813333333 0.3816666667 #> [1146] 0.3820000000 0.3823333333 0.3826666667 0.3830000000 0.3833333333 #> [1151] 0.3836666667 0.3840000000 0.3843333333 0.3846666667 0.3850000000 #> [1156] 0.3853333333 0.3856666667 0.3860000000 0.3863333333 0.3866666667 #> [1161] 0.3870000000 0.3873333333 0.3876666667 0.3880000000 0.3883333333 #> [1166] 0.3886666667 0.3890000000 0.3893333333 0.3896666667 0.3900000000 #> [1171] 0.3903333333 0.3906666667 0.3910000000 0.3913333333 0.3916666667 #> [1176] 0.3920000000 0.3923333333 0.3926666667 0.3930000000 0.3933333333 #> [1181] 0.3936666667 0.3940000000 0.3943333333 0.3946666667 0.3950000000 #> [1186] 0.3953333333 0.3956666667 0.3960000000 0.3963333333 0.3966666667 #> [1191] 0.3970000000 0.3973333333 0.3976666667 0.3980000000 0.3983333333 #> [1196] 0.3986666667 0.3990000000 0.3993333333 0.3996666667 0.4000000000 #> [1201] 0.4003333333 0.4006666667 0.4010000000 0.4013333333 0.4016666667 #> [1206] 0.4020000000 0.4023333333 0.4026666667 0.4030000000 0.4033333333 #> [1211] 0.4036666667 0.4040000000 0.4043333333 0.4046666667 0.4050000000 #> [1216] 0.4053333333 0.4056666667 0.4060000000 0.4063333333 0.4066666667 #> [1221] 0.4070000000 0.4073333333 0.4076666667 0.4080000000 0.4083333333 #> [1226] 0.4086666667 0.4090000000 0.4093333333 0.4096666667 0.4100000000 #> [1231] 0.4103333333 0.4106666667 0.4110000000 0.4113333333 0.4116666667 #> [1236] 0.4120000000 0.4123333333 0.4126666667 0.4130000000 0.4133333333 #> [1241] 0.4136666667 0.4140000000 0.4143333333 0.4146666667 0.4150000000 #> [1246] 0.4153333333 0.4156666667 0.4160000000 0.4163333333 0.4166666667 #> [1251] 0.4170000000 0.4173333333 0.4176666667 0.4180000000 0.4183333333 #> [1256] 0.4186666667 0.4190000000 0.4193333333 0.4196666667 0.4200000000 #> [1261] 0.4203333333 0.4206666667 0.4210000000 0.4213333333 0.4216666667 #> [1266] 0.4220000000 0.4223333333 0.4226666667 0.4230000000 0.4233333333 #> [1271] 0.4236666667 0.4240000000 0.4243333333 0.4246666667 0.4250000000 #> [1276] 0.4253333333 0.4256666667 0.4260000000 0.4263333333 0.4266666667 #> [1281] 0.4270000000 0.4273333333 0.4276666667 0.4280000000 0.4283333333 #> [1286] 0.4286666667 0.4290000000 0.4293333333 0.4296666667 0.4300000000 #> [1291] 0.4303333333 0.4306666667 0.4310000000 0.4313333333 0.4316666667 #> [1296] 0.4320000000 0.4323333333 0.4326666667 0.4330000000 0.4333333333 #> [1301] 0.4336666667 0.4340000000 0.4343333333 0.4346666667 0.4350000000 #> [1306] 0.4353333333 0.4356666667 0.4360000000 0.4363333333 0.4366666667 #> [1311] 0.4370000000 0.4373333333 0.4376666667 0.4380000000 0.4383333333 #> [1316] 0.4386666667 0.4390000000 0.4393333333 0.4396666667 0.4400000000 #> [1321] 0.4403333333 0.4406666667 0.4410000000 0.4413333333 0.4416666667 #> [1326] 0.4420000000 0.4423333333 0.4426666667 0.4430000000 0.4433333333 #> [1331] 0.4436666667 0.4440000000 0.4443333333 0.4446666667 0.4450000000 #> [1336] 0.4453333333 0.4456666667 0.4460000000 0.4463333333 0.4466666667 #> [1341] 0.4470000000 0.4473333333 0.4476666667 0.4480000000 0.4483333333 #> [1346] 0.4486666667 0.4490000000 0.4493333333 0.4496666667 0.4500000000 #> [1351] 0.4503333333 0.4506666667 0.4510000000 0.4513333333 0.4516666667 #> [1356] 0.4520000000 0.4523333333 0.4526666667 0.4530000000 0.4533333333 #> [1361] 0.4536666667 0.4540000000 0.4543333333 0.4546666667 0.4550000000 #> [1366] 0.4553333333 0.4556666667 0.4560000000 0.4563333333 0.4566666667 #> [1371] 0.4570000000 0.4573333333 0.4576666667 0.4580000000 0.4583333333 #> [1376] 0.4586666667 0.4590000000 0.4593333333 0.4596666667 0.4600000000 #> [1381] 0.4603333333 0.4606666667 0.4610000000 0.4613333333 0.4616666667 #> [1386] 0.4620000000 0.4623333333 0.4626666667 0.4630000000 0.4633333333 #> [1391] 0.4636666667 0.4640000000 0.4643333333 0.4646666667 0.4650000000 #> [1396] 0.4653333333 0.4656666667 0.4660000000 0.4663333333 0.4666666667 #> [1401] 0.4670000000 0.4673333333 0.4676666667 0.4680000000 0.4683333333 #> [1406] 0.4686666667 0.4690000000 0.4693333333 0.4696666667 0.4700000000 #> [1411] 0.4703333333 0.4706666667 0.4710000000 0.4713333333 0.4716666667 #> [1416] 0.4720000000 0.4723333333 0.4726666667 0.4730000000 0.4733333333 #> [1421] 0.4736666667 0.4740000000 0.4743333333 0.4746666667 0.4750000000 #> [1426] 0.4753333333 0.4756666667 0.4760000000 0.4763333333 0.4766666667 #> [1431] 0.4770000000 0.4773333333 0.4776666667 0.4780000000 0.4783333333 #> [1436] 0.4786666667 0.4790000000 0.4793333333 0.4796666667 0.4800000000 #> [1441] 0.4803333333 0.4806666667 0.4810000000 0.4813333333 0.4816666667 #> [1446] 0.4820000000 0.4823333333 0.4826666667 0.4830000000 0.4833333333 #> [1451] 0.4836666667 0.4840000000 0.4843333333 0.4846666667 0.4850000000 #> [1456] 0.4853333333 0.4856666667 0.4860000000 0.4863333333 0.4866666667 #> [1461] 0.4870000000 0.4873333333 0.4876666667 0.4880000000 0.4883333333 #> [1466] 0.4886666667 0.4890000000 0.4893333333 0.4896666667 0.4900000000 #> [1471] 0.4903333333 0.4906666667 0.4910000000 0.4913333333 0.4916666667 #> [1476] 0.4920000000 0.4923333333 0.4926666667 0.4930000000 0.4933333333 #> [1481] 0.4936666667 0.4940000000 0.4943333333 0.4946666667 0.4950000000 #> [1486] 0.4953333333 0.4956666667 0.4960000000 0.4963333333 0.4966666667 #> [1491] 0.4970000000 0.4973333333 0.4976666667 0.4980000000 0.4983333333 #> [1496] 0.4986666667 0.4990000000 0.4993333333 0.4996666667 0.5000000000 #> [1501] 0.5003333333 0.5006666667 0.5010000000 0.5013333333 0.5016666667 #> [1506] 0.5020000000 0.5023333333 0.5026666667 0.5030000000 0.5033333333 #> [1511] 0.5036666667 0.5040000000 0.5043333333 0.5046666667 0.5050000000 #> [1516] 0.5053333333 0.5056666667 0.5060000000 0.5063333333 0.5066666667 #> [1521] 0.5070000000 0.5073333333 0.5076666667 0.5080000000 0.5083333333 #> [1526] 0.5086666667 0.5090000000 0.5093333333 0.5096666667 0.5100000000 #> [1531] 0.5103333333 0.5106666667 0.5110000000 0.5113333333 0.5116666667 #> [1536] 0.5120000000 0.5123333333 0.5126666667 0.5130000000 0.5133333333 #> [1541] 0.5136666667 0.5140000000 0.5143333333 0.5146666667 0.5150000000 #> [1546] 0.5153333333 0.5156666667 0.5160000000 0.5163333333 0.5166666667 #> [1551] 0.5170000000 0.5173333333 0.5176666667 0.5180000000 0.5183333333 #> [1556] 0.5186666667 0.5190000000 0.5193333333 0.5196666667 0.5200000000 #> [1561] 0.5203333333 0.5206666667 0.5210000000 0.5213333333 0.5216666667 #> [1566] 0.5220000000 0.5223333333 0.5226666667 0.5230000000 0.5233333333 #> [1571] 0.5236666667 0.5240000000 0.5243333333 0.5246666667 0.5250000000 #> [1576] 0.5253333333 0.5256666667 0.5260000000 0.5263333333 0.5266666667 #> [1581] 0.5270000000 0.5273333333 0.5276666667 0.5280000000 0.5283333333 #> [1586] 0.5286666667 0.5290000000 0.5293333333 0.5296666667 0.5300000000 #> [1591] 0.5303333333 0.5306666667 0.5310000000 0.5313333333 0.5316666667 #> [1596] 0.5320000000 0.5323333333 0.5326666667 0.5330000000 0.5333333333 #> [1601] 0.5336666667 0.5340000000 0.5343333333 0.5346666667 0.5350000000 #> [1606] 0.5353333333 0.5356666667 0.5360000000 0.5363333333 0.5366666667 #> [1611] 0.5370000000 0.5373333333 0.5376666667 0.5380000000 0.5383333333 #> [1616] 0.5386666667 0.5390000000 0.5393333333 0.5396666667 0.5400000000 #> [1621] 0.5403333333 0.5406666667 0.5410000000 0.5413333333 0.5416666667 #> [1626] 0.5420000000 0.5423333333 0.5426666667 0.5430000000 0.5433333333 #> [1631] 0.5436666667 0.5440000000 0.5443333333 0.5446666667 0.5450000000 #> [1636] 0.5453333333 0.5456666667 0.5460000000 0.5463333333 0.5466666667 #> [1641] 0.5470000000 0.5473333333 0.5476666667 0.5480000000 0.5483333333 #> [1646] 0.5486666667 0.5490000000 0.5493333333 0.5496666667 0.5500000000 #> [1651] 0.5503333333 0.5506666667 0.5510000000 0.5513333333 0.5516666667 #> [1656] 0.5520000000 0.5523333333 0.5526666667 0.5530000000 0.5533333333 #> [1661] 0.5536666667 0.5540000000 0.5543333333 0.5546666667 0.5550000000 #> [1666] 0.5553333333 0.5556666667 0.5560000000 0.5563333333 0.5566666667 #> [1671] 0.5570000000 0.5573333333 0.5576666667 0.5580000000 0.5583333333 #> [1676] 0.5586666667 0.5590000000 0.5593333333 0.5596666667 0.5600000000 #> [1681] 0.5603333333 0.5606666667 0.5610000000 0.5613333333 0.5616666667 #> [1686] 0.5620000000 0.5623333333 0.5626666667 0.5630000000 0.5633333333 #> [1691] 0.5636666667 0.5640000000 0.5643333333 0.5646666667 0.5650000000 #> [1696] 0.5653333333 0.5656666667 0.5660000000 0.5663333333 0.5666666667 #> [1701] 0.5670000000 0.5673333333 0.5676666667 0.5680000000 0.5683333333 #> [1706] 0.5686666667 0.5690000000 0.5693333333 0.5696666667 0.5700000000 #> [1711] 0.5703333333 0.5706666667 0.5710000000 0.5713333333 0.5716666667 #> [1716] 0.5720000000 0.5723333333 0.5726666667 0.5730000000 0.5733333333 #> [1721] 0.5736666667 0.5740000000 0.5743333333 0.5746666667 0.5750000000 #> [1726] 0.5753333333 0.5756666667 0.5760000000 0.5763333333 0.5766666667 #> [1731] 0.5770000000 0.5773333333 0.5776666667 0.5780000000 0.5783333333 #> [1736] 0.5786666667 0.5790000000 0.5793333333 0.5796666667 0.5800000000 #> [1741] 0.5803333333 0.5806666667 0.5810000000 0.5813333333 0.5816666667 #> [1746] 0.5820000000 0.5823333333 0.5826666667 0.5830000000 0.5833333333 #> [1751] 0.5836666667 0.5840000000 0.5843333333 0.5846666667 0.5850000000 #> [1756] 0.5853333333 0.5856666667 0.5860000000 0.5863333333 0.5866666667 #> [1761] 0.5870000000 0.5873333333 0.5876666667 0.5880000000 0.5883333333 #> [1766] 0.5886666667 0.5890000000 0.5893333333 0.5896666667 0.5900000000 #> [1771] 0.5903333333 0.5906666667 0.5910000000 0.5913333333 0.5916666667 #> [1776] 0.5920000000 0.5923333333 0.5926666667 0.5930000000 0.5933333333 #> [1781] 0.5936666667 0.5940000000 0.5943333333 0.5946666667 0.5950000000 #> [1786] 0.5953333333 0.5956666667 0.5960000000 0.5963333333 0.5966666667 #> [1791] 0.5970000000 0.5973333333 0.5976666667 0.5980000000 0.5983333333 #> [1796] 0.5986666667 0.5990000000 0.5993333333 0.5996666667 0.6000000000 #> [1801] 0.6003333333 0.6006666667 0.6010000000 0.6013333333 0.6016666667 #> [1806] 0.6020000000 0.6023333333 0.6026666667 0.6030000000 0.6033333333 #> [1811] 0.6036666667 0.6040000000 0.6043333333 0.6046666667 0.6050000000 #> [1816] 0.6053333333 0.6056666667 0.6060000000 0.6063333333 0.6066666667 #> [1821] 0.6070000000 0.6073333333 0.6076666667 0.6080000000 0.6083333333 #> [1826] 0.6086666667 0.6090000000 0.6093333333 0.6096666667 0.6100000000 #> [1831] 0.6103333333 0.6106666667 0.6110000000 0.6113333333 0.6116666667 #> [1836] 0.6120000000 0.6123333333 0.6126666667 0.6130000000 0.6133333333 #> [1841] 0.6136666667 0.6140000000 0.6143333333 0.6146666667 0.6150000000 #> [1846] 0.6153333333 0.6156666667 0.6160000000 0.6163333333 0.6166666667 #> [1851] 0.6170000000 0.6173333333 0.6176666667 0.6180000000 0.6183333333 #> [1856] 0.6186666667 0.6190000000 0.6193333333 0.6196666667 0.6200000000 #> [1861] 0.6203333333 0.6206666667 0.6210000000 0.6213333333 0.6216666667 #> [1866] 0.6220000000 0.6223333333 0.6226666667 0.6230000000 0.6233333333 #> [1871] 0.6236666667 0.6240000000 0.6243333333 0.6246666667 0.6250000000 #> [1876] 0.6253333333 0.6256666667 0.6260000000 0.6263333333 0.6266666667 #> [1881] 0.6270000000 0.6273333333 0.6276666667 0.6280000000 0.6283333333 #> [1886] 0.6286666667 0.6290000000 0.6293333333 0.6296666667 0.6300000000 #> [1891] 0.6303333333 0.6306666667 0.6310000000 0.6313333333 0.6316666667 #> [1896] 0.6320000000 0.6323333333 0.6326666667 0.6330000000 0.6333333333 #> [1901] 0.6336666667 0.6340000000 0.6343333333 0.6346666667 0.6350000000 #> [1906] 0.6353333333 0.6356666667 0.6360000000 0.6363333333 0.6366666667 #> [1911] 0.6370000000 0.6373333333 0.6376666667 0.6380000000 0.6383333333 #> [1916] 0.6386666667 0.6390000000 0.6393333333 0.6396666667 0.6400000000 #> [1921] 0.6403333333 0.6406666667 0.6410000000 0.6413333333 0.6416666667 #> [1926] 0.6420000000 0.6423333333 0.6426666667 0.6430000000 0.6433333333 #> [1931] 0.6436666667 0.6440000000 0.6443333333 0.6446666667 0.6450000000 #> [1936] 0.6453333333 0.6456666667 0.6460000000 0.6463333333 0.6466666667 #> [1941] 0.6470000000 0.6473333333 0.6476666667 0.6480000000 0.6483333333 #> [1946] 0.6486666667 0.6490000000 0.6493333333 0.6496666667 0.6500000000 #> [1951] 0.6503333333 0.6506666667 0.6510000000 0.6513333333 0.6516666667 #> [1956] 0.6520000000 0.6523333333 0.6526666667 0.6530000000 0.6533333333 #> [1961] 0.6536666667 0.6540000000 0.6543333333 0.6546666667 0.6550000000 #> [1966] 0.6553333333 0.6556666667 0.6560000000 0.6563333333 0.6566666667 #> [1971] 0.6570000000 0.6573333333 0.6576666667 0.6580000000 0.6583333333 #> [1976] 0.6586666667 0.6590000000 0.6593333333 0.6596666667 0.6600000000 #> [1981] 0.6603333333 0.6606666667 0.6610000000 0.6613333333 0.6616666667 #> [1986] 0.6620000000 0.6623333333 0.6626666667 0.6630000000 0.6633333333 #> [1991] 0.6636666667 0.6640000000 0.6643333333 0.6646666667 0.6650000000 #> [1996] 0.6653333333 0.6656666667 0.6660000000 0.6663333333 0.6666666667 #> [2001] 0.6670000000 0.6673333333 0.6676666667 0.6680000000 0.6683333333 #> [2006] 0.6686666667 0.6690000000 0.6693333333 0.6696666667 0.6700000000 #> [2011] 0.6703333333 0.6706666667 0.6710000000 0.6713333333 0.6716666667 #> [2016] 0.6720000000 0.6723333333 0.6726666667 0.6730000000 0.6733333333 #> [2021] 0.6736666667 0.6740000000 0.6743333333 0.6746666667 0.6750000000 #> [2026] 0.6753333333 0.6756666667 0.6760000000 0.6763333333 0.6766666667 #> [2031] 0.6770000000 0.6773333333 0.6776666667 0.6780000000 0.6783333333 #> [2036] 0.6786666667 0.6790000000 0.6793333333 0.6796666667 0.6800000000 #> [2041] 0.6803333333 0.6806666667 0.6810000000 0.6813333333 0.6816666667 #> [2046] 0.6820000000 0.6823333333 0.6826666667 0.6830000000 0.6833333333 #> [2051] 0.6836666667 0.6840000000 0.6843333333 0.6846666667 0.6850000000 #> [2056] 0.6853333333 0.6856666667 0.6860000000 0.6863333333 0.6866666667 #> [2061] 0.6870000000 0.6873333333 0.6876666667 0.6880000000 0.6883333333 #> [2066] 0.6886666667 0.6890000000 0.6893333333 0.6896666667 0.6900000000 #> [2071] 0.6903333333 0.6906666667 0.6910000000 0.6913333333 0.6916666667 #> [2076] 0.6920000000 0.6923333333 0.6926666667 0.6930000000 0.6933333333 #> [2081] 0.6936666667 0.6940000000 0.6943333333 0.6946666667 0.6950000000 #> [2086] 0.6953333333 0.6956666667 0.6960000000 0.6963333333 0.6966666667 #> [2091] 0.6970000000 0.6973333333 0.6976666667 0.6980000000 0.6983333333 #> [2096] 0.6986666667 0.6990000000 0.6993333333 0.6996666667 0.7000000000 #> [2101] 0.7003333333 0.7006666667 0.7010000000 0.7013333333 0.7016666667 #> [2106] 0.7020000000 0.7023333333 0.7026666667 0.7030000000 0.7033333333 #> [2111] 0.7036666667 0.7040000000 0.7043333333 0.7046666667 0.7050000000 #> [2116] 0.7053333333 0.7056666667 0.7060000000 0.7063333333 0.7066666667 #> [2121] 0.7070000000 0.7073333333 0.7076666667 0.7080000000 0.7083333333 #> [2126] 0.7086666667 0.7090000000 0.7093333333 0.7096666667 0.7100000000 #> [2131] 0.7103333333 0.7106666667 0.7110000000 0.7113333333 0.7116666667 #> [2136] 0.7120000000 0.7123333333 0.7126666667 0.7130000000 0.7133333333 #> [2141] 0.7136666667 0.7140000000 0.7143333333 0.7146666667 0.7150000000 #> [2146] 0.7153333333 0.7156666667 0.7160000000 0.7163333333 0.7166666667 #> [2151] 0.7170000000 0.7173333333 0.7176666667 0.7180000000 0.7183333333 #> [2156] 0.7186666667 0.7190000000 0.7193333333 0.7196666667 0.7200000000 #> [2161] 0.7203333333 0.7206666667 0.7210000000 0.7213333333 0.7216666667 #> [2166] 0.7220000000 0.7223333333 0.7226666667 0.7230000000 0.7233333333 #> [2171] 0.7236666667 0.7240000000 0.7243333333 0.7246666667 0.7250000000 #> [2176] 0.7253333333 0.7256666667 0.7260000000 0.7263333333 0.7266666667 #> [2181] 0.7270000000 0.7273333333 0.7276666667 0.7280000000 0.7283333333 #> [2186] 0.7286666667 0.7290000000 0.7293333333 0.7296666667 0.7300000000 #> [2191] 0.7303333333 0.7306666667 0.7310000000 0.7313333333 0.7316666667 #> [2196] 0.7320000000 0.7323333333 0.7326666667 0.7330000000 0.7333333333 #> [2201] 0.7336666667 0.7340000000 0.7343333333 0.7346666667 0.7350000000 #> [2206] 0.7353333333 0.7356666667 0.7360000000 0.7363333333 0.7366666667 #> [2211] 0.7370000000 0.7373333333 0.7376666667 0.7380000000 0.7383333333 #> [2216] 0.7386666667 0.7390000000 0.7393333333 0.7396666667 0.7400000000 #> [2221] 0.7403333333 0.7406666667 0.7410000000 0.7413333333 0.7416666667 #> [2226] 0.7420000000 0.7423333333 0.7426666667 0.7430000000 0.7433333333 #> [2231] 0.7436666667 0.7440000000 0.7443333333 0.7446666667 0.7450000000 #> [2236] 0.7453333333 0.7456666667 0.7460000000 0.7463333333 0.7466666667 #> [2241] 0.7470000000 0.7473333333 0.7476666667 0.7480000000 0.7483333333 #> [2246] 0.7486666667 0.7490000000 0.7493333333 0.7496666667 0.7500000000 #> [2251] 0.7503333333 0.7506666667 0.7510000000 0.7513333333 0.7516666667 #> [2256] 0.7520000000 0.7523333333 0.7526666667 0.7530000000 0.7533333333 #> [2261] 0.7536666667 0.7540000000 0.7543333333 0.7546666667 0.7550000000 #> [2266] 0.7553333333 0.7556666667 0.7560000000 0.7563333333 0.7566666667 #> [2271] 0.7570000000 0.7573333333 0.7576666667 0.7580000000 0.7583333333 #> [2276] 0.7586666667 0.7590000000 0.7593333333 0.7596666667 0.7600000000 #> [2281] 0.7603333333 0.7606666667 0.7610000000 0.7613333333 0.7616666667 #> [2286] 0.7620000000 0.7623333333 0.7626666667 0.7630000000 0.7633333333 #> [2291] 0.7636666667 0.7640000000 0.7643333333 0.7646666667 0.7650000000 #> [2296] 0.7653333333 0.7656666667 0.7660000000 0.7663333333 0.7666666667 #> [2301] 0.7670000000 0.7673333333 0.7676666667 0.7680000000 0.7683333333 #> [2306] 0.7686666667 0.7690000000 0.7693333333 0.7696666667 0.7700000000 #> [2311] 0.7703333333 0.7706666667 0.7710000000 0.7713333333 0.7716666667 #> [2316] 0.7720000000 0.7723333333 0.7726666667 0.7730000000 0.7733333333 #> [2321] 0.7736666667 0.7740000000 0.7743333333 0.7746666667 0.7750000000 #> [2326] 0.7753333333 0.7756666667 0.7760000000 0.7763333333 0.7766666667 #> [2331] 0.7770000000 0.7773333333 0.7776666667 0.7780000000 0.7783333333 #> [2336] 0.7786666667 0.7790000000 0.7793333333 0.7796666667 0.7800000000 #> [2341] 0.7803333333 0.7806666667 0.7810000000 0.7813333333 0.7816666667 #> [2346] 0.7820000000 0.7823333333 0.7826666667 0.7830000000 0.7833333333 #> [2351] 0.7836666667 0.7840000000 0.7843333333 0.7846666667 0.7850000000 #> [2356] 0.7853333333 0.7856666667 0.7860000000 0.7863333333 0.7866666667 #> [2361] 0.7870000000 0.7873333333 0.7876666667 0.7880000000 0.7883333333 #> [2366] 0.7886666667 0.7890000000 0.7893333333 0.7896666667 0.7900000000 #> [2371] 0.7903333333 0.7906666667 0.7910000000 0.7913333333 0.7916666667 #> [2376] 0.7920000000 0.7923333333 0.7926666667 0.7930000000 0.7933333333 #> [2381] 0.7936666667 0.7940000000 0.7943333333 0.7946666667 0.7950000000 #> [2386] 0.7953333333 0.7956666667 0.7960000000 0.7963333333 0.7966666667 #> [2391] 0.7970000000 0.7973333333 0.7976666667 0.7980000000 0.7983333333 #> [2396] 0.7986666667 0.7990000000 0.7993333333 0.7996666667 0.8000000000 #> [2401] 0.8003333333 0.8006666667 0.8010000000 0.8013333333 0.8016666667 #> [2406] 0.8020000000 0.8023333333 0.8026666667 0.8030000000 0.8033333333 #> [2411] 0.8036666667 0.8040000000 0.8043333333 0.8046666667 0.8050000000 #> [2416] 0.8053333333 0.8056666667 0.8060000000 0.8063333333 0.8066666667 #> [2421] 0.8070000000 0.8073333333 0.8076666667 0.8080000000 0.8083333333 #> [2426] 0.8086666667 0.8090000000 0.8093333333 0.8096666667 0.8100000000 #> [2431] 0.8103333333 0.8106666667 0.8110000000 0.8113333333 0.8116666667 #> [2436] 0.8120000000 0.8123333333 0.8126666667 0.8130000000 0.8133333333 #> [2441] 0.8136666667 0.8140000000 0.8143333333 0.8146666667 0.8150000000 #> [2446] 0.8153333333 0.8156666667 0.8160000000 0.8163333333 0.8166666667 #> [2451] 0.8170000000 0.8173333333 0.8176666667 0.8180000000 0.8183333333 #> [2456] 0.8186666667 0.8190000000 0.8193333333 0.8196666667 0.8200000000 #> [2461] 0.8203333333 0.8206666667 0.8210000000 0.8213333333 0.8216666667 #> [2466] 0.8220000000 0.8223333333 0.8226666667 0.8230000000 0.8233333333 #> [2471] 0.8236666667 0.8240000000 0.8243333333 0.8246666667 0.8250000000 #> [2476] 0.8253333333 0.8256666667 0.8260000000 0.8263333333 0.8266666667 #> [2481] 0.8270000000 0.8273333333 0.8276666667 0.8280000000 0.8283333333 #> [2486] 0.8286666667 0.8290000000 0.8293333333 0.8296666667 0.8300000000 #> [2491] 0.8303333333 0.8306666667 0.8310000000 0.8313333333 0.8316666667 #> [2496] 0.8320000000 0.8323333333 0.8326666667 0.8330000000 0.8333333333 #> [2501] 0.8336666667 0.8340000000 0.8343333333 0.8346666667 0.8350000000 #> [2506] 0.8353333333 0.8356666667 0.8360000000 0.8363333333 0.8366666667 #> [2511] 0.8370000000 0.8373333333 0.8376666667 0.8380000000 0.8383333333 #> [2516] 0.8386666667 0.8390000000 0.8393333333 0.8396666667 0.8400000000 #> [2521] 0.8403333333 0.8406666667 0.8410000000 0.8413333333 0.8416666667 #> [2526] 0.8420000000 0.8423333333 0.8426666667 0.8430000000 0.8433333333 #> [2531] 0.8436666667 0.8440000000 0.8443333333 0.8446666667 0.8450000000 #> [2536] 0.8453333333 0.8456666667 0.8460000000 0.8463333333 0.8466666667 #> [2541] 0.8470000000 0.8473333333 0.8476666667 0.8480000000 0.8483333333 #> [2546] 0.8486666667 0.8490000000 0.8493333333 0.8496666667 0.8500000000 #> [2551] 0.8503333333 0.8506666667 0.8510000000 0.8513333333 0.8516666667 #> [2556] 0.8520000000 0.8523333333 0.8526666667 0.8530000000 0.8533333333 #> [2561] 0.8536666667 0.8540000000 0.8543333333 0.8546666667 0.8550000000 #> [2566] 0.8553333333 0.8556666667 0.8560000000 0.8563333333 0.8566666667 #> [2571] 0.8570000000 0.8573333333 0.8576666667 0.8580000000 0.8583333333 #> [2576] 0.8586666667 0.8590000000 0.8593333333 0.8596666667 0.8600000000 #> [2581] 0.8603333333 0.8606666667 0.8610000000 0.8613333333 0.8616666667 #> [2586] 0.8620000000 0.8623333333 0.8626666667 0.8630000000 0.8633333333 #> [2591] 0.8636666667 0.8640000000 0.8643333333 0.8646666667 0.8650000000 #> [2596] 0.8653333333 0.8656666667 0.8660000000 0.8663333333 0.8666666667 #> [2601] 0.8670000000 0.8673333333 0.8676666667 0.8680000000 0.8683333333 #> [2606] 0.8686666667 0.8690000000 0.8693333333 0.8696666667 0.8700000000 #> [2611] 0.8703333333 0.8706666667 0.8710000000 0.8713333333 0.8716666667 #> [2616] 0.8720000000 0.8723333333 0.8726666667 0.8730000000 0.8733333333 #> [2621] 0.8736666667 0.8740000000 0.8743333333 0.8746666667 0.8750000000 #> [2626] 0.8753333333 0.8756666667 0.8760000000 0.8763333333 0.8766666667 #> [2631] 0.8770000000 0.8773333333 0.8776666667 0.8780000000 0.8783333333 #> [2636] 0.8786666667 0.8790000000 0.8793333333 0.8796666667 0.8800000000 #> [2641] 0.8803333333 0.8806666667 0.8810000000 0.8813333333 0.8816666667 #> [2646] 0.8820000000 0.8823333333 0.8826666667 0.8830000000 0.8833333333 #> [2651] 0.8836666667 0.8840000000 0.8843333333 0.8846666667 0.8850000000 #> [2656] 0.8853333333 0.8856666667 0.8860000000 0.8863333333 0.8866666667 #> [2661] 0.8870000000 0.8873333333 0.8876666667 0.8880000000 0.8883333333 #> [2666] 0.8886666667 0.8890000000 0.8893333333 0.8896666667 0.8900000000 #> [2671] 0.8903333333 0.8906666667 0.8910000000 0.8913333333 0.8916666667 #> [2676] 0.8920000000 0.8923333333 0.8926666667 0.8930000000 0.8933333333 #> [2681] 0.8936666667 0.8940000000 0.8943333333 0.8946666667 0.8950000000 #> [2686] 0.8953333333 0.8956666667 0.8960000000 0.8963333333 0.8966666667 #> [2691] 0.8970000000 0.8973333333 0.8976666667 0.8980000000 0.8983333333 #> [2696] 0.8986666667 0.8990000000 0.8993333333 0.8996666667 0.9000000000 #> [2701] 0.9003333333 0.9006666667 0.9010000000 0.9013333333 0.9016666667 #> [2706] 0.9020000000 0.9023333333 0.9026666667 0.9030000000 0.9033333333 #> [2711] 0.9036666667 0.9040000000 0.9043333333 0.9046666667 0.9050000000 #> [2716] 0.9053333333 0.9056666667 0.9060000000 0.9063333333 0.9066666667 #> [2721] 0.9070000000 0.9073333333 0.9076666667 0.9080000000 0.9083333333 #> [2726] 0.9086666667 0.9090000000 0.9093333333 0.9096666667 0.9100000000 #> [2731] 0.9103333333 0.9106666667 0.9110000000 0.9113333333 0.9116666667 #> [2736] 0.9120000000 0.9123333333 0.9126666667 0.9130000000 0.9133333333 #> [2741] 0.9136666667 0.9140000000 0.9143333333 0.9146666667 0.9150000000 #> [2746] 0.9153333333 0.9156666667 0.9160000000 0.9163333333 0.9166666667 #> [2751] 0.9170000000 0.9173333333 0.9176666667 0.9180000000 0.9183333333 #> [2756] 0.9186666667 0.9190000000 0.9193333333 0.9196666667 0.9200000000 #> [2761] 0.9203333333 0.9206666667 0.9210000000 0.9213333333 0.9216666667 #> [2766] 0.9220000000 0.9223333333 0.9226666667 0.9230000000 0.9233333333 #> [2771] 0.9236666667 0.9240000000 0.9243333333 0.9246666667 0.9250000000 #> [2776] 0.9253333333 0.9256666667 0.9260000000 0.9263333333 0.9266666667 #> [2781] 0.9270000000 0.9273333333 0.9276666667 0.9280000000 0.9283333333 #> [2786] 0.9286666667 0.9290000000 0.9293333333 0.9296666667 0.9300000000 #> [2791] 0.9303333333 0.9306666667 0.9310000000 0.9313333333 0.9316666667 #> [2796] 0.9320000000 0.9323333333 0.9326666667 0.9330000000 0.9333333333 #> [2801] 0.9336666667 0.9340000000 0.9343333333 0.9346666667 0.9350000000 #> [2806] 0.9353333333 0.9356666667 0.9360000000 0.9363333333 0.9366666667 #> [2811] 0.9370000000 0.9373333333 0.9376666667 0.9380000000 0.9383333333 #> [2816] 0.9386666667 0.9390000000 0.9393333333 0.9396666667 0.9400000000 #> [2821] 0.9403333333 0.9406666667 0.9410000000 0.9413333333 0.9416666667 #> [2826] 0.9420000000 0.9423333333 0.9426666667 0.9430000000 0.9433333333 #> [2831] 0.9436666667 0.9440000000 0.9443333333 0.9446666667 0.9450000000 #> [2836] 0.9453333333 0.9456666667 0.9460000000 0.9463333333 0.9466666667 #> [2841] 0.9470000000 0.9473333333 0.9476666667 0.9480000000 0.9483333333 #> [2846] 0.9486666667 0.9490000000 0.9493333333 0.9496666667 0.9500000000 #> [2851] 0.9503333333 0.9506666667 0.9510000000 0.9513333333 0.9516666667 #> [2856] 0.9520000000 0.9523333333 0.9526666667 0.9530000000 0.9533333333 #> [2861] 0.9536666667 0.9540000000 0.9543333333 0.9546666667 0.9550000000 #> [2866] 0.9553333333 0.9556666667 0.9560000000 0.9563333333 0.9566666667 #> [2871] 0.9570000000 0.9573333333 0.9576666667 0.9580000000 0.9583333333 #> [2876] 0.9586666667 0.9590000000 0.9593333333 0.9596666667 0.9600000000 #> [2881] 0.9603333333 0.9606666667 0.9610000000 0.9613333333 0.9616666667 #> [2886] 0.9620000000 0.9623333333 0.9626666667 0.9630000000 0.9633333333 #> [2891] 0.9636666667 0.9640000000 0.9643333333 0.9646666667 0.9650000000 #> [2896] 0.9653333333 0.9656666667 0.9660000000 0.9663333333 0.9666666667 #> [2901] 0.9670000000 0.9673333333 0.9676666667 0.9680000000 0.9683333333 #> [2906] 0.9686666667 0.9690000000 0.9693333333 0.9696666667 0.9700000000 #> [2911] 0.9703333333 0.9706666667 0.9710000000 0.9713333333 0.9716666667 #> [2916] 0.9720000000 0.9723333333 0.9726666667 0.9730000000 0.9733333333 #> [2921] 0.9736666667 0.9740000000 0.9743333333 0.9746666667 0.9750000000 #> [2926] 0.9753333333 0.9756666667 0.9760000000 0.9763333333 0.9766666667 #> [2931] 0.9770000000 0.9773333333 0.9776666667 0.9780000000 0.9783333333 #> [2936] 0.9786666667 0.9790000000 0.9793333333 0.9796666667 0.9800000000 #> [2941] 0.9803333333 0.9806666667 0.9810000000 0.9813333333 0.9816666667 #> [2946] 0.9820000000 0.9823333333 0.9826666667 0.9830000000 0.9833333333 #> [2951] 0.9836666667 0.9840000000 0.9843333333 0.9846666667 0.9850000000 #> [2956] 0.9853333333 0.9856666667 0.9860000000 0.9863333333 0.9866666667 #> [2961] 0.9870000000 0.9873333333 0.9876666667 0.9880000000 0.9883333333 #> [2966] 0.9886666667 0.9890000000 0.9893333333 0.9896666667 0.9900000000 #> [2971] 0.9903333333 0.9906666667 0.9910000000 0.9913333333 0.9916666667 #> [2976] 0.9920000000 0.9923333333 0.9926666667 0.9930000000 0.9933333333 #> [2981] 0.9936666667 0.9940000000 0.9943333333 0.9946666667 0.9950000000 #> [2986] 0.9953333333 0.9956666667 0.9960000000 0.9963333333 0.9966666667 #> [2991] 0.9970000000 0.9973333333 0.9976666667 0.9980000000 0.9983333333 #> [2996] 0.9986666667 0.9990000000 0.9993333333 0.9996666667 1.0000000000 #>  #> $F.n.x #>    [1] 0.0004676887 0.0013067401 0.0016553234 0.0023230373 0.0035622760 #>    [6] 0.0046215482 0.0049187329 0.0058726792 0.0067328018 0.0079282007 #>   [11] 0.0081209714 0.0085169475 0.0088202477 0.0091160286 0.0091967812 #>   [16] 0.0095884332 0.0098499824 0.0133491807 0.0146923948 0.0152755166 #>   [21] 0.0168146797 0.0174933859 0.0175145475 0.0188124069 0.0196068493 #>   [26] 0.0199616607 0.0203134754 0.0227609067 0.0242277034 0.0247018127 #>   [31] 0.0259561984 0.0259566083 0.0264043452 0.0274009979 0.0277432978 #>   [36] 0.0293984713 0.0296927002 0.0334994359 0.0335286782 0.0347233566 #>   [41] 0.0357515326 0.0362880799 0.0363756375 0.0366805865 0.0368004867 #>   [46] 0.0373685929 0.0387916147 0.0407371470 0.0407806278 0.0418254910 #>   [51] 0.0420246466 0.0443574246 0.0455933662 0.0472935213 0.0475666109 #>   [56] 0.0483201821 0.0500925627 0.0501622227 0.0502896971 0.0503636540 #>   [61] 0.0507306014 0.0507884621 0.0515656107 0.0516546390 0.0518255683 #>   [66] 0.0524229797 0.0527732102 0.0541481700 0.0563350110 0.0571681205 #>   [71] 0.0572110179 0.0574023181 0.0581875438 0.0585363185 0.0587941470 #>   [76] 0.0602891843 0.0605973065 0.0620315862 0.0627348368 0.0636186298 #>   [81] 0.0639959917 0.0643257194 0.0649891037 0.0651171863 0.0682002770 #>   [86] 0.0682898927 0.0689188422 0.0691701256 0.0701878738 0.0707382092 #>   [91] 0.0712222439 0.0716448306 0.0721779932 0.0729724348 0.0743760178 #>   [96] 0.0760553602 0.0763481894 0.0765110603 0.0779177675 0.0783104200 #>  [101] 0.0796055865 0.0815435467 0.0824039664 0.0827291431 0.0835195714 #>  [106] 0.0837081542 0.0839606727 0.0852186895 0.0864078305 0.0875772742 #>  [111] 0.0881851300 0.0882040361 0.0893968198 0.0900826868 0.0910402377 #>  [116] 0.0938530866 0.0943962910 0.0950293109 0.0954119809 0.0956044316 #>  [121] 0.0965531650 0.0977934138 0.0980403663 0.0982729041 0.0983262244 #>  [126] 0.1003258116 0.1041921322 0.1048433206 0.1050707257 0.1061339656 #>  [131] 0.1091349259 0.1099095828 0.1100849249 0.1108190999 0.1110627283 #>  [136] 0.1131449658 0.1156929388 0.1165235032 0.1165848149 0.1177098961 #>  [141] 0.1208829764 0.1228656409 0.1236090967 0.1236240073 0.1245185681 #>  [146] 0.1249582949 0.1255661117 0.1256702210 0.1260883871 0.1276812938 #>  [151] 0.1278767603 0.1291089428 0.1292440665 0.1292888942 0.1296001510 #>  [156] 0.1296121665 0.1304646461 0.1310358461 0.1319860521 0.1324288746 #>  [161] 0.1325016947 0.1350543100 0.1354178713 0.1355260946 0.1357476372 #>  [166] 0.1360487564 0.1368733052 0.1372364815 0.1379621524 0.1383977373 #>  [171] 0.1385963677 0.1405182871 0.1405791995 0.1413928330 0.1423426005 #>  [176] 0.1447924999 0.1456415820 0.1470464872 0.1474058078 0.1491913577 #>  [181] 0.1505671484 0.1521850732 0.1529914900 0.1532352734 0.1533556459 #>  [186] 0.1534999685 0.1542055481 0.1554300908 0.1563758063 0.1607069600 #>  [191] 0.1609733654 0.1613421579 0.1619531750 0.1627606177 0.1652395208 #>  [196] 0.1658205415 0.1661351986 0.1666186420 0.1670618546 0.1671479404 #>  [201] 0.1683242466 0.1683607927 0.1701724122 0.1704557272 0.1711095644 #>  [206] 0.1714406674 0.1723351165 0.1726609425 0.1732763847 0.1736500722 #>  [211] 0.1756763627 0.1761891672 0.1763208387 0.1769992468 0.1781781838 #>  [216] 0.1782243095 0.1793923451 0.1795154487 0.1795364177 0.1801604068 #>  [221] 0.1809160000 0.1811569925 0.1822181454 0.1823616862 0.1828105213 #>  [226] 0.1835680290 0.1848728423 0.1872417726 0.1895431576 0.1897282147 #>  [231] 0.1909630684 0.1919283668 0.1923762936 0.1942895696 0.1955556886 #>  [236] 0.1958951871 0.1968059437 0.1969764852 0.1990572861 0.1997999208 #>  [241] 0.2002851758 0.2007222940 0.2012371178 0.2018285043 0.2050273997 #>  [246] 0.2055925978 0.2069305963 0.2071958687 0.2079028812 0.2082965567 #>  [251] 0.2084328522 0.2093746522 0.2095611184 0.2098858149 0.2100572069 #>  [256] 0.2117016155 0.2117583258 0.2125758764 0.2127132709 0.2153390214 #>  [261] 0.2155540346 0.2172230901 0.2199314812 0.2200863495 0.2203759466 #>  [266] 0.2205833653 0.2208485736 0.2209060754 0.2227031997 0.2227918399 #>  [271] 0.2229233089 0.2244885091 0.2247678852 0.2259753360 0.2271139427 #>  [276] 0.2272084740 0.2280070689 0.2283615627 0.2304646619 0.2309244677 #>  [281] 0.2318558431 0.2319954568 0.2338980853 0.2340501740 0.2347255300 #>  [286] 0.2363234898 0.2369775322 0.2371371985 0.2378254182 0.2380073422 #>  [291] 0.2382920959 0.2387319155 0.2389503514 0.2389522699 0.2416058484 #>  [296] 0.2417470788 0.2424187293 0.2435896910 0.2447523577 0.2452765919 #>  [301] 0.2456608052 0.2463018076 0.2464736897 0.2476363412 0.2486277434 #>  [306] 0.2487220557 0.2491873983 0.2506338644 0.2508818932 0.2513587581 #>  [311] 0.2515415562 0.2515806178 0.2516309096 0.2534674166 0.2536778851 #>  [316] 0.2556982490 0.2557296646 0.2560180809 0.2579371434 0.2597281147 #>  [321] 0.2599938883 0.2600882469 0.2619400309 0.2623846843 0.2644558377 #>  [326] 0.2657618903 0.2664612367 0.2666939467 0.2692032152 0.2709141040 #>  [331] 0.2715518446 0.2725001692 0.2727949973 0.2728407011 0.2744096106 #>  [336] 0.2748166347 0.2755001327 0.2758793033 0.2764572914 0.2770424256 #>  [341] 0.2780842478 0.2782358243 0.2795827402 0.2798180393 0.2805125650 #>  [346] 0.2819238240 0.2826308487 0.2828303404 0.2834534444 0.2836973312 #>  [351] 0.2862992029 0.2874424006 0.2884268997 0.2890284482 0.2897763682 #>  [356] 0.2902661793 0.2914672867 0.2917100914 0.2922226512 0.2929596142 #>  [361] 0.2929854565 0.2944225162 0.2944458286 0.2948475938 0.2951770414 #>  [366] 0.2971473371 0.2971544181 0.2995237587 0.3013484898 0.3016117022 #>  [371] 0.3017791988 0.3029312944 0.3036354145 0.3036919267 0.3038313310 #>  [376] 0.3040221164 0.3049294449 0.3059871154 0.3062487853 0.3065220870 #>  [381] 0.3067617549 0.3076894633 0.3080769801 0.3081192312 0.3105167208 #>  [386] 0.3130173289 0.3140529943 0.3160796597 0.3160906134 0.3194432134 #>  [391] 0.3199888222 0.3201998826 0.3219171923 0.3228277600 0.3236953911 #>  [396] 0.3242938606 0.3246090144 0.3259788037 0.3260766670 0.3264325184 #>  [401] 0.3267232155 0.3279024198 0.3284019392 0.3286010429 0.3293890059 #>  [406] 0.3302850825 0.3305917497 0.3313228892 0.3317979893 0.3322168627 #>  [411] 0.3329644801 0.3347646866 0.3348120404 0.3349921017 0.3359949928 #>  [416] 0.3364350571 0.3370084623 0.3392229122 0.3401017415 0.3403359632 #>  [421] 0.3404714288 0.3423576899 0.3436262959 0.3437909012 0.3446253453 #>  [426] 0.3452233962 0.3452539031 0.3453692385 0.3456153644 0.3476806177 #>  [431] 0.3490465434 0.3492352204 0.3517122780 0.3517225436 0.3522065605 #>  [436] 0.3523125083 0.3529303225 0.3535347423 0.3544862200 0.3545847815 #>  [441] 0.3547990388 0.3577169946 0.3594109886 0.3600736871 0.3604024747 #>  [446] 0.3608461193 0.3611675561 0.3614072117 0.3616739805 0.3621390015 #>  [451] 0.3626251502 0.3641486373 0.3642551449 0.3644914275 0.3648325309 #>  [456] 0.3665648291 0.3672167014 0.3677540960 0.3684031526 0.3692081996 #>  [461] 0.3696350823 0.3703076675 0.3756336713 0.3777900291 0.3780017084 #>  [466] 0.3788322790 0.3807767176 0.3821396561 0.3821709861 0.3823843320 #>  [471] 0.3829630852 0.3839624504 0.3856878829 0.3866161900 0.3869697512 #>  [476] 0.3871036129 0.3872619371 0.3884142973 0.3889728817 0.3895980947 #>  [481] 0.3901227056 0.3901334063 0.3906622797 0.3914132463 0.3918141611 #>  [486] 0.3930504327 0.3933692447 0.3947435155 0.3950372962 0.3952342668 #>  [491] 0.3953749243 0.3965183388 0.3968332150 0.3977736586 0.3990039400 #>  [496] 0.3993862736 0.3995243638 0.4002974619 0.4007996600 0.4017016469 #>  [501] 0.4018165192 0.4020861907 0.4039527857 0.4044231458 0.4068856014 #>  [506] 0.4072314932 0.4088968928 0.4090808509 0.4104535443 0.4111859509 #>  [511] 0.4116158815 0.4118300682 0.4119735805 0.4124066550 0.4125833193 #>  [516] 0.4129662889 0.4140083964 0.4155730701 0.4174709226 0.4188953113 #>  [521] 0.4195474223 0.4205986170 0.4226006820 0.4238458363 0.4240354395 #>  [526] 0.4240935614 0.4266926636 0.4274861895 0.4282098507 0.4283694483 #>  [531] 0.4305967876 0.4314358027 0.4320780238 0.4322803861 0.4326132813 #>  [536] 0.4326913248 0.4334599079 0.4342464028 0.4351273836 0.4356596288 #>  [541] 0.4362041039 0.4381074535 0.4406226705 0.4425192938 0.4427131563 #>  [546] 0.4433819594 0.4434076552 0.4434436086 0.4446262595 0.4447938935 #>  [551] 0.4461330874 0.4461915230 0.4476098763 0.4477534714 0.4480010310 #>  [556] 0.4482053814 0.4502125762 0.4507589316 0.4524133362 0.4525580124 #>  [561] 0.4537384294 0.4552513007 0.4558410134 0.4559320236 0.4575137086 #>  [566] 0.4580745061 0.4602449514 0.4604740674 0.4629055914 0.4631554719 #>  [571] 0.4652032165 0.4656027822 0.4659591205 0.4681759977 0.4709871802 #>  [576] 0.4710307065 0.4712196732 0.4712524821 0.4732361140 0.4747934909 #>  [581] 0.4758155015 0.4774599454 0.4777004687 0.4783449494 0.4805925304 #>  [586] 0.4808523851 0.4814379886 0.4823531442 0.4826517216 0.4831501819 #>  [591] 0.4842707627 0.4861445953 0.4871407639 0.4874507418 0.4894617075 #>  [596] 0.4912231783 0.4913901353 0.4953003200 0.4965047924 0.4977826218 #>  [601] 0.4993786220 0.5000991563 0.5005317211 0.5007893250 0.5009154104 #>  [606] 0.5017322081 0.5018488711 0.5022288641 0.5045313105 0.5045563319 #>  [611] 0.5049053412 0.5050223055 0.5050775859 0.5057892959 0.5073921819 #>  [616] 0.5083410943 0.5085455603 0.5093164813 0.5101715479 0.5109606471 #>  [621] 0.5109648152 0.5115535441 0.5128625602 0.5128835585 0.5134422891 #>  [626] 0.5142636068 0.5143309986 0.5147263153 0.5153140411 0.5160626417 #>  [631] 0.5165425149 0.5173807441 0.5185783690 0.5190999091 0.5192415653 #>  [636] 0.5197908904 0.5207120417 0.5211659228 0.5213816423 0.5229657092 #>  [641] 0.5242180225 0.5250059193 0.5251058329 0.5254083520 0.5263371462 #>  [646] 0.5275689544 0.5293496004 0.5293582722 0.5299724307 0.5302684413 #>  [651] 0.5312427372 0.5318462765 0.5336123241 0.5338405526 0.5341630950 #>  [656] 0.5350570798 0.5360671063 0.5363506309 0.5365252450 0.5386246429 #>  [661] 0.5402189028 0.5424090973 0.5430815099 0.5435004856 0.5441967460 #>  [666] 0.5449946945 0.5450901023 0.5452613834 0.5461019512 0.5463811224 #>  [671] 0.5467333661 0.5474530419 0.5476768339 0.5479390665 0.5508740452 #>  [676] 0.5514179902 0.5524071678 0.5526302494 0.5527008380 0.5531381657 #>  [681] 0.5531499756 0.5544962686 0.5547827269 0.5556684600 0.5576514238 #>  [686] 0.5576768145 0.5602046543 0.5602681935 0.5613038169 0.5618157899 #>  [691] 0.5619067418 0.5627071570 0.5630183275 0.5635927791 0.5637947648 #>  [696] 0.5639207512 0.5648416746 0.5650033505 0.5667451819 0.5679092380 #>  [701] 0.5679786547 0.5681831079 0.5682306768 0.5698714854 0.5714254182 #>  [706] 0.5724280443 0.5728255857 0.5744643833 0.5744786103 0.5748713617 #>  [711] 0.5754679729 0.5770973686 0.5784475869 0.5798327989 0.5811711776 #>  [716] 0.5819050418 0.5822204407 0.5831220588 0.5839339089 0.5846492092 #>  [721] 0.5853914734 0.5869716523 0.5873390025 0.5874044323 0.5875335136 #>  [726] 0.5879616538 0.5881239464 0.5924702440 0.5925083575 0.5945078535 #>  [731] 0.5946127020 0.5962478970 0.5965902322 0.5977999685 0.5985036592 #>  [736] 0.5987278113 0.5995897863 0.5996732657 0.6001650539 0.6003479620 #>  [741] 0.6007706525 0.6014807793 0.6016246242 0.6017361190 0.6018670847 #>  [746] 0.6029619234 0.6056089525 0.6069988169 0.6086466020 0.6091186660 #>  [751] 0.6098741502 0.6101633629 0.6105164180 0.6124234381 0.6126466766 #>  [756] 0.6143421777 0.6157522307 0.6174450672 0.6174470725 0.6179379227 #>  [761] 0.6190416462 0.6203096065 0.6205179148 0.6213840534 0.6225364567 #>  [766] 0.6227646626 0.6228125235 0.6238066558 0.6238492659 0.6243454931 #>  [771] 0.6246587007 0.6264295850 0.6271531469 0.6272384329 0.6273836285 #>  [776] 0.6300287887 0.6320431390 0.6329068220 0.6331538284 0.6341528778 #>  [781] 0.6348573091 0.6370655271 0.6377846523 0.6381039060 0.6389832139 #>  [786] 0.6396867783 0.6409102033 0.6419492052 0.6421014157 0.6438424216 #>  [791] 0.6441690376 0.6449124930 0.6452177536 0.6454519582 0.6456346266 #>  [796] 0.6459085005 0.6471630829 0.6500242019 0.6503522628 0.6513129416 #>  [801] 0.6515639779 0.6518020082 0.6528650769 0.6533088193 0.6538331499 #>  [806] 0.6539392637 0.6557267237 0.6569540318 0.6572230074 0.6579423788 #>  [811] 0.6593803937 0.6621352135 0.6642976710 0.6647427822 0.6649793864 #>  [816] 0.6650128283 0.6651224512 0.6658314614 0.6671321039 0.6680558278 #>  [821] 0.6691045047 0.6692626731 0.6701913353 0.6706545659 0.6708699246 #>  [826] 0.6723969810 0.6728308602 0.6740106718 0.6745742761 0.6752637774 #>  [831] 0.6753364130 0.6761092814 0.6773627294 0.6774272180 0.6776587923 #>  [836] 0.6780471838 0.6785575049 0.6817566591 0.6818829582 0.6834541558 #>  [841] 0.6841470864 0.6859576851 0.6873410250 0.6874645024 0.6879214555 #>  [846] 0.6895887181 0.6896302745 0.6907611215 0.6927318309 0.6930901309 #>  [851] 0.6942103756 0.6946398481 0.6947841202 0.6965214619 0.6966907624 #>  [856] 0.6970244206 0.6984472805 0.6993621444 0.6994036586 0.6994470236 #>  [861] 0.7004680003 0.7012293191 0.7023130809 0.7027276438 0.7050810139 #>  [866] 0.7051297312 0.7055104181 0.7058418553 0.7072586852 0.7076176319 #>  [871] 0.7083012895 0.7086599428 0.7092076082 0.7107771935 0.7117588776 #>  [876] 0.7124565112 0.7124854996 0.7134283174 0.7138993785 0.7147510372 #>  [881] 0.7149194555 0.7161602922 0.7189238837 0.7211265361 0.7216566390 #>  [886] 0.7216727528 0.7216817031 0.7236247055 0.7237049195 0.7239940535 #>  [891] 0.7240979663 0.7242327667 0.7243450023 0.7248795757 0.7263177649 #>  [896] 0.7282051884 0.7282432890 0.7294357684 0.7296325082 0.7307442297 #>  [901] 0.7325726117 0.7327607457 0.7330094453 0.7330881523 0.7332709171 #>  [906] 0.7345833035 0.7364211811 0.7390099113 0.7397565259 0.7399666503 #>  [911] 0.7450749106 0.7467053013 0.7467317223 0.7476566708 0.7492537244 #>  [916] 0.7509097642 0.7524484476 0.7525336930 0.7538485838 0.7539775191 #>  [921] 0.7542639446 0.7550765432 0.7552860621 0.7553949732 0.7582852557 #>  [926] 0.7593050286 0.7604268396 0.7607079293 0.7607345465 0.7625605352 #>  [931] 0.7633802485 0.7643548654 0.7647953453 0.7651156487 0.7662002336 #>  [936] 0.7674898081 0.7700052568 0.7703384163 0.7705309050 0.7726158695 #>  [941] 0.7726169132 0.7738132409 0.7743876312 0.7750494200 0.7752052474 #>  [946] 0.7782443201 0.7787165151 0.7789265992 0.7800383945 0.7806991920 #>  [951] 0.7813591019 0.7823381005 0.7823911583 0.7827983387 0.7829109588 #>  [956] 0.7843319337 0.7844884788 0.7845678283 0.7851722210 0.7857851593 #>  [961] 0.7863910286 0.7865127125 0.7867678893 0.7867887482 0.7896249559 #>  [966] 0.7899012545 0.7902443309 0.7904814569 0.7905860118 0.7909888204 #>  [971] 0.7933511404 0.7941674426 0.7945254190 0.7974076818 0.7997989014 #>  [976] 0.8002457693 0.8036642087 0.8069398317 0.8070169656 0.8076813760 #>  [981] 0.8085720291 0.8093076987 0.8098807712 0.8110680921 0.8122110176 #>  [986] 0.8131046015 0.8144713099 0.8153341901 0.8162374117 0.8170976456 #>  [991] 0.8182702495 0.8196691906 0.8205145908 0.8211781977 0.8237638819 #>  [996] 0.8239250392 0.8265251871 0.8265654963 0.8277794117 0.8290444623 #> [1001] 0.8292178723 0.8296528151 0.8302772288 0.8308792354 0.8313412858 #> [1006] 0.8313619402 0.8314776049 0.8323040025 0.8327673324 0.8342250922 #> [1011] 0.8345165931 0.8350899960 0.8351662534 0.8357213778 0.8357539618 #> [1016] 0.8384586400 0.8406061997 0.8411394227 0.8428107646 0.8445806485 #> [1021] 0.8448178838 0.8451803427 0.8458865175 0.8467392127 0.8476768189 #> [1026] 0.8493919992 0.8498885341 0.8503345756 0.8505050558 0.8505186116 #> [1031] 0.8514134163 0.8517053679 0.8517186642 0.8523721689 0.8523872565 #> [1036] 0.8527049355 0.8583438155 0.8583623864 0.8592791779 0.8594910007 #> [1041] 0.8601445252 0.8605044634 0.8628584504 0.8638611493 0.8644697712 #> [1046] 0.8652818329 0.8653117506 0.8655777886 0.8655849366 0.8698725507 #> [1051] 0.8700824890 0.8704104632 0.8711283110 0.8715476893 0.8719759484 #> [1056] 0.8734749198 0.8738836368 0.8744641751 0.8766089038 0.8770417878 #> [1061] 0.8785784982 0.8791633720 0.8798115431 0.8808121438 0.8809078000 #> [1066] 0.8813677181 0.8822547932 0.8841601098 0.8846903973 0.8857548862 #> [1071] 0.8858517568 0.8862135342 0.8862499030 0.8877288439 0.8884167353 #> [1076] 0.8893800684 0.8895733274 0.8900666641 0.8918253266 0.8935384130 #> [1081] 0.8935622772 0.8938532779 0.8949005425 0.8963424066 0.8981677772 #> [1086] 0.8989210914 0.9000650734 0.9021079704 0.9021836021 0.9040177817 #> [1091] 0.9044709625 0.9049319634 0.9051205535 0.9076269577 0.9092219568 #> [1096] 0.9095711767 0.9096952798 0.9098324045 0.9116063055 0.9137184730 #> [1101] 0.9144510859 0.9154324787 0.9156469980 0.9173283238 0.9179742824 #> [1106] 0.9187813479 0.9190680155 0.9195280847 0.9196925780 0.9215919012 #> [1111] 0.9218638686 0.9219439807 0.9229318685 0.9233276693 0.9233963776 #> [1116] 0.9235139903 0.9239804931 0.9244144252 0.9248346153 0.9260910477 #> [1121] 0.9264004865 0.9266695449 0.9268765420 0.9276161887 0.9277472986 #> [1126] 0.9305104172 0.9306325187 0.9307833151 0.9321056826 0.9322252516 #> [1131] 0.9323645001 0.9332502583 0.9335518477 0.9339002538 0.9359331476 #> [1136] 0.9362815008 0.9368861733 0.9371314000 0.9389993315 0.9394619840 #> [1141] 0.9403740450 0.9426235894 0.9427231282 0.9438981498 0.9438993572 #> [1146] 0.9445044279 0.9453145669 0.9453632791 0.9459304029 0.9481440633 #> [1151] 0.9488183330 0.9488964880 0.9493519322 0.9501553722 0.9509410352 #> [1156] 0.9511610181 0.9511916591 0.9514898992 0.9517449252 0.9521991434 #> [1161] 0.9548794848 0.9554192685 0.9555049947 0.9572774915 0.9574685980 #> [1166] 0.9578304294 0.9582389404 0.9590568852 0.9593718766 0.9603170210 #> [1171] 0.9612667567 0.9620329383 0.9623453037 0.9633815902 0.9635947963 #> [1176] 0.9644233833 0.9650250607 0.9657851568 0.9663084953 0.9666467369 #> [1181] 0.9668193808 0.9668746576 0.9670639746 0.9677553129 0.9677757265 #> [1186] 0.9679960988 0.9681875042 0.9688203903 0.9688611348 0.9695259363 #> [1191] 0.9698223887 0.9699814486 0.9709001953 0.9710801789 0.9712518524 #> [1196] 0.9718756446 0.9722917581 0.9725312552 0.9727418294 0.9729619740 #> [1201] 0.9730223834 0.9730897798 0.9737088972 0.9745197881 0.9751215524 #> [1206] 0.9752270247 0.9752891039 0.9753320111 0.9756050615 0.9758304540 #> [1211] 0.9758748650 0.9759046067 0.9760563014 0.9761758104 0.9762174573 #> [1216] 0.9764405147 0.9768115150 0.9772787343 0.9777887321 0.9784799168 #> [1221] 0.9787536264 0.9791708046 0.9793312713 0.9796154121 0.9797412358 #> [1226] 0.9798266763 0.9800253112 0.9800439394 0.9800488572 0.9800769063 #> [1231] 0.9802168415 0.9802433642 0.9805899263 0.9806293407 0.9806906699 #> [1236] 0.9807552412 0.9809581901 0.9810050112 0.9810205442 0.9810762249 #> [1241] 0.9810911247 0.9811898955 0.9812463460 0.9813591186 0.9815363494 #> [1246] 0.9815707531 0.9816716011 0.9819618914 0.9819659763 0.9821895880 #> [1251] 0.9822586733 0.9824200629 0.9824522976 0.9825790811 0.9827908920 #> [1256] 0.9828243463 0.9828884502 0.9831231696 0.9835262213 0.9837413804 #> [1261] 0.9837658241 0.9838049909 0.9838206464 0.9838428896 0.9838731017 #> [1266] 0.9838948103 0.9841968031 0.9842614576 0.9842975369 0.9843981467 #> [1271] 0.9844735776 0.9847561879 0.9847722991 0.9848716471 0.9851213193 #> [1276] 0.9851471008 0.9852290480 0.9852415968 0.9852451361 0.9854992706 #> [1281] 0.9856323546 0.9856624562 0.9858228272 0.9858350297 0.9858620725 #> [1286] 0.9858674214 0.9858693070 0.9858834323 0.9858944283 0.9860493885 #> [1291] 0.9860738287 0.9861781160 0.9862724256 0.9865420900 0.9865859269 #> [1296] 0.9867009742 0.9868828564 0.9870743618 0.9872198100 0.9872402509 #> [1301] 0.9872612909 0.9876254553 0.9877120747 0.9877395733 0.9878527390 #> [1306] 0.9879104835 0.9879391258 0.9880668192 0.9880731981 0.9881712386 #> [1311] 0.9882245239 0.9882963315 0.9883071265 0.9884072915 0.9884916367 #> [1316] 0.9885027423 0.9885102059 0.9887852317 0.9888298412 0.9889029193 #> [1321] 0.9891527326 0.9892678927 0.9893132789 0.9893291297 0.9893297404 #> [1326] 0.9894723512 0.9894955498 0.9895219667 0.9895868776 0.9895883910 #> [1331] 0.9896806819 0.9896999464 0.9897331333 0.9897706956 0.9898110581 #> [1336] 0.9898208012 0.9898676522 0.9899010381 0.9899641668 0.9901085517 #> [1341] 0.9902026748 0.9902030985 0.9902162453 0.9903838445 0.9905456454 #> [1346] 0.9905693748 0.9906577471 0.9906683029 0.9907042764 0.9907107407 #> [1351] 0.9907592466 0.9907740466 0.9909159745 0.9909617741 0.9910168866 #> [1356] 0.9910545890 0.9910772474 0.9910836624 0.9911003436 0.9911647642 #> [1361] 0.9911954065 0.9912010196 0.9912424224 0.9913038474 0.9913172418 #> [1366] 0.9913280670 0.9913467243 0.9913635582 0.9913666260 0.9913915906 #> [1371] 0.9914561261 0.9914664271 0.9915514203 0.9915763857 0.9915792321 #> [1376] 0.9916413542 0.9916585009 0.9916770123 0.9916851175 0.9917256512 #> [1381] 0.9917719079 0.9917963276 0.9918067424 0.9918123901 0.9918656461 #> [1386] 0.9918692010 0.9918893428 0.9919016705 0.9919321311 0.9919768656 #> [1391] 0.9920251010 0.9920417512 0.9920478037 0.9921829178 0.9922615828 #> [1396] 0.9923684410 0.9924138334 0.9924805794 0.9925013827 0.9925274256 #> [1401] 0.9925294011 0.9925476161 0.9925808946 0.9925946265 0.9925980159 #> [1406] 0.9926370078 0.9926430481 0.9927022479 0.9927367043 0.9927417483 #> [1411] 0.9929254414 0.9929369424 0.9929688641 0.9930026205 0.9930286298 #> [1416] 0.9930346284 0.9930406279 0.9930701252 0.9931124072 0.9931155969 #> [1421] 0.9931300133 0.9931412248 0.9931436507 0.9931829295 0.9931927371 #> [1426] 0.9932594318 0.9932879372 0.9933190814 0.9933294689 0.9933407174 #> [1431] 0.9933595084 0.9933917339 0.9934031131 0.9934228998 0.9934423969 #> [1436] 0.9934426850 0.9934585228 0.9934660176 0.9935121120 0.9935200243 #> [1441] 0.9935256887 0.9935330110 0.9935459114 0.9935808207 0.9935836850 #> [1446] 0.9935838311 0.9935958075 0.9936152930 0.9936212343 0.9936254093 #> [1451] 0.9936522144 0.9936559072 0.9936678628 0.9937165450 0.9937264324 #> [1456] 0.9937609699 0.9937632337 0.9937784541 0.9937820979 0.9937861953 #> [1461] 0.9937994013 0.9938220854 0.9938544218 0.9938618469 0.9938618765 #> [1466] 0.9938632145 0.9938738783 0.9939136568 0.9939216513 0.9939474529 #> [1471] 0.9939488831 0.9940097050 0.9940240997 0.9940747622 0.9940790672 #> [1476] 0.9940840505 0.9941293869 0.9941405907 0.9941661379 0.9942000500 #> [1481] 0.9942138173 0.9942471031 0.9942542505 0.9942610241 0.9942620022 #> [1486] 0.9942665643 0.9942975606 0.9943068155 0.9943128379 0.9943155880 #> [1491] 0.9943476788 0.9943910057 0.9944132775 0.9944145148 0.9944188115 #> [1496] 0.9944367561 0.9944407665 0.9944439246 0.9944452768 0.9944456907 #> [1501] 0.9944656708 0.9944729012 0.9945171050 0.9945466800 0.9945473490 #> [1506] 0.9945650718 0.9945671792 0.9945816936 0.9945927382 0.9946136306 #> [1511] 0.9946174223 0.9946327086 0.9946519009 0.9946524329 0.9946757291 #> [1516] 0.9946787647 0.9946835105 0.9946869463 0.9946964405 0.9947270551 #> [1521] 0.9947274204 0.9947360698 0.9947473265 0.9947849552 0.9948315415 #> [1526] 0.9948947878 0.9948960193 0.9949078981 0.9949260068 0.9949435441 #> [1531] 0.9949541145 0.9949654933 0.9949841333 0.9950214622 0.9950262339 #> [1536] 0.9950339576 0.9950428430 0.9950501009 0.9950529215 0.9950541095 #> [1541] 0.9950903152 0.9951219962 0.9951319775 0.9951427106 0.9951444194 #> [1546] 0.9951519894 0.9951634089 0.9951665829 0.9951679325 0.9951878768 #> [1551] 0.9952122507 0.9952317793 0.9952635111 0.9952747545 0.9952778576 #> [1556] 0.9952881109 0.9952948482 0.9953126525 0.9953162515 0.9953196852 #> [1561] 0.9953282229 0.9953285508 0.9953384751 0.9953402486 0.9953516870 #> [1566] 0.9953722886 0.9953924300 0.9954354926 0.9954613657 0.9954621322 #> [1571] 0.9954767454 0.9955046371 0.9955079699 0.9955120602 0.9955184315 #> [1576] 0.9955469876 0.9955473912 0.9955484985 0.9955645987 0.9955947317 #> [1581] 0.9955959773 0.9955965067 0.9956011318 0.9956014945 0.9956099835 #> [1586] 0.9956109698 0.9956122754 0.9956227592 0.9956291556 0.9956352233 #> [1591] 0.9956416639 0.9956437993 0.9956546592 0.9956555204 0.9956752391 #> [1596] 0.9956952209 0.9957118726 0.9957126495 0.9957173714 0.9957177196 #> [1601] 0.9957289111 0.9957389052 0.9957397371 0.9957596375 0.9957654967 #> [1606] 0.9957821178 0.9957823347 0.9958159892 0.9958223088 0.9958264571 #> [1611] 0.9958333240 0.9958597148 0.9958598333 0.9958787232 0.9958798743 #> [1616] 0.9958849023 0.9958931619 0.9958947305 0.9959014321 0.9959094350 #> [1621] 0.9959141991 0.9959308997 0.9959354557 0.9959380844 0.9959404417 #> [1626] 0.9959580966 0.9959581517 0.9959675299 0.9959684590 0.9959917232 #> [1631] 0.9959983379 0.9960074227 0.9960204376 0.9960439047 0.9960468211 #> [1636] 0.9960564503 0.9960580886 0.9960664923 0.9960681506 0.9960750515 #> [1641] 0.9961499411 0.9961687519 0.9961832106 0.9961984269 0.9962010186 #> [1646] 0.9962260882 0.9962270169 0.9962289938 0.9962323090 0.9962527724 #> [1651] 0.9962534412 0.9962621582 0.9962889837 0.9963055313 0.9963087016 #> [1656] 0.9963150534 0.9963228511 0.9963383641 0.9963560101 0.9963597621 #> [1661] 0.9963618934 0.9963764420 0.9963838529 0.9963960986 0.9963982022 #> [1666] 0.9964182749 0.9964204158 0.9964435599 0.9964592723 0.9964612432 #> [1671] 0.9964719005 0.9964741672 0.9964809591 0.9965009728 0.9965017629 #> [1676] 0.9965108357 0.9965374426 0.9965469843 0.9965550096 0.9965566767 #> [1681] 0.9965660371 0.9965753918 0.9965769757 0.9965787439 0.9965846443 #> [1686] 0.9965871005 0.9965878057 0.9965886867 0.9965975455 0.9966011410 #> [1691] 0.9966131682 0.9966358239 0.9966430332 0.9966505114 0.9966525034 #> [1696] 0.9966550520 0.9966594991 0.9966767102 0.9966809991 0.9966952369 #> [1701] 0.9966964532 0.9967367054 0.9967395461 0.9967417918 0.9967576150 #> [1706] 0.9967728747 0.9967773195 0.9967801996 0.9967816116 0.9967910188 #> [1711] 0.9968044175 0.9968122615 0.9968163861 0.9968268023 0.9968277053 #> [1716] 0.9968374312 0.9968416915 0.9968817013 0.9968978717 0.9969109406 #> [1721] 0.9969213666 0.9969228551 0.9969253663 0.9969256671 0.9969429272 #> [1726] 0.9969461272 0.9969488479 0.9969700916 0.9969705768 0.9969744910 #> [1731] 0.9969750529 0.9969752737 0.9969805339 0.9969826999 0.9969975320 #> [1736] 0.9970008909 0.9970143196 0.9970174826 0.9970259211 0.9970280956 #> [1741] 0.9970288832 0.9970441201 0.9970464997 0.9970473834 0.9970526242 #> [1746] 0.9970580091 0.9970596271 0.9970601699 0.9970967336 0.9970983321 #> [1751] 0.9971010282 0.9971085855 0.9971111454 0.9971126956 0.9971187557 #> [1756] 0.9971282887 0.9971284780 0.9971294303 0.9971397379 0.9971475130 #> [1761] 0.9971562977 0.9971600693 0.9971729611 0.9971789049 0.9971812721 #> [1766] 0.9971833898 0.9971834998 0.9971847665 0.9971878257 0.9971962777 #> [1771] 0.9971981369 0.9972023274 0.9972040113 0.9972117026 0.9972159851 #> [1776] 0.9972379089 0.9972542196 0.9972565614 0.9972585331 0.9972645400 #> [1781] 0.9972759590 0.9972768500 0.9972825447 0.9972829283 0.9972846655 #> [1786] 0.9972870826 0.9973021734 0.9973212559 0.9973317953 0.9973367858 #> [1791] 0.9973494889 0.9973591772 0.9973662748 0.9973675384 0.9973775393 #> [1796] 0.9973792034 0.9973929023 0.9973973999 0.9973984319 0.9973993461 #> [1801] 0.9974087858 0.9974132111 0.9974156734 0.9974380859 0.9974425091 #> [1806] 0.9974447758 0.9974473299 0.9974484492 0.9974486436 0.9974603997 #> [1811] 0.9974636237 0.9974782306 0.9974895010 0.9974923117 0.9974929463 #> [1816] 0.9975024489 0.9975069097 0.9975153925 0.9975365789 0.9975502217 #> [1821] 0.9975586261 0.9975680987 0.9975692163 0.9975716241 0.9975810850 #> [1826] 0.9975823384 0.9975890580 0.9975928427 0.9976010465 0.9976111464 #> [1831] 0.9976245571 0.9976253504 0.9976332440 0.9976339242 0.9976431345 #> [1836] 0.9976437615 0.9976446649 0.9976600773 0.9976607519 0.9976617915 #> [1841] 0.9976668720 0.9976796580 0.9976801616 0.9976855448 0.9976855863 #> [1846] 0.9976894051 0.9976896258 0.9976940586 0.9976974151 0.9977032258 #> [1851] 0.9977033601 0.9977086343 0.9977118311 0.9977191461 0.9977299568 #> [1856] 0.9977340346 0.9977341942 0.9977348511 0.9977435354 0.9977516656 #> [1861] 0.9977537263 0.9977646873 0.9977668763 0.9977674026 0.9977968268 #> [1866] 0.9977990648 0.9977997174 0.9978020442 0.9978023675 0.9978041684 #> [1871] 0.9978119541 0.9978180683 0.9978221945 0.9978226171 0.9978264741 #> [1876] 0.9978273064 0.9978306705 0.9978504121 0.9978571381 0.9978591437 #> [1881] 0.9978609901 0.9978740014 0.9978801758 0.9978814224 0.9978921163 #> [1886] 0.9978938628 0.9979033036 0.9979148916 0.9979194772 0.9979213238 #> [1891] 0.9979259113 0.9979305653 0.9979306993 0.9979464030 0.9979516801 #> [1896] 0.9979601431 0.9979690796 0.9979708695 0.9979760093 0.9979820426 #> [1901] 0.9979859958 0.9979938982 0.9979991792 0.9980173901 0.9980202185 #> [1906] 0.9980225901 0.9980290519 0.9980331995 0.9980357491 0.9980471235 #> [1911] 0.9980573827 0.9980632290 0.9980651702 0.9980717259 0.9980746142 #> [1916] 0.9980828779 0.9980855500 0.9980950952 0.9980996481 0.9981017818 #> [1921] 0.9981032510 0.9981112954 0.9981168706 0.9981175908 0.9981195310 #> [1926] 0.9981265867 0.9981404143 0.9981412696 0.9981616283 0.9981655677 #> [1931] 0.9981691316 0.9981708482 0.9981748872 0.9981854082 0.9981910400 #> [1936] 0.9981915128 0.9981926369 0.9981951345 0.9981958010 0.9982055201 #> [1941] 0.9982072275 0.9982145010 0.9982147774 0.9982151042 0.9982160863 #> [1946] 0.9982163817 0.9982196741 0.9982243258 0.9982312220 0.9982344142 #> [1951] 0.9982353192 0.9982377119 0.9982386637 0.9982462925 0.9982535723 #> [1956] 0.9982547321 0.9982554406 0.9982582228 0.9982646285 0.9982685500 #> [1961] 0.9982691278 0.9982698307 0.9982701670 0.9982744059 0.9982745653 #> [1966] 0.9982762613 0.9982788716 0.9982823915 0.9982854904 0.9982904244 #> [1971] 0.9982979341 0.9983007570 0.9983076531 0.9983085974 0.9983109574 #> [1976] 0.9983123420 0.9983180760 0.9983188342 0.9983219804 0.9983267085 #> [1981] 0.9983282958 0.9983293570 0.9983298114 0.9983332780 0.9983357800 #> [1986] 0.9983378758 0.9983477344 0.9983509815 0.9983516143 0.9983537379 #> [1991] 0.9983578441 0.9983604082 0.9983621438 0.9983795793 0.9983843420 #> [1996] 0.9983964822 0.9983981068 0.9984015756 0.9984065546 0.9984074348 #> [2001] 0.9984099035 0.9984132881 0.9984149330 0.9984163653 0.9984164478 #> [2006] 0.9984208427 0.9984265181 0.9984316877 0.9984369860 0.9984390784 #> [2011] 0.9984410120 0.9984414478 0.9984437695 0.9984590440 0.9984688526 #> [2016] 0.9984752982 0.9984820776 0.9984844998 0.9984875914 0.9984929077 #> [2021] 0.9984933038 0.9984945925 0.9984976045 0.9985083428 0.9985085742 #> [2026] 0.9985114548 0.9985119736 0.9985151569 0.9985158759 0.9985168969 #> [2031] 0.9985243002 0.9985292463 0.9985371238 0.9985418998 0.9985478611 #> [2036] 0.9985488849 0.9985534466 0.9985556475 0.9985568997 0.9985578627 #> [2041] 0.9985583203 0.9985602488 0.9985655519 0.9985655557 0.9985659121 #> [2046] 0.9985668115 0.9985675710 0.9985690667 0.9985705717 0.9985726041 #> [2051] 0.9985805577 0.9985808586 0.9985909444 0.9985988713 0.9986019003 #> [2056] 0.9986077496 0.9986108081 0.9986137489 0.9986190711 0.9986206009 #> [2061] 0.9986216972 0.9986233277 0.9986248844 0.9986262270 0.9986285736 #> [2066] 0.9986291431 0.9986295191 0.9986345171 0.9986484375 0.9986560902 #> [2071] 0.9986561409 0.9986618151 0.9986630147 0.9986636316 0.9986670254 #> [2076] 0.9986760024 0.9986792762 0.9986801543 0.9986818883 0.9986820603 #> [2081] 0.9986859027 0.9986872163 0.9986873458 0.9986944410 0.9986960254 #> [2086] 0.9986984150 0.9986990439 0.9987037972 0.9987077064 0.9987100764 #> [2091] 0.9987175851 0.9987183762 0.9987189127 0.9987246195 0.9987265713 #> [2096] 0.9987272783 0.9987300672 0.9987310312 0.9987319101 0.9987323761 #> [2101] 0.9987356925 0.9987393539 0.9987405682 0.9987427446 0.9987442280 #> [2106] 0.9987443865 0.9987455774 0.9987467645 0.9987487140 0.9987504842 #> [2111] 0.9987557484 0.9987576946 0.9987599465 0.9987694683 0.9987701692 #> [2116] 0.9987703249 0.9987736839 0.9987748838 0.9987759037 0.9987775202 #> [2121] 0.9987807603 0.9987827521 0.9987848034 0.9987853734 0.9987906983 #> [2126] 0.9987907411 0.9987936629 0.9987988027 0.9988034191 0.9988061189 #> [2131] 0.9988081741 0.9988083289 0.9988112479 0.9988116097 0.9988127527 #> [2136] 0.9988150089 0.9988229010 0.9988242972 0.9988244992 0.9988282641 #> [2141] 0.9988290810 0.9988300942 0.9988325925 0.9988354833 0.9988417491 #> [2146] 0.9988444618 0.9988478819 0.9988487224 0.9988505942 0.9988532107 #> [2151] 0.9988566745 0.9988569891 0.9988599960 0.9988611867 0.9988622760 #> [2156] 0.9988635680 0.9988641628 0.9988652015 0.9988659460 0.9988683166 #> [2161] 0.9988710252 0.9988724779 0.9988732620 0.9988741661 0.9988812110 #> [2166] 0.9988823759 0.9988857162 0.9988900448 0.9988921329 0.9988924818 #> [2171] 0.9988998046 0.9989043731 0.9989048421 0.9989049424 0.9989105947 #> [2176] 0.9989112880 0.9989134851 0.9989139093 0.9989199086 0.9989236152 #> [2181] 0.9989272934 0.9989357710 0.9989359272 0.9989372872 0.9989438336 #> [2186] 0.9989511230 0.9989516198 0.9989518937 0.9989532863 0.9989595208 #> [2191] 0.9989625878 0.9989652476 0.9989658543 0.9989659249 0.9989686067 #> [2196] 0.9989689833 0.9989707337 0.9989742146 0.9989782225 0.9989804116 #> [2201] 0.9989859351 0.9989896563 0.9989947064 0.9989957633 0.9990010247 #> [2206] 0.9990074167 0.9990093974 0.9990097455 0.9990099638 0.9990139946 #> [2211] 0.9990140888 0.9990160277 0.9990174832 0.9990219303 0.9990226426 #> [2216] 0.9990233447 0.9990269588 0.9990271828 0.9990299130 0.9990303596 #> [2221] 0.9990315229 0.9990318234 0.9990431583 0.9990434528 0.9990455826 #> [2226] 0.9990476307 0.9990478645 0.9990485674 0.9990526575 0.9990533369 #> [2231] 0.9990552820 0.9990564223 0.9990587486 0.9990596305 0.9990650411 #> [2236] 0.9990663671 0.9990685254 0.9990716806 0.9990747077 0.9990766367 #> [2241] 0.9990772869 0.9990827843 0.9990856606 0.9990888112 0.9990891263 #> [2246] 0.9990916311 0.9990973815 0.9990979870 0.9991015880 0.9991027212 #> [2251] 0.9991031867 0.9991044422 0.9991052488 0.9991056350 0.9991061857 #> [2256] 0.9991096265 0.9991096731 0.9991123684 0.9991125393 0.9991132915 #> [2261] 0.9991134881 0.9991137197 0.9991216172 0.9991258836 0.9991276017 #> [2266] 0.9991278793 0.9991300984 0.9991309657 0.9991311520 0.9991318514 #> [2271] 0.9991331920 0.9991333929 0.9991359129 0.9991372958 0.9991379876 #> [2276] 0.9991385185 0.9991388159 0.9991391728 0.9991406034 0.9991431602 #> [2281] 0.9991446896 0.9991459527 0.9991466050 0.9991509517 0.9991519660 #> [2286] 0.9991556201 0.9991564028 0.9991569546 0.9991571567 0.9991576024 #> [2291] 0.9991579603 0.9991596178 0.9991598854 0.9991602470 0.9991607885 #> [2296] 0.9991653998 0.9991654672 0.9991668125 0.9991763743 0.9991778418 #> [2301] 0.9991780683 0.9991817684 0.9991832950 0.9991840434 0.9991853477 #> [2306] 0.9991887655 0.9991902276 0.9991916907 0.9991928782 0.9991967831 #> [2311] 0.9991999565 0.9992010754 0.9992022312 0.9992049792 0.9992054339 #> [2316] 0.9992085807 0.9992101321 0.9992104759 0.9992118910 0.9992131747 #> [2321] 0.9992152390 0.9992163393 0.9992175176 0.9992206427 0.9992230806 #> [2326] 0.9992258875 0.9992284372 0.9992303337 0.9992309105 0.9992330937 #> [2331] 0.9992337472 0.9992340838 0.9992350160 0.9992351211 0.9992352571 #> [2336] 0.9992356797 0.9992359271 0.9992387261 0.9992429425 0.9992474707 #> [2341] 0.9992482220 0.9992495850 0.9992505900 0.9992536682 0.9992538410 #> [2346] 0.9992540835 0.9992542144 0.9992559369 0.9992569742 0.9992570686 #> [2351] 0.9992610583 0.9992625608 0.9992670741 0.9992732432 0.9992733755 #> [2356] 0.9992760406 0.9992790353 0.9992819838 0.9992837528 0.9992850977 #> [2361] 0.9992863553 0.9992864968 0.9992873469 0.9992887646 0.9992919799 #> [2366] 0.9992932473 0.9992947900 0.9992976772 0.9992981290 0.9993021532 #> [2371] 0.9993059894 0.9993061471 0.9993129251 0.9993137838 0.9993152032 #> [2376] 0.9993153676 0.9993162721 0.9993172420 0.9993184713 0.9993260174 #> [2381] 0.9993324813 0.9993328651 0.9993330429 0.9993335529 0.9993338480 #> [2386] 0.9993355277 0.9993360052 0.9993363022 0.9993382814 0.9993389701 #> [2391] 0.9993394328 0.9993395997 0.9993445581 0.9993481684 0.9993488718 #> [2396] 0.9993492660 0.9993505909 0.9993531743 0.9993565203 0.9993589044 #> [2401] 0.9993599591 0.9993627565 0.9993628546 0.9993629439 0.9993629544 #> [2406] 0.9993662526 0.9993665970 0.9993678884 0.9993688771 0.9993695008 #> [2411] 0.9993696088 0.9993712105 0.9993725277 0.9993726699 0.9993746243 #> [2416] 0.9993755115 0.9993783724 0.9993786820 0.9993833322 0.9993838742 #> [2421] 0.9993847890 0.9993864798 0.9993867149 0.9993876865 0.9993891448 #> [2426] 0.9993914483 0.9993932153 0.9993974401 0.9993982273 0.9993994049 #> [2431] 0.9994032300 0.9994042749 0.9994049914 0.9994071790 0.9994094585 #> [2436] 0.9994096022 0.9994097409 0.9994108005 0.9994117835 0.9994129480 #> [2441] 0.9994155670 0.9994167431 0.9994193294 0.9994204248 0.9994207626 #> [2446] 0.9994219983 0.9994233007 0.9994248224 0.9994258747 0.9994260749 #> [2451] 0.9994276339 0.9994313835 0.9994320412 0.9994321568 0.9994355477 #> [2456] 0.9994378111 0.9994384080 0.9994388965 0.9994396345 0.9994401812 #> [2461] 0.9994406438 0.9994407432 0.9994413408 0.9994426708 0.9994435184 #> [2466] 0.9994438881 0.9994440502 0.9994448713 0.9994462401 0.9994463063 #> [2471] 0.9994466310 0.9994467600 0.9994491090 0.9994494876 0.9994516682 #> [2476] 0.9994542393 0.9994548110 0.9994563608 0.9994584559 0.9994585611 #> [2481] 0.9994589525 0.9994592881 0.9994603404 0.9994633639 0.9994647339 #> [2486] 0.9994664831 0.9994672306 0.9994682019 0.9994694436 0.9994707460 #> [2491] 0.9994711993 0.9994753581 0.9994772369 0.9994792470 0.9994793484 #> [2496] 0.9994884504 0.9994890529 0.9994891404 0.9994891777 0.9994896363 #> [2501] 0.9994963573 0.9994971780 0.9994982294 0.9994996922 0.9995000563 #> [2506] 0.9995063657 0.9995065484 0.9995086021 0.9995095472 0.9995096834 #> [2511] 0.9995108610 0.9995115824 0.9995123718 0.9995131097 0.9995131330 #> [2516] 0.9995132579 0.9995151927 0.9995180711 0.9995191704 0.9995192337 #> [2521] 0.9995198757 0.9995219731 0.9995220669 0.9995237241 0.9995250907 #> [2526] 0.9995274179 0.9995274359 0.9995278639 0.9995280572 0.9995293393 #> [2531] 0.9995307274 0.9995311708 0.9995346394 0.9995356475 0.9995359414 #> [2536] 0.9995403152 0.9995408108 0.9995417924 0.9995421051 0.9995429945 #> [2541] 0.9995432780 0.9995447844 0.9995463329 0.9995468660 0.9995468740 #> [2546] 0.9995468849 0.9995486084 0.9995497816 0.9995507448 0.9995510952 #> [2551] 0.9995520180 0.9995529839 0.9995577664 0.9995609489 0.9995630724 #> [2556] 0.9995636929 0.9995646426 0.9995647869 0.9995667096 0.9995667384 #> [2561] 0.9995683353 0.9995699303 0.9995720003 0.9995765668 0.9995790494 #> [2566] 0.9995833924 0.9995847962 0.9995856839 0.9995883641 0.9995885808 #> [2571] 0.9995893830 0.9995908503 0.9995920511 0.9995933502 0.9995968638 #> [2576] 0.9995987027 0.9995997841 0.9996022958 0.9996032464 0.9996045247 #> [2581] 0.9996056631 0.9996079348 0.9996080364 0.9996089724 0.9996096140 #> [2586] 0.9996103065 0.9996111341 0.9996113339 0.9996136037 0.9996138059 #> [2591] 0.9996138308 0.9996164073 0.9996196072 0.9996230799 0.9996230817 #> [2596] 0.9996234559 0.9996247511 0.9996271152 0.9996283309 0.9996283403 #> [2601] 0.9996286700 0.9996296326 0.9996309841 0.9996324331 0.9996332492 #> [2606] 0.9996341713 0.9996347108 0.9996376959 0.9996429495 0.9996442000 #> [2611] 0.9996447084 0.9996462427 0.9996476272 0.9996498516 0.9996522172 #> [2616] 0.9996530643 0.9996536795 0.9996539443 0.9996557931 0.9996558952 #> [2621] 0.9996562723 0.9996590770 0.9996610270 0.9996617989 0.9996620166 #> [2626] 0.9996624001 0.9996624308 0.9996669032 0.9996674657 0.9996679566 #> [2631] 0.9996693005 0.9996698920 0.9996702867 0.9996705736 0.9996741722 #> [2636] 0.9996749662 0.9996750526 0.9996756152 0.9996797528 0.9996803227 #> [2641] 0.9996807168 0.9996820873 0.9996830761 0.9996836524 0.9996839071 #> [2646] 0.9996839371 0.9996850207 0.9996875960 0.9996878532 0.9996900297 #> [2651] 0.9996901067 0.9996902249 0.9996907725 0.9996908428 0.9996914285 #> [2656] 0.9996921594 0.9996934544 0.9996935617 0.9996942211 0.9996967618 #> [2661] 0.9996973205 0.9996976057 0.9996976504 0.9996977601 0.9996980234 #> [2666] 0.9996989397 0.9997006531 0.9997042358 0.9997114039 0.9997118781 #> [2671] 0.9997120734 0.9997121999 0.9997135053 0.9997146791 0.9997148722 #> [2676] 0.9997150244 0.9997158289 0.9997158441 0.9997167809 0.9997182212 #> [2681] 0.9997183088 0.9997183909 0.9997184465 0.9997210546 0.9997213468 #> [2686] 0.9997248201 0.9997254909 0.9997257130 0.9997287015 0.9997305672 #> [2691] 0.9997317766 0.9997340000 0.9997348498 0.9997352281 0.9997377765 #> [2696] 0.9997380919 0.9997396919 0.9997397093 0.9997416223 0.9997426635 #> [2701] 0.9997440639 0.9997444353 0.9997465804 0.9997468375 0.9997469765 #> [2706] 0.9997482159 0.9997485040 0.9997503044 0.9997525088 0.9997528223 #> [2711] 0.9997565999 0.9997566114 0.9997569792 0.9997571842 0.9997583357 #> [2716] 0.9997585685 0.9997600016 0.9997607710 0.9997628258 0.9997628426 #> [2721] 0.9997643020 0.9997648918 0.9997653207 0.9997689644 0.9997733743 #> [2726] 0.9997735756 0.9997737404 0.9997762274 0.9997779530 0.9997783034 #> [2731] 0.9997786127 0.9997816286 0.9997827535 0.9997830963 0.9997845371 #> [2736] 0.9997849807 0.9997852319 0.9997857627 0.9997874725 0.9997879774 #> [2741] 0.9997879980 0.9997886637 0.9997912008 0.9997928288 0.9997928378 #> [2746] 0.9997944243 0.9997948326 0.9997948493 0.9997953164 0.9997957821 #> [2751] 0.9997965411 0.9997967744 0.9997972528 0.9997981423 0.9998005732 #> [2756] 0.9998007371 0.9998014866 0.9998018352 0.9998019046 0.9998036672 #> [2761] 0.9998045734 0.9998046711 0.9998053903 0.9998054404 0.9998057254 #> [2766] 0.9998060586 0.9998092134 0.9998104127 0.9998107128 0.9998108528 #> [2771] 0.9998110100 0.9998123483 0.9998139567 0.9998153914 0.9998158452 #> [2776] 0.9998187940 0.9998251545 0.9998258063 0.9998264677 0.9998272786 #> [2781] 0.9998292075 0.9998294787 0.9998333447 0.9998338485 0.9998346727 #> [2786] 0.9998354418 0.9998365459 0.9998368785 0.9998384664 0.9998387736 #> [2791] 0.9998389787 0.9998393344 0.9998410137 0.9998417960 0.9998435743 #> [2796] 0.9998447778 0.9998449489 0.9998455586 0.9998457601 0.9998463749 #> [2801] 0.9998479973 0.9998502429 0.9998504196 0.9998508078 0.9998524414 #> [2806] 0.9998530434 0.9998551597 0.9998565353 0.9998569536 0.9998572579 #> [2811] 0.9998591122 0.9998598388 0.9998601993 0.9998607778 0.9998614326 #> [2816] 0.9998620650 0.9998643170 0.9998674859 0.9998676947 0.9998678776 #> [2821] 0.9998690988 0.9998695454 0.9998721412 0.9998727027 0.9998728227 #> [2826] 0.9998736945 0.9998740319 0.9998741255 0.9998744578 0.9998790200 #> [2831] 0.9998796336 0.9998807689 0.9998808144 0.9998847207 0.9998847815 #> [2836] 0.9998849221 0.9998850929 0.9998853710 0.9998858269 0.9998861461 #> [2841] 0.9998882918 0.9998883350 0.9998894104 0.9998910296 0.9998911970 #> [2846] 0.9998918100 0.9998940481 0.9998944915 0.9998949284 0.9998957316 #> [2851] 0.9998972886 0.9998976839 0.9998986393 0.9999004537 0.9999006150 #> [2856] 0.9999027644 0.9999032365 0.9999039587 0.9999042478 0.9999054809 #> [2861] 0.9999071031 0.9999073811 0.9999073978 0.9999074062 0.9999074308 #> [2866] 0.9999076947 0.9999085924 0.9999096394 0.9999096483 0.9999105059 #> [2871] 0.9999118938 0.9999132961 0.9999140847 0.9999142181 0.9999146074 #> [2876] 0.9999156827 0.9999160212 0.9999166929 0.9999174555 0.9999178185 #> [2881] 0.9999186435 0.9999190130 0.9999200020 0.9999205853 0.9999206730 #> [2886] 0.9999208230 0.9999226885 0.9999231321 0.9999243487 0.9999244639 #> [2891] 0.9999255876 0.9999259570 0.9999260780 0.9999271879 0.9999281148 #> [2896] 0.9999283088 0.9999285712 0.9999287580 0.9999290937 0.9999293040 #> [2901] 0.9999295525 0.9999302327 0.9999303451 0.9999305410 0.9999308973 #> [2906] 0.9999315471 0.9999317051 0.9999323089 0.9999327838 0.9999330898 #> [2911] 0.9999332474 0.9999340062 0.9999348425 0.9999350544 0.9999352924 #> [2916] 0.9999356505 0.9999356683 0.9999365383 0.9999374691 0.9999375990 #> [2921] 0.9999376432 0.9999378761 0.9999381838 0.9999396521 0.9999444537 #> [2926] 0.9999444994 0.9999452576 0.9999463363 0.9999469783 0.9999475553 #> [2931] 0.9999478462 0.9999484580 0.9999491766 0.9999502064 0.9999508137 #> [2936] 0.9999510173 0.9999514587 0.9999529156 0.9999531322 0.9999532029 #> [2941] 0.9999533511 0.9999536572 0.9999538203 0.9999542587 0.9999560803 #> [2946] 0.9999576025 0.9999577597 0.9999579921 0.9999579956 0.9999581188 #> [2951] 0.9999583806 0.9999592653 0.9999593218 0.9999593286 0.9999598798 #> [2956] 0.9999621258 0.9999625247 0.9999635258 0.9999642972 0.9999650220 #> [2961] 0.9999660666 0.9999661412 0.9999664948 0.9999667925 0.9999673195 #> [2966] 0.9999682441 0.9999690014 0.9999693868 0.9999694916 0.9999706254 #> [2971] 0.9999709074 0.9999717152 0.9999720783 0.9999726333 0.9999730645 #> [2976] 0.9999731289 0.9999738926 0.9999739589 0.9999749655 0.9999783206 #> [2981] 0.9999797449 0.9999804468 0.9999814854 0.9999845468 0.9999850660 #> [2986] 0.9999865772 0.9999878996 0.9999881513 0.9999882465 0.9999892870 #> [2991] 0.9999901929 0.9999904793 0.9999930028 0.9999931566 0.9999931758 #> [2996] 0.9999942057 0.9999980754 0.9999984538 0.9999986603 0.9999988162 #>  #> $Freqb #>    [1] 0.0004676887 0.0013067401 0.0016553234 0.0023230373 0.0035622760 #>    [6] 0.0046215482 0.0049187329 0.0058726792 0.0067328018 0.0079282007 #>   [11] 0.0081209714 0.0085169475 0.0088202477 0.0091160286 0.0091967812 #>   [16] 0.0095884332 0.0098499824 0.0133491807 0.0146923948 0.0152755166 #>   [21] 0.0168146797 0.0174933859 0.0175145475 0.0188124069 0.0196068493 #>   [26] 0.0199616607 0.0203134754 0.0227609067 0.0242277034 0.0247018127 #>   [31] 0.0259561984 0.0259566083 0.0264043452 0.0274009979 0.0277432978 #>   [36] 0.0293984713 0.0296927002 0.0334994359 0.0335286782 0.0347233566 #>   [41] 0.0357515326 0.0362880799 0.0363756375 0.0366805865 0.0368004867 #>   [46] 0.0373685929 0.0387916147 0.0407371470 0.0407806278 0.0418254910 #>   [51] 0.0420246466 0.0443574246 0.0455933662 0.0472935213 0.0475666109 #>   [56] 0.0483201821 0.0500925627 0.0501622227 0.0502896971 0.0503636540 #>   [61] 0.0507306014 0.0507884621 0.0515656107 0.0516546390 0.0518255683 #>   [66] 0.0524229797 0.0527732102 0.0541481700 0.0563350110 0.0571681205 #>   [71] 0.0572110179 0.0574023181 0.0581875438 0.0585363185 0.0587941470 #>   [76] 0.0602891843 0.0605973065 0.0620315862 0.0627348368 0.0636186298 #>   [81] 0.0639959917 0.0643257194 0.0649891037 0.0651171863 0.0682002770 #>   [86] 0.0682898927 0.0689188422 0.0691701256 0.0701878738 0.0707382092 #>   [91] 0.0712222439 0.0716448306 0.0721779932 0.0729724348 0.0743760178 #>   [96] 0.0760553602 0.0763481894 0.0765110603 0.0779177675 0.0783104200 #>  [101] 0.0796055865 0.0815435467 0.0824039664 0.0827291431 0.0835195714 #>  [106] 0.0837081542 0.0839606727 0.0852186895 0.0864078305 0.0875772742 #>  [111] 0.0881851300 0.0882040361 0.0893968198 0.0900826868 0.0910402377 #>  [116] 0.0938530866 0.0943962910 0.0950293109 0.0954119809 0.0956044316 #>  [121] 0.0965531650 0.0977934138 0.0980403663 0.0982729041 0.0983262244 #>  [126] 0.1003258116 0.1041921322 0.1048433206 0.1050707257 0.1061339656 #>  [131] 0.1091349259 0.1099095828 0.1100849249 0.1108190999 0.1110627283 #>  [136] 0.1131449658 0.1156929388 0.1165235032 0.1165848149 0.1177098961 #>  [141] 0.1208829764 0.1228656409 0.1236090967 0.1236240073 0.1245185681 #>  [146] 0.1249582949 0.1255661117 0.1256702210 0.1260883871 0.1276812938 #>  [151] 0.1278767603 0.1291089428 0.1292440665 0.1292888942 0.1296001510 #>  [156] 0.1296121665 0.1304646461 0.1310358461 0.1319860521 0.1324288746 #>  [161] 0.1325016947 0.1350543100 0.1354178713 0.1355260946 0.1357476372 #>  [166] 0.1360487564 0.1368733052 0.1372364815 0.1379621524 0.1383977373 #>  [171] 0.1385963677 0.1405182871 0.1405791995 0.1413928330 0.1423426005 #>  [176] 0.1447924999 0.1456415820 0.1470464872 0.1474058078 0.1491913577 #>  [181] 0.1505671484 0.1521850732 0.1529914900 0.1532352734 0.1533556459 #>  [186] 0.1534999685 0.1542055481 0.1554300908 0.1563758063 0.1607069600 #>  [191] 0.1609733654 0.1613421579 0.1619531750 0.1627606177 0.1652395208 #>  [196] 0.1658205415 0.1661351986 0.1666186420 0.1670618546 0.1671479404 #>  [201] 0.1683242466 0.1683607927 0.1701724122 0.1704557272 0.1711095644 #>  [206] 0.1714406674 0.1723351165 0.1726609425 0.1732763847 0.1736500722 #>  [211] 0.1756763627 0.1761891672 0.1763208387 0.1769992468 0.1781781838 #>  [216] 0.1782243095 0.1793923451 0.1795154487 0.1795364177 0.1801604068 #>  [221] 0.1809160000 0.1811569925 0.1822181454 0.1823616862 0.1828105213 #>  [226] 0.1835680290 0.1848728423 0.1872417726 0.1895431576 0.1897282147 #>  [231] 0.1909630684 0.1919283668 0.1923762936 0.1942895696 0.1955556886 #>  [236] 0.1958951871 0.1968059437 0.1969764852 0.1990572861 0.1997999208 #>  [241] 0.2002851758 0.2007222940 0.2012371178 0.2018285043 0.2050273997 #>  [246] 0.2055925978 0.2069305963 0.2071958687 0.2079028812 0.2082965567 #>  [251] 0.2084328522 0.2093746522 0.2095611184 0.2098858149 0.2100572069 #>  [256] 0.2117016155 0.2117583258 0.2125758764 0.2127132709 0.2153390214 #>  [261] 0.2155540346 0.2172230901 0.2199314812 0.2200863495 0.2203759466 #>  [266] 0.2205833653 0.2208485736 0.2209060754 0.2227031997 0.2227918399 #>  [271] 0.2229233089 0.2244885091 0.2247678852 0.2259753360 0.2271139427 #>  [276] 0.2272084740 0.2280070689 0.2283615627 0.2304646619 0.2309244677 #>  [281] 0.2318558431 0.2319954568 0.2338980853 0.2340501740 0.2347255300 #>  [286] 0.2363234898 0.2369775322 0.2371371985 0.2378254182 0.2380073422 #>  [291] 0.2382920959 0.2387319155 0.2389503514 0.2389522699 0.2416058484 #>  [296] 0.2417470788 0.2424187293 0.2435896910 0.2447523577 0.2452765919 #>  [301] 0.2456608052 0.2463018076 0.2464736897 0.2476363412 0.2486277434 #>  [306] 0.2487220557 0.2491873983 0.2506338644 0.2508818932 0.2513587581 #>  [311] 0.2515415562 0.2515806178 0.2516309096 0.2534674166 0.2536778851 #>  [316] 0.2556982490 0.2557296646 0.2560180809 0.2579371434 0.2597281147 #>  [321] 0.2599938883 0.2600882469 0.2619400309 0.2623846843 0.2644558377 #>  [326] 0.2657618903 0.2664612367 0.2666939467 0.2692032152 0.2709141040 #>  [331] 0.2715518446 0.2725001692 0.2727949973 0.2728407011 0.2744096106 #>  [336] 0.2748166347 0.2755001327 0.2758793033 0.2764572914 0.2770424256 #>  [341] 0.2780842478 0.2782358243 0.2795827402 0.2798180393 0.2805125650 #>  [346] 0.2819238240 0.2826308487 0.2828303404 0.2834534444 0.2836973312 #>  [351] 0.2862992029 0.2874424006 0.2884268997 0.2890284482 0.2897763682 #>  [356] 0.2902661793 0.2914672867 0.2917100914 0.2922226512 0.2929596142 #>  [361] 0.2929854565 0.2944225162 0.2944458286 0.2948475938 0.2951770414 #>  [366] 0.2971473371 0.2971544181 0.2995237587 0.3013484898 0.3016117022 #>  [371] 0.3017791988 0.3029312944 0.3036354145 0.3036919267 0.3038313310 #>  [376] 0.3040221164 0.3049294449 0.3059871154 0.3062487853 0.3065220870 #>  [381] 0.3067617549 0.3076894633 0.3080769801 0.3081192312 0.3105167208 #>  [386] 0.3130173289 0.3140529943 0.3160796597 0.3160906134 0.3194432134 #>  [391] 0.3199888222 0.3201998826 0.3219171923 0.3228277600 0.3236953911 #>  [396] 0.3242938606 0.3246090144 0.3259788037 0.3260766670 0.3264325184 #>  [401] 0.3267232155 0.3279024198 0.3284019392 0.3286010429 0.3293890059 #>  [406] 0.3302850825 0.3305917497 0.3313228892 0.3317979893 0.3322168627 #>  [411] 0.3329644801 0.3347646866 0.3348120404 0.3349921017 0.3359949928 #>  [416] 0.3364350571 0.3370084623 0.3392229122 0.3401017415 0.3403359632 #>  [421] 0.3404714288 0.3423576899 0.3436262959 0.3437909012 0.3446253453 #>  [426] 0.3452233962 0.3452539031 0.3453692385 0.3456153644 0.3476806177 #>  [431] 0.3490465434 0.3492352204 0.3517122780 0.3517225436 0.3522065605 #>  [436] 0.3523125083 0.3529303225 0.3535347423 0.3544862200 0.3545847815 #>  [441] 0.3547990388 0.3577169946 0.3594109886 0.3600736871 0.3604024747 #>  [446] 0.3608461193 0.3611675561 0.3614072117 0.3616739805 0.3621390015 #>  [451] 0.3626251502 0.3641486373 0.3642551449 0.3644914275 0.3648325309 #>  [456] 0.3665648291 0.3672167014 0.3677540960 0.3684031526 0.3692081996 #>  [461] 0.3696350823 0.3703076675 0.3756336713 0.3777900291 0.3780017084 #>  [466] 0.3788322790 0.3807767176 0.3821396561 0.3821709861 0.3823843320 #>  [471] 0.3829630852 0.3839624504 0.3856878829 0.3866161900 0.3869697512 #>  [476] 0.3871036129 0.3872619371 0.3884142973 0.3889728817 0.3895980947 #>  [481] 0.3901227056 0.3901334063 0.3906622797 0.3914132463 0.3918141611 #>  [486] 0.3930504327 0.3933692447 0.3947435155 0.3950372962 0.3952342668 #>  [491] 0.3953749243 0.3965183388 0.3968332150 0.3977736586 0.3990039400 #>  [496] 0.3993862736 0.3995243638 0.4002974619 0.4007996600 0.4017016469 #>  [501] 0.4018165192 0.4020861907 0.4039527857 0.4044231458 0.4068856014 #>  [506] 0.4072314932 0.4088968928 0.4090808509 0.4104535443 0.4111859509 #>  [511] 0.4116158815 0.4118300682 0.4119735805 0.4124066550 0.4125833193 #>  [516] 0.4129662889 0.4140083964 0.4155730701 0.4174709226 0.4188953113 #>  [521] 0.4195474223 0.4205986170 0.4226006820 0.4238458363 0.4240354395 #>  [526] 0.4240935614 0.4266926636 0.4274861895 0.4282098507 0.4283694483 #>  [531] 0.4305967876 0.4314358027 0.4320780238 0.4322803861 0.4326132813 #>  [536] 0.4326913248 0.4334599079 0.4342464028 0.4351273836 0.4356596288 #>  [541] 0.4362041039 0.4381074535 0.4406226705 0.4425192938 0.4427131563 #>  [546] 0.4433819594 0.4434076552 0.4434436086 0.4446262595 0.4447938935 #>  [551] 0.4461330874 0.4461915230 0.4476098763 0.4477534714 0.4480010310 #>  [556] 0.4482053814 0.4502125762 0.4507589316 0.4524133362 0.4525580124 #>  [561] 0.4537384294 0.4552513007 0.4558410134 0.4559320236 0.4575137086 #>  [566] 0.4580745061 0.4602449514 0.4604740674 0.4629055914 0.4631554719 #>  [571] 0.4652032165 0.4656027822 0.4659591205 0.4681759977 0.4709871802 #>  [576] 0.4710307065 0.4712196732 0.4712524821 0.4732361140 0.4747934909 #>  [581] 0.4758155015 0.4774599454 0.4777004687 0.4783449494 0.4805925304 #>  [586] 0.4808523851 0.4814379886 0.4823531442 0.4826517216 0.4831501819 #>  [591] 0.4842707627 0.4861445953 0.4871407639 0.4874507418 0.4894617075 #>  [596] 0.4912231783 0.4913901353 0.4953003200 0.4965047924 0.4977826218 #>  [601] 0.4993786220 0.5000991563 0.5005317211 0.5007893250 0.5009154104 #>  [606] 0.5017322081 0.5018488711 0.5022288641 0.5045313105 0.5045563319 #>  [611] 0.5049053412 0.5050223055 0.5050775859 0.5057892959 0.5073921819 #>  [616] 0.5083410943 0.5085455603 0.5093164813 0.5101715479 0.5109606471 #>  [621] 0.5109648152 0.5115535441 0.5128625602 0.5128835585 0.5134422891 #>  [626] 0.5142636068 0.5143309986 0.5147263153 0.5153140411 0.5160626417 #>  [631] 0.5165425149 0.5173807441 0.5185783690 0.5190999091 0.5192415653 #>  [636] 0.5197908904 0.5207120417 0.5211659228 0.5213816423 0.5229657092 #>  [641] 0.5242180225 0.5250059193 0.5251058329 0.5254083520 0.5263371462 #>  [646] 0.5275689544 0.5293496004 0.5293582722 0.5299724307 0.5302684413 #>  [651] 0.5312427372 0.5318462765 0.5336123241 0.5338405526 0.5341630950 #>  [656] 0.5350570798 0.5360671063 0.5363506309 0.5365252450 0.5386246429 #>  [661] 0.5402189028 0.5424090973 0.5430815099 0.5435004856 0.5441967460 #>  [666] 0.5449946945 0.5450901023 0.5452613834 0.5461019512 0.5463811224 #>  [671] 0.5467333661 0.5474530419 0.5476768339 0.5479390665 0.5508740452 #>  [676] 0.5514179902 0.5524071678 0.5526302494 0.5527008380 0.5531381657 #>  [681] 0.5531499756 0.5544962686 0.5547827269 0.5556684600 0.5576514238 #>  [686] 0.5576768145 0.5602046543 0.5602681935 0.5613038169 0.5618157899 #>  [691] 0.5619067418 0.5627071570 0.5630183275 0.5635927791 0.5637947648 #>  [696] 0.5639207512 0.5648416746 0.5650033505 0.5667451819 0.5679092380 #>  [701] 0.5679786547 0.5681831079 0.5682306768 0.5698714854 0.5714254182 #>  [706] 0.5724280443 0.5728255857 0.5744643833 0.5744786103 0.5748713617 #>  [711] 0.5754679729 0.5770973686 0.5784475869 0.5798327989 0.5811711776 #>  [716] 0.5819050418 0.5822204407 0.5831220588 0.5839339089 0.5846492092 #>  [721] 0.5853914734 0.5869716523 0.5873390025 0.5874044323 0.5875335136 #>  [726] 0.5879616538 0.5881239464 0.5924702440 0.5925083575 0.5945078535 #>  [731] 0.5946127020 0.5962478970 0.5965902322 0.5977999685 0.5985036592 #>  [736] 0.5987278113 0.5995897863 0.5996732657 0.6001650539 0.6003479620 #>  [741] 0.6007706525 0.6014807793 0.6016246242 0.6017361190 0.6018670847 #>  [746] 0.6029619234 0.6056089525 0.6069988169 0.6086466020 0.6091186660 #>  [751] 0.6098741502 0.6101633629 0.6105164180 0.6124234381 0.6126466766 #>  [756] 0.6143421777 0.6157522307 0.6174450672 0.6174470725 0.6179379227 #>  [761] 0.6190416462 0.6203096065 0.6205179148 0.6213840534 0.6225364567 #>  [766] 0.6227646626 0.6228125235 0.6238066558 0.6238492659 0.6243454931 #>  [771] 0.6246587007 0.6264295850 0.6271531469 0.6272384329 0.6273836285 #>  [776] 0.6300287887 0.6320431390 0.6329068220 0.6331538284 0.6341528778 #>  [781] 0.6348573091 0.6370655271 0.6377846523 0.6381039060 0.6389832139 #>  [786] 0.6396867783 0.6409102033 0.6419492052 0.6421014157 0.6438424216 #>  [791] 0.6441690376 0.6449124930 0.6452177536 0.6454519582 0.6456346266 #>  [796] 0.6459085005 0.6471630829 0.6500242019 0.6503522628 0.6513129416 #>  [801] 0.6515639779 0.6518020082 0.6528650769 0.6533088193 0.6538331499 #>  [806] 0.6539392637 0.6557267237 0.6569540318 0.6572230074 0.6579423788 #>  [811] 0.6593803937 0.6621352135 0.6642976710 0.6647427822 0.6649793864 #>  [816] 0.6650128283 0.6651224512 0.6658314614 0.6671321039 0.6680558278 #>  [821] 0.6691045047 0.6692626731 0.6701913353 0.6706545659 0.6708699246 #>  [826] 0.6723969810 0.6728308602 0.6740106718 0.6745742761 0.6752637774 #>  [831] 0.6753364130 0.6761092814 0.6773627294 0.6774272180 0.6776587923 #>  [836] 0.6780471838 0.6785575049 0.6817566591 0.6818829582 0.6834541558 #>  [841] 0.6841470864 0.6859576851 0.6873410250 0.6874645024 0.6879214555 #>  [846] 0.6895887181 0.6896302745 0.6907611215 0.6927318309 0.6930901309 #>  [851] 0.6942103756 0.6946398481 0.6947841202 0.6965214619 0.6966907624 #>  [856] 0.6970244206 0.6984472805 0.6993621444 0.6994036586 0.6994470236 #>  [861] 0.7004680003 0.7012293191 0.7023130809 0.7027276438 0.7050810139 #>  [866] 0.7051297312 0.7055104181 0.7058418553 0.7072586852 0.7076176319 #>  [871] 0.7083012895 0.7086599428 0.7092076082 0.7107771935 0.7117588776 #>  [876] 0.7124565112 0.7124854996 0.7134283174 0.7138993785 0.7147510372 #>  [881] 0.7149194555 0.7161602922 0.7189238837 0.7211265361 0.7216566390 #>  [886] 0.7216727528 0.7216817031 0.7236247055 0.7237049195 0.7239940535 #>  [891] 0.7240979663 0.7242327667 0.7243450023 0.7248795757 0.7263177649 #>  [896] 0.7282051884 0.7282432890 0.7294357684 0.7296325082 0.7307442297 #>  [901] 0.7325726117 0.7327607457 0.7330094453 0.7330881523 0.7332709171 #>  [906] 0.7345833035 0.7364211811 0.7390099113 0.7397565259 0.7399666503 #>  [911] 0.7450749106 0.7467053013 0.7467317223 0.7476566708 0.7492537244 #>  [916] 0.7509097642 0.7524484476 0.7525336930 0.7538485838 0.7539775191 #>  [921] 0.7542639446 0.7550765432 0.7552860621 0.7553949732 0.7582852557 #>  [926] 0.7593050286 0.7604268396 0.7607079293 0.7607345465 0.7625605352 #>  [931] 0.7633802485 0.7643548654 0.7647953453 0.7651156487 0.7662002336 #>  [936] 0.7674898081 0.7700052568 0.7703384163 0.7705309050 0.7726158695 #>  [941] 0.7726169132 0.7738132409 0.7743876312 0.7750494200 0.7752052474 #>  [946] 0.7782443201 0.7787165151 0.7789265992 0.7800383945 0.7806991920 #>  [951] 0.7813591019 0.7823381005 0.7823911583 0.7827983387 0.7829109588 #>  [956] 0.7843319337 0.7844884788 0.7845678283 0.7851722210 0.7857851593 #>  [961] 0.7863910286 0.7865127125 0.7867678893 0.7867887482 0.7896249559 #>  [966] 0.7899012545 0.7902443309 0.7904814569 0.7905860118 0.7909888204 #>  [971] 0.7933511404 0.7941674426 0.7945254190 0.7974076818 0.7997989014 #>  [976] 0.8002457693 0.8036642087 0.8069398317 0.8070169656 0.8076813760 #>  [981] 0.8085720291 0.8093076987 0.8098807712 0.8110680921 0.8122110176 #>  [986] 0.8131046015 0.8144713099 0.8153341901 0.8162374117 0.8170976456 #>  [991] 0.8182702495 0.8196691906 0.8205145908 0.8211781977 0.8237638819 #>  [996] 0.8239250392 0.8265251871 0.8265654963 0.8277794117 0.8290444623 #> [1001] 0.8292178723 0.8296528151 0.8302772288 0.8308792354 0.8313412858 #> [1006] 0.8313619402 0.8314776049 0.8323040025 0.8327673324 0.8342250922 #> [1011] 0.8345165931 0.8350899960 0.8351662534 0.8357213778 0.8357539618 #> [1016] 0.8384586400 0.8406061997 0.8411394227 0.8428107646 0.8445806485 #> [1021] 0.8448178838 0.8451803427 0.8458865175 0.8467392127 0.8476768189 #> [1026] 0.8493919992 0.8498885341 0.8503345756 0.8505050558 0.8505186116 #> [1031] 0.8514134163 0.8517053679 0.8517186642 0.8523721689 0.8523872565 #> [1036] 0.8527049355 0.8583438155 0.8583623864 0.8592791779 0.8594910007 #> [1041] 0.8601445252 0.8605044634 0.8628584504 0.8638611493 0.8644697712 #> [1046] 0.8652818329 0.8653117506 0.8655777886 0.8655849366 0.8698725507 #> [1051] 0.8700824890 0.8704104632 0.8711283110 0.8715476893 0.8719759484 #> [1056] 0.8734749198 0.8738836368 0.8744641751 0.8766089038 0.8770417878 #> [1061] 0.8785784982 0.8791633720 0.8798115431 0.8808121438 0.8809078000 #> [1066] 0.8813677181 0.8822547932 0.8841601098 0.8846903973 0.8857548862 #> [1071] 0.8858517568 0.8862135342 0.8862499030 0.8877288439 0.8884167353 #> [1076] 0.8893800684 0.8895733274 0.8900666641 0.8918253266 0.8935384130 #> [1081] 0.8935622772 0.8938532779 0.8949005425 0.8963424066 0.8981677772 #> [1086] 0.8989210914 0.9000650734 0.9021079704 0.9021836021 0.9040177817 #> [1091] 0.9044709625 0.9049319634 0.9051205535 0.9076269577 0.9092219568 #> [1096] 0.9095711767 0.9096952798 0.9098324045 0.9116063055 0.9137184730 #> [1101] 0.9144510859 0.9154324787 0.9156469980 0.9173283238 0.9179742824 #> [1106] 0.9187813479 0.9190680155 0.9195280847 0.9196925780 0.9215919012 #> [1111] 0.9218638686 0.9219439807 0.9229318685 0.9233276693 0.9233963776 #> [1116] 0.9235139903 0.9239804931 0.9244144252 0.9248346153 0.9260910477 #> [1121] 0.9264004865 0.9266695449 0.9268765420 0.9276161887 0.9277472986 #> [1126] 0.9305104172 0.9306325187 0.9307833151 0.9321056826 0.9322252516 #> [1131] 0.9323645001 0.9332502583 0.9335518477 0.9339002538 0.9359331476 #> [1136] 0.9362815008 0.9368861733 0.9371314000 0.9389993315 0.9394619840 #> [1141] 0.9403740450 0.9426235894 0.9427231282 0.9438981498 0.9438993572 #> [1146] 0.9445044279 0.9453145669 0.9453632791 0.9459304029 0.9481440633 #> [1151] 0.9488183330 0.9488964880 0.9493519322 0.9501553722 0.9509410352 #> [1156] 0.9511610181 0.9511916591 0.9514898992 0.9517449252 0.9521991434 #> [1161] 0.9548794848 0.9554192685 0.9555049947 0.9572774915 0.9574685980 #> [1166] 0.9578304294 0.9582389404 0.9590568852 0.9593718766 0.9603170210 #> [1171] 0.9612667567 0.9620329383 0.9623453037 0.9633815902 0.9635947963 #> [1176] 0.9644233833 0.9650250607 0.9657851568 0.9663084953 0.9666467369 #> [1181] 0.9668193808 0.9668746576 0.9670639746 0.9677553129 0.9677757265 #> [1186] 0.9679960988 0.9681875042 0.9688203903 0.9688611348 0.9695259363 #> [1191] 0.9698223887 0.9699814486 0.9709001953 0.9710801789 0.9712518524 #> [1196] 0.9718756446 0.9722917581 0.9725312552 0.9727418294 0.9729619740 #> [1201] 0.9730223834 0.9730897798 0.9737088972 0.9745197881 0.9751215524 #> [1206] 0.9752270247 0.9752891039 0.9753320111 0.9756050615 0.9758304540 #> [1211] 0.9758748650 0.9759046067 0.9760563014 0.9761758104 0.9762174573 #> [1216] 0.9764405147 0.9768115150 0.9772787343 0.9777887321 0.9784799168 #> [1221] 0.9787536264 0.9791708046 0.9793312713 0.9796154121 0.9797412358 #> [1226] 0.9798266763 0.9800253112 0.9800439394 0.9800488572 0.9800769063 #> [1231] 0.9802168415 0.9802433642 0.9805899263 0.9806293407 0.9806906699 #> [1236] 0.9807552412 0.9809581901 0.9810050112 0.9810205442 0.9810762249 #> [1241] 0.9810911247 0.9811898955 0.9812463460 0.9813591186 0.9815363494 #> [1246] 0.9815707531 0.9816716011 0.9819618914 0.9819659763 0.9821895880 #> [1251] 0.9822586733 0.9824200629 0.9824522976 0.9825790811 0.9827908920 #> [1256] 0.9828243463 0.9828884502 0.9831231696 0.9835262213 0.9837413804 #> [1261] 0.9837658241 0.9838049909 0.9838206464 0.9838428896 0.9838731017 #> [1266] 0.9838948103 0.9841968031 0.9842614576 0.9842975369 0.9843981467 #> [1271] 0.9844735776 0.9847561879 0.9847722991 0.9848716471 0.9851213193 #> [1276] 0.9851471008 0.9852290480 0.9852415968 0.9852451361 0.9854992706 #> [1281] 0.9856323546 0.9856624562 0.9858228272 0.9858350297 0.9858620725 #> [1286] 0.9858674214 0.9858693070 0.9858834323 0.9858944283 0.9860493885 #> [1291] 0.9860738287 0.9861781160 0.9862724256 0.9865420900 0.9865859269 #> [1296] 0.9867009742 0.9868828564 0.9870743618 0.9872198100 0.9872402509 #> [1301] 0.9872612909 0.9876254553 0.9877120747 0.9877395733 0.9878527390 #> [1306] 0.9879104835 0.9879391258 0.9880668192 0.9880731981 0.9881712386 #> [1311] 0.9882245239 0.9882963315 0.9883071265 0.9884072915 0.9884916367 #> [1316] 0.9885027423 0.9885102059 0.9887852317 0.9888298412 0.9889029193 #> [1321] 0.9891527326 0.9892678927 0.9893132789 0.9893291297 0.9893297404 #> [1326] 0.9894723512 0.9894955498 0.9895219667 0.9895868776 0.9895883910 #> [1331] 0.9896806819 0.9896999464 0.9897331333 0.9897706956 0.9898110581 #> [1336] 0.9898208012 0.9898676522 0.9899010381 0.9899641668 0.9901085517 #> [1341] 0.9902026748 0.9902030985 0.9902162453 0.9903838445 0.9905456454 #> [1346] 0.9905693748 0.9906577471 0.9906683029 0.9907042764 0.9907107407 #> [1351] 0.9907592466 0.9907740466 0.9909159745 0.9909617741 0.9910168866 #> [1356] 0.9910545890 0.9910772474 0.9910836624 0.9911003436 0.9911647642 #> [1361] 0.9911954065 0.9912010196 0.9912424224 0.9913038474 0.9913172418 #> [1366] 0.9913280670 0.9913467243 0.9913635582 0.9913666260 0.9913915906 #> [1371] 0.9914561261 0.9914664271 0.9915514203 0.9915763857 0.9915792321 #> [1376] 0.9916413542 0.9916585009 0.9916770123 0.9916851175 0.9917256512 #> [1381] 0.9917719079 0.9917963276 0.9918067424 0.9918123901 0.9918656461 #> [1386] 0.9918692010 0.9918893428 0.9919016705 0.9919321311 0.9919768656 #> [1391] 0.9920251010 0.9920417512 0.9920478037 0.9921829178 0.9922615828 #> [1396] 0.9923684410 0.9924138334 0.9924805794 0.9925013827 0.9925274256 #> [1401] 0.9925294011 0.9925476161 0.9925808946 0.9925946265 0.9925980159 #> [1406] 0.9926370078 0.9926430481 0.9927022479 0.9927367043 0.9927417483 #> [1411] 0.9929254414 0.9929369424 0.9929688641 0.9930026205 0.9930286298 #> [1416] 0.9930346284 0.9930406279 0.9930701252 0.9931124072 0.9931155969 #> [1421] 0.9931300133 0.9931412248 0.9931436507 0.9931829295 0.9931927371 #> [1426] 0.9932594318 0.9932879372 0.9933190814 0.9933294689 0.9933407174 #> [1431] 0.9933595084 0.9933917339 0.9934031131 0.9934228998 0.9934423969 #> [1436] 0.9934426850 0.9934585228 0.9934660176 0.9935121120 0.9935200243 #> [1441] 0.9935256887 0.9935330110 0.9935459114 0.9935808207 0.9935836850 #> [1446] 0.9935838311 0.9935958075 0.9936152930 0.9936212343 0.9936254093 #> [1451] 0.9936522144 0.9936559072 0.9936678628 0.9937165450 0.9937264324 #> [1456] 0.9937609699 0.9937632337 0.9937784541 0.9937820979 0.9937861953 #> [1461] 0.9937994013 0.9938220854 0.9938544218 0.9938618469 0.9938618765 #> [1466] 0.9938632145 0.9938738783 0.9939136568 0.9939216513 0.9939474529 #> [1471] 0.9939488831 0.9940097050 0.9940240997 0.9940747622 0.9940790672 #> [1476] 0.9940840505 0.9941293869 0.9941405907 0.9941661379 0.9942000500 #> [1481] 0.9942138173 0.9942471031 0.9942542505 0.9942610241 0.9942620022 #> [1486] 0.9942665643 0.9942975606 0.9943068155 0.9943128379 0.9943155880 #> [1491] 0.9943476788 0.9943910057 0.9944132775 0.9944145148 0.9944188115 #> [1496] 0.9944367561 0.9944407665 0.9944439246 0.9944452768 0.9944456907 #> [1501] 0.9944656708 0.9944729012 0.9945171050 0.9945466800 0.9945473490 #> [1506] 0.9945650718 0.9945671792 0.9945816936 0.9945927382 0.9946136306 #> [1511] 0.9946174223 0.9946327086 0.9946519009 0.9946524329 0.9946757291 #> [1516] 0.9946787647 0.9946835105 0.9946869463 0.9946964405 0.9947270551 #> [1521] 0.9947274204 0.9947360698 0.9947473265 0.9947849552 0.9948315415 #> [1526] 0.9948947878 0.9948960193 0.9949078981 0.9949260068 0.9949435441 #> [1531] 0.9949541145 0.9949654933 0.9949841333 0.9950214622 0.9950262339 #> [1536] 0.9950339576 0.9950428430 0.9950501009 0.9950529215 0.9950541095 #> [1541] 0.9950903152 0.9951219962 0.9951319775 0.9951427106 0.9951444194 #> [1546] 0.9951519894 0.9951634089 0.9951665829 0.9951679325 0.9951878768 #> [1551] 0.9952122507 0.9952317793 0.9952635111 0.9952747545 0.9952778576 #> [1556] 0.9952881109 0.9952948482 0.9953126525 0.9953162515 0.9953196852 #> [1561] 0.9953282229 0.9953285508 0.9953384751 0.9953402486 0.9953516870 #> [1566] 0.9953722886 0.9953924300 0.9954354926 0.9954613657 0.9954621322 #> [1571] 0.9954767454 0.9955046371 0.9955079699 0.9955120602 0.9955184315 #> [1576] 0.9955469876 0.9955473912 0.9955484985 0.9955645987 0.9955947317 #> [1581] 0.9955959773 0.9955965067 0.9956011318 0.9956014945 0.9956099835 #> [1586] 0.9956109698 0.9956122754 0.9956227592 0.9956291556 0.9956352233 #> [1591] 0.9956416639 0.9956437993 0.9956546592 0.9956555204 0.9956752391 #> [1596] 0.9956952209 0.9957118726 0.9957126495 0.9957173714 0.9957177196 #> [1601] 0.9957289111 0.9957389052 0.9957397371 0.9957596375 0.9957654967 #> [1606] 0.9957821178 0.9957823347 0.9958159892 0.9958223088 0.9958264571 #> [1611] 0.9958333240 0.9958597148 0.9958598333 0.9958787232 0.9958798743 #> [1616] 0.9958849023 0.9958931619 0.9958947305 0.9959014321 0.9959094350 #> [1621] 0.9959141991 0.9959308997 0.9959354557 0.9959380844 0.9959404417 #> [1626] 0.9959580966 0.9959581517 0.9959675299 0.9959684590 0.9959917232 #> [1631] 0.9959983379 0.9960074227 0.9960204376 0.9960439047 0.9960468211 #> [1636] 0.9960564503 0.9960580886 0.9960664923 0.9960681506 0.9960750515 #> [1641] 0.9961499411 0.9961687519 0.9961832106 0.9961984269 0.9962010186 #> [1646] 0.9962260882 0.9962270169 0.9962289938 0.9962323090 0.9962527724 #> [1651] 0.9962534412 0.9962621582 0.9962889837 0.9963055313 0.9963087016 #> [1656] 0.9963150534 0.9963228511 0.9963383641 0.9963560101 0.9963597621 #> [1661] 0.9963618934 0.9963764420 0.9963838529 0.9963960986 0.9963982022 #> [1666] 0.9964182749 0.9964204158 0.9964435599 0.9964592723 0.9964612432 #> [1671] 0.9964719005 0.9964741672 0.9964809591 0.9965009728 0.9965017629 #> [1676] 0.9965108357 0.9965374426 0.9965469843 0.9965550096 0.9965566767 #> [1681] 0.9965660371 0.9965753918 0.9965769757 0.9965787439 0.9965846443 #> [1686] 0.9965871005 0.9965878057 0.9965886867 0.9965975455 0.9966011410 #> [1691] 0.9966131682 0.9966358239 0.9966430332 0.9966505114 0.9966525034 #> [1696] 0.9966550520 0.9966594991 0.9966767102 0.9966809991 0.9966952369 #> [1701] 0.9966964532 0.9967367054 0.9967395461 0.9967417918 0.9967576150 #> [1706] 0.9967728747 0.9967773195 0.9967801996 0.9967816116 0.9967910188 #> [1711] 0.9968044175 0.9968122615 0.9968163861 0.9968268023 0.9968277053 #> [1716] 0.9968374312 0.9968416915 0.9968817013 0.9968978717 0.9969109406 #> [1721] 0.9969213666 0.9969228551 0.9969253663 0.9969256671 0.9969429272 #> [1726] 0.9969461272 0.9969488479 0.9969700916 0.9969705768 0.9969744910 #> [1731] 0.9969750529 0.9969752737 0.9969805339 0.9969826999 0.9969975320 #> [1736] 0.9970008909 0.9970143196 0.9970174826 0.9970259211 0.9970280956 #> [1741] 0.9970288832 0.9970441201 0.9970464997 0.9970473834 0.9970526242 #> [1746] 0.9970580091 0.9970596271 0.9970601699 0.9970967336 0.9970983321 #> [1751] 0.9971010282 0.9971085855 0.9971111454 0.9971126956 0.9971187557 #> [1756] 0.9971282887 0.9971284780 0.9971294303 0.9971397379 0.9971475130 #> [1761] 0.9971562977 0.9971600693 0.9971729611 0.9971789049 0.9971812721 #> [1766] 0.9971833898 0.9971834998 0.9971847665 0.9971878257 0.9971962777 #> [1771] 0.9971981369 0.9972023274 0.9972040113 0.9972117026 0.9972159851 #> [1776] 0.9972379089 0.9972542196 0.9972565614 0.9972585331 0.9972645400 #> [1781] 0.9972759590 0.9972768500 0.9972825447 0.9972829283 0.9972846655 #> [1786] 0.9972870826 0.9973021734 0.9973212559 0.9973317953 0.9973367858 #> [1791] 0.9973494889 0.9973591772 0.9973662748 0.9973675384 0.9973775393 #> [1796] 0.9973792034 0.9973929023 0.9973973999 0.9973984319 0.9973993461 #> [1801] 0.9974087858 0.9974132111 0.9974156734 0.9974380859 0.9974425091 #> [1806] 0.9974447758 0.9974473299 0.9974484492 0.9974486436 0.9974603997 #> [1811] 0.9974636237 0.9974782306 0.9974895010 0.9974923117 0.9974929463 #> [1816] 0.9975024489 0.9975069097 0.9975153925 0.9975365789 0.9975502217 #> [1821] 0.9975586261 0.9975680987 0.9975692163 0.9975716241 0.9975810850 #> [1826] 0.9975823384 0.9975890580 0.9975928427 0.9976010465 0.9976111464 #> [1831] 0.9976245571 0.9976253504 0.9976332440 0.9976339242 0.9976431345 #> [1836] 0.9976437615 0.9976446649 0.9976600773 0.9976607519 0.9976617915 #> [1841] 0.9976668720 0.9976796580 0.9976801616 0.9976855448 0.9976855863 #> [1846] 0.9976894051 0.9976896258 0.9976940586 0.9976974151 0.9977032258 #> [1851] 0.9977033601 0.9977086343 0.9977118311 0.9977191461 0.9977299568 #> [1856] 0.9977340346 0.9977341942 0.9977348511 0.9977435354 0.9977516656 #> [1861] 0.9977537263 0.9977646873 0.9977668763 0.9977674026 0.9977968268 #> [1866] 0.9977990648 0.9977997174 0.9978020442 0.9978023675 0.9978041684 #> [1871] 0.9978119541 0.9978180683 0.9978221945 0.9978226171 0.9978264741 #> [1876] 0.9978273064 0.9978306705 0.9978504121 0.9978571381 0.9978591437 #> [1881] 0.9978609901 0.9978740014 0.9978801758 0.9978814224 0.9978921163 #> [1886] 0.9978938628 0.9979033036 0.9979148916 0.9979194772 0.9979213238 #> [1891] 0.9979259113 0.9979305653 0.9979306993 0.9979464030 0.9979516801 #> [1896] 0.9979601431 0.9979690796 0.9979708695 0.9979760093 0.9979820426 #> [1901] 0.9979859958 0.9979938982 0.9979991792 0.9980173901 0.9980202185 #> [1906] 0.9980225901 0.9980290519 0.9980331995 0.9980357491 0.9980471235 #> [1911] 0.9980573827 0.9980632290 0.9980651702 0.9980717259 0.9980746142 #> [1916] 0.9980828779 0.9980855500 0.9980950952 0.9980996481 0.9981017818 #> [1921] 0.9981032510 0.9981112954 0.9981168706 0.9981175908 0.9981195310 #> [1926] 0.9981265867 0.9981404143 0.9981412696 0.9981616283 0.9981655677 #> [1931] 0.9981691316 0.9981708482 0.9981748872 0.9981854082 0.9981910400 #> [1936] 0.9981915128 0.9981926369 0.9981951345 0.9981958010 0.9982055201 #> [1941] 0.9982072275 0.9982145010 0.9982147774 0.9982151042 0.9982160863 #> [1946] 0.9982163817 0.9982196741 0.9982243258 0.9982312220 0.9982344142 #> [1951] 0.9982353192 0.9982377119 0.9982386637 0.9982462925 0.9982535723 #> [1956] 0.9982547321 0.9982554406 0.9982582228 0.9982646285 0.9982685500 #> [1961] 0.9982691278 0.9982698307 0.9982701670 0.9982744059 0.9982745653 #> [1966] 0.9982762613 0.9982788716 0.9982823915 0.9982854904 0.9982904244 #> [1971] 0.9982979341 0.9983007570 0.9983076531 0.9983085974 0.9983109574 #> [1976] 0.9983123420 0.9983180760 0.9983188342 0.9983219804 0.9983267085 #> [1981] 0.9983282958 0.9983293570 0.9983298114 0.9983332780 0.9983357800 #> [1986] 0.9983378758 0.9983477344 0.9983509815 0.9983516143 0.9983537379 #> [1991] 0.9983578441 0.9983604082 0.9983621438 0.9983795793 0.9983843420 #> [1996] 0.9983964822 0.9983981068 0.9984015756 0.9984065546 0.9984074348 #> [2001] 0.9984099035 0.9984132881 0.9984149330 0.9984163653 0.9984164478 #> [2006] 0.9984208427 0.9984265181 0.9984316877 0.9984369860 0.9984390784 #> [2011] 0.9984410120 0.9984414478 0.9984437695 0.9984590440 0.9984688526 #> [2016] 0.9984752982 0.9984820776 0.9984844998 0.9984875914 0.9984929077 #> [2021] 0.9984933038 0.9984945925 0.9984976045 0.9985083428 0.9985085742 #> [2026] 0.9985114548 0.9985119736 0.9985151569 0.9985158759 0.9985168969 #> [2031] 0.9985243002 0.9985292463 0.9985371238 0.9985418998 0.9985478611 #> [2036] 0.9985488849 0.9985534466 0.9985556475 0.9985568997 0.9985578627 #> [2041] 0.9985583203 0.9985602488 0.9985655519 0.9985655557 0.9985659121 #> [2046] 0.9985668115 0.9985675710 0.9985690667 0.9985705717 0.9985726041 #> [2051] 0.9985805577 0.9985808586 0.9985909444 0.9985988713 0.9986019003 #> [2056] 0.9986077496 0.9986108081 0.9986137489 0.9986190711 0.9986206009 #> [2061] 0.9986216972 0.9986233277 0.9986248844 0.9986262270 0.9986285736 #> [2066] 0.9986291431 0.9986295191 0.9986345171 0.9986484375 0.9986560902 #> [2071] 0.9986561409 0.9986618151 0.9986630147 0.9986636316 0.9986670254 #> [2076] 0.9986760024 0.9986792762 0.9986801543 0.9986818883 0.9986820603 #> [2081] 0.9986859027 0.9986872163 0.9986873458 0.9986944410 0.9986960254 #> [2086] 0.9986984150 0.9986990439 0.9987037972 0.9987077064 0.9987100764 #> [2091] 0.9987175851 0.9987183762 0.9987189127 0.9987246195 0.9987265713 #> [2096] 0.9987272783 0.9987300672 0.9987310312 0.9987319101 0.9987323761 #> [2101] 0.9987356925 0.9987393539 0.9987405682 0.9987427446 0.9987442280 #> [2106] 0.9987443865 0.9987455774 0.9987467645 0.9987487140 0.9987504842 #> [2111] 0.9987557484 0.9987576946 0.9987599465 0.9987694683 0.9987701692 #> [2116] 0.9987703249 0.9987736839 0.9987748838 0.9987759037 0.9987775202 #> [2121] 0.9987807603 0.9987827521 0.9987848034 0.9987853734 0.9987906983 #> [2126] 0.9987907411 0.9987936629 0.9987988027 0.9988034191 0.9988061189 #> [2131] 0.9988081741 0.9988083289 0.9988112479 0.9988116097 0.9988127527 #> [2136] 0.9988150089 0.9988229010 0.9988242972 0.9988244992 0.9988282641 #> [2141] 0.9988290810 0.9988300942 0.9988325925 0.9988354833 0.9988417491 #> [2146] 0.9988444618 0.9988478819 0.9988487224 0.9988505942 0.9988532107 #> [2151] 0.9988566745 0.9988569891 0.9988599960 0.9988611867 0.9988622760 #> [2156] 0.9988635680 0.9988641628 0.9988652015 0.9988659460 0.9988683166 #> [2161] 0.9988710252 0.9988724779 0.9988732620 0.9988741661 0.9988812110 #> [2166] 0.9988823759 0.9988857162 0.9988900448 0.9988921329 0.9988924818 #> [2171] 0.9988998046 0.9989043731 0.9989048421 0.9989049424 0.9989105947 #> [2176] 0.9989112880 0.9989134851 0.9989139093 0.9989199086 0.9989236152 #> [2181] 0.9989272934 0.9989357710 0.9989359272 0.9989372872 0.9989438336 #> [2186] 0.9989511230 0.9989516198 0.9989518937 0.9989532863 0.9989595208 #> [2191] 0.9989625878 0.9989652476 0.9989658543 0.9989659249 0.9989686067 #> [2196] 0.9989689833 0.9989707337 0.9989742146 0.9989782225 0.9989804116 #> [2201] 0.9989859351 0.9989896563 0.9989947064 0.9989957633 0.9990010247 #> [2206] 0.9990074167 0.9990093974 0.9990097455 0.9990099638 0.9990139946 #> [2211] 0.9990140888 0.9990160277 0.9990174832 0.9990219303 0.9990226426 #> [2216] 0.9990233447 0.9990269588 0.9990271828 0.9990299130 0.9990303596 #> [2221] 0.9990315229 0.9990318234 0.9990431583 0.9990434528 0.9990455826 #> [2226] 0.9990476307 0.9990478645 0.9990485674 0.9990526575 0.9990533369 #> [2231] 0.9990552820 0.9990564223 0.9990587486 0.9990596305 0.9990650411 #> [2236] 0.9990663671 0.9990685254 0.9990716806 0.9990747077 0.9990766367 #> [2241] 0.9990772869 0.9990827843 0.9990856606 0.9990888112 0.9990891263 #> [2246] 0.9990916311 0.9990973815 0.9990979870 0.9991015880 0.9991027212 #> [2251] 0.9991031867 0.9991044422 0.9991052488 0.9991056350 0.9991061857 #> [2256] 0.9991096265 0.9991096731 0.9991123684 0.9991125393 0.9991132915 #> [2261] 0.9991134881 0.9991137197 0.9991216172 0.9991258836 0.9991276017 #> [2266] 0.9991278793 0.9991300984 0.9991309657 0.9991311520 0.9991318514 #> [2271] 0.9991331920 0.9991333929 0.9991359129 0.9991372958 0.9991379876 #> [2276] 0.9991385185 0.9991388159 0.9991391728 0.9991406034 0.9991431602 #> [2281] 0.9991446896 0.9991459527 0.9991466050 0.9991509517 0.9991519660 #> [2286] 0.9991556201 0.9991564028 0.9991569546 0.9991571567 0.9991576024 #> [2291] 0.9991579603 0.9991596178 0.9991598854 0.9991602470 0.9991607885 #> [2296] 0.9991653998 0.9991654672 0.9991668125 0.9991763743 0.9991778418 #> [2301] 0.9991780683 0.9991817684 0.9991832950 0.9991840434 0.9991853477 #> [2306] 0.9991887655 0.9991902276 0.9991916907 0.9991928782 0.9991967831 #> [2311] 0.9991999565 0.9992010754 0.9992022312 0.9992049792 0.9992054339 #> [2316] 0.9992085807 0.9992101321 0.9992104759 0.9992118910 0.9992131747 #> [2321] 0.9992152390 0.9992163393 0.9992175176 0.9992206427 0.9992230806 #> [2326] 0.9992258875 0.9992284372 0.9992303337 0.9992309105 0.9992330937 #> [2331] 0.9992337472 0.9992340838 0.9992350160 0.9992351211 0.9992352571 #> [2336] 0.9992356797 0.9992359271 0.9992387261 0.9992429425 0.9992474707 #> [2341] 0.9992482220 0.9992495850 0.9992505900 0.9992536682 0.9992538410 #> [2346] 0.9992540835 0.9992542144 0.9992559369 0.9992569742 0.9992570686 #> [2351] 0.9992610583 0.9992625608 0.9992670741 0.9992732432 0.9992733755 #> [2356] 0.9992760406 0.9992790353 0.9992819838 0.9992837528 0.9992850977 #> [2361] 0.9992863553 0.9992864968 0.9992873469 0.9992887646 0.9992919799 #> [2366] 0.9992932473 0.9992947900 0.9992976772 0.9992981290 0.9993021532 #> [2371] 0.9993059894 0.9993061471 0.9993129251 0.9993137838 0.9993152032 #> [2376] 0.9993153676 0.9993162721 0.9993172420 0.9993184713 0.9993260174 #> [2381] 0.9993324813 0.9993328651 0.9993330429 0.9993335529 0.9993338480 #> [2386] 0.9993355277 0.9993360052 0.9993363022 0.9993382814 0.9993389701 #> [2391] 0.9993394328 0.9993395997 0.9993445581 0.9993481684 0.9993488718 #> [2396] 0.9993492660 0.9993505909 0.9993531743 0.9993565203 0.9993589044 #> [2401] 0.9993599591 0.9993627565 0.9993628546 0.9993629439 0.9993629544 #> [2406] 0.9993662526 0.9993665970 0.9993678884 0.9993688771 0.9993695008 #> [2411] 0.9993696088 0.9993712105 0.9993725277 0.9993726699 0.9993746243 #> [2416] 0.9993755115 0.9993783724 0.9993786820 0.9993833322 0.9993838742 #> [2421] 0.9993847890 0.9993864798 0.9993867149 0.9993876865 0.9993891448 #> [2426] 0.9993914483 0.9993932153 0.9993974401 0.9993982273 0.9993994049 #> [2431] 0.9994032300 0.9994042749 0.9994049914 0.9994071790 0.9994094585 #> [2436] 0.9994096022 0.9994097409 0.9994108005 0.9994117835 0.9994129480 #> [2441] 0.9994155670 0.9994167431 0.9994193294 0.9994204248 0.9994207626 #> [2446] 0.9994219983 0.9994233007 0.9994248224 0.9994258747 0.9994260749 #> [2451] 0.9994276339 0.9994313835 0.9994320412 0.9994321568 0.9994355477 #> [2456] 0.9994378111 0.9994384080 0.9994388965 0.9994396345 0.9994401812 #> [2461] 0.9994406438 0.9994407432 0.9994413408 0.9994426708 0.9994435184 #> [2466] 0.9994438881 0.9994440502 0.9994448713 0.9994462401 0.9994463063 #> [2471] 0.9994466310 0.9994467600 0.9994491090 0.9994494876 0.9994516682 #> [2476] 0.9994542393 0.9994548110 0.9994563608 0.9994584559 0.9994585611 #> [2481] 0.9994589525 0.9994592881 0.9994603404 0.9994633639 0.9994647339 #> [2486] 0.9994664831 0.9994672306 0.9994682019 0.9994694436 0.9994707460 #> [2491] 0.9994711993 0.9994753581 0.9994772369 0.9994792470 0.9994793484 #> [2496] 0.9994884504 0.9994890529 0.9994891404 0.9994891777 0.9994896363 #> [2501] 0.9994963573 0.9994971780 0.9994982294 0.9994996922 0.9995000563 #> [2506] 0.9995063657 0.9995065484 0.9995086021 0.9995095472 0.9995096834 #> [2511] 0.9995108610 0.9995115824 0.9995123718 0.9995131097 0.9995131330 #> [2516] 0.9995132579 0.9995151927 0.9995180711 0.9995191704 0.9995192337 #> [2521] 0.9995198757 0.9995219731 0.9995220669 0.9995237241 0.9995250907 #> [2526] 0.9995274179 0.9995274359 0.9995278639 0.9995280572 0.9995293393 #> [2531] 0.9995307274 0.9995311708 0.9995346394 0.9995356475 0.9995359414 #> [2536] 0.9995403152 0.9995408108 0.9995417924 0.9995421051 0.9995429945 #> [2541] 0.9995432780 0.9995447844 0.9995463329 0.9995468660 0.9995468740 #> [2546] 0.9995468849 0.9995486084 0.9995497816 0.9995507448 0.9995510952 #> [2551] 0.9995520180 0.9995529839 0.9995577664 0.9995609489 0.9995630724 #> [2556] 0.9995636929 0.9995646426 0.9995647869 0.9995667096 0.9995667384 #> [2561] 0.9995683353 0.9995699303 0.9995720003 0.9995765668 0.9995790494 #> [2566] 0.9995833924 0.9995847962 0.9995856839 0.9995883641 0.9995885808 #> [2571] 0.9995893830 0.9995908503 0.9995920511 0.9995933502 0.9995968638 #> [2576] 0.9995987027 0.9995997841 0.9996022958 0.9996032464 0.9996045247 #> [2581] 0.9996056631 0.9996079348 0.9996080364 0.9996089724 0.9996096140 #> [2586] 0.9996103065 0.9996111341 0.9996113339 0.9996136037 0.9996138059 #> [2591] 0.9996138308 0.9996164073 0.9996196072 0.9996230799 0.9996230817 #> [2596] 0.9996234559 0.9996247511 0.9996271152 0.9996283309 0.9996283403 #> [2601] 0.9996286700 0.9996296326 0.9996309841 0.9996324331 0.9996332492 #> [2606] 0.9996341713 0.9996347108 0.9996376959 0.9996429495 0.9996442000 #> [2611] 0.9996447084 0.9996462427 0.9996476272 0.9996498516 0.9996522172 #> [2616] 0.9996530643 0.9996536795 0.9996539443 0.9996557931 0.9996558952 #> [2621] 0.9996562723 0.9996590770 0.9996610270 0.9996617989 0.9996620166 #> [2626] 0.9996624001 0.9996624308 0.9996669032 0.9996674657 0.9996679566 #> [2631] 0.9996693005 0.9996698920 0.9996702867 0.9996705736 0.9996741722 #> [2636] 0.9996749662 0.9996750526 0.9996756152 0.9996797528 0.9996803227 #> [2641] 0.9996807168 0.9996820873 0.9996830761 0.9996836524 0.9996839071 #> [2646] 0.9996839371 0.9996850207 0.9996875960 0.9996878532 0.9996900297 #> [2651] 0.9996901067 0.9996902249 0.9996907725 0.9996908428 0.9996914285 #> [2656] 0.9996921594 0.9996934544 0.9996935617 0.9996942211 0.9996967618 #> [2661] 0.9996973205 0.9996976057 0.9996976504 0.9996977601 0.9996980234 #> [2666] 0.9996989397 0.9997006531 0.9997042358 0.9997114039 0.9997118781 #> [2671] 0.9997120734 0.9997121999 0.9997135053 0.9997146791 0.9997148722 #> [2676] 0.9997150244 0.9997158289 0.9997158441 0.9997167809 0.9997182212 #> [2681] 0.9997183088 0.9997183909 0.9997184465 0.9997210546 0.9997213468 #> [2686] 0.9997248201 0.9997254909 0.9997257130 0.9997287015 0.9997305672 #> [2691] 0.9997317766 0.9997340000 0.9997348498 0.9997352281 0.9997377765 #> [2696] 0.9997380919 0.9997396919 0.9997397093 0.9997416223 0.9997426635 #> [2701] 0.9997440639 0.9997444353 0.9997465804 0.9997468375 0.9997469765 #> [2706] 0.9997482159 0.9997485040 0.9997503044 0.9997525088 0.9997528223 #> [2711] 0.9997565999 0.9997566114 0.9997569792 0.9997571842 0.9997583357 #> [2716] 0.9997585685 0.9997600016 0.9997607710 0.9997628258 0.9997628426 #> [2721] 0.9997643020 0.9997648918 0.9997653207 0.9997689644 0.9997733743 #> [2726] 0.9997735756 0.9997737404 0.9997762274 0.9997779530 0.9997783034 #> [2731] 0.9997786127 0.9997816286 0.9997827535 0.9997830963 0.9997845371 #> [2736] 0.9997849807 0.9997852319 0.9997857627 0.9997874725 0.9997879774 #> [2741] 0.9997879980 0.9997886637 0.9997912008 0.9997928288 0.9997928378 #> [2746] 0.9997944243 0.9997948326 0.9997948493 0.9997953164 0.9997957821 #> [2751] 0.9997965411 0.9997967744 0.9997972528 0.9997981423 0.9998005732 #> [2756] 0.9998007371 0.9998014866 0.9998018352 0.9998019046 0.9998036672 #> [2761] 0.9998045734 0.9998046711 0.9998053903 0.9998054404 0.9998057254 #> [2766] 0.9998060586 0.9998092134 0.9998104127 0.9998107128 0.9998108528 #> [2771] 0.9998110100 0.9998123483 0.9998139567 0.9998153914 0.9998158452 #> [2776] 0.9998187940 0.9998251545 0.9998258063 0.9998264677 0.9998272786 #> [2781] 0.9998292075 0.9998294787 0.9998333447 0.9998338485 0.9998346727 #> [2786] 0.9998354418 0.9998365459 0.9998368785 0.9998384664 0.9998387736 #> [2791] 0.9998389787 0.9998393344 0.9998410137 0.9998417960 0.9998435743 #> [2796] 0.9998447778 0.9998449489 0.9998455586 0.9998457601 0.9998463749 #> [2801] 0.9998479973 0.9998502429 0.9998504196 0.9998508078 0.9998524414 #> [2806] 0.9998530434 0.9998551597 0.9998565353 0.9998569536 0.9998572579 #> [2811] 0.9998591122 0.9998598388 0.9998601993 0.9998607778 0.9998614326 #> [2816] 0.9998620650 0.9998643170 0.9998674859 0.9998676947 0.9998678776 #> [2821] 0.9998690988 0.9998695454 0.9998721412 0.9998727027 0.9998728227 #> [2826] 0.9998736945 0.9998740319 0.9998741255 0.9998744578 0.9998790200 #> [2831] 0.9998796336 0.9998807689 0.9998808144 0.9998847207 0.9998847815 #> [2836] 0.9998849221 0.9998850929 0.9998853710 0.9998858269 0.9998861461 #> [2841] 0.9998882918 0.9998883350 0.9998894104 0.9998910296 0.9998911970 #> [2846] 0.9998918100 0.9998940481 0.9998944915 0.9998949284 0.9998957316 #> [2851] 0.9998972886 0.9998976839 0.9998986393 0.9999004537 0.9999006150 #> [2856] 0.9999027644 0.9999032365 0.9999039587 0.9999042478 0.9999054809 #> [2861] 0.9999071031 0.9999073811 0.9999073978 0.9999074062 0.9999074308 #> [2866] 0.9999076947 0.9999085924 0.9999096394 0.9999096483 0.9999105059 #> [2871] 0.9999118938 0.9999132961 0.9999140847 0.9999142181 0.9999146074 #> [2876] 0.9999156827 0.9999160212 0.9999166929 0.9999174555 0.9999178185 #> [2881] 0.9999186435 0.9999190130 0.9999200020 0.9999205853 0.9999206730 #> [2886] 0.9999208230 0.9999226885 0.9999231321 0.9999243487 0.9999244639 #> [2891] 0.9999255876 0.9999259570 0.9999260780 0.9999271879 0.9999281148 #> [2896] 0.9999283088 0.9999285712 0.9999287580 0.9999290937 0.9999293040 #> [2901] 0.9999295525 0.9999302327 0.9999303451 0.9999305410 0.9999308973 #> [2906] 0.9999315471 0.9999317051 0.9999323089 0.9999327838 0.9999330898 #> [2911] 0.9999332474 0.9999340062 0.9999348425 0.9999350544 0.9999352924 #> [2916] 0.9999356505 0.9999356683 0.9999365383 0.9999374691 0.9999375990 #> [2921] 0.9999376432 0.9999378761 0.9999381838 0.9999396521 0.9999444537 #> [2926] 0.9999444994 0.9999452576 0.9999463363 0.9999469783 0.9999475553 #> [2931] 0.9999478462 0.9999484580 0.9999491766 0.9999502064 0.9999508137 #> [2936] 0.9999510173 0.9999514587 0.9999529156 0.9999531322 0.9999532029 #> [2941] 0.9999533511 0.9999536572 0.9999538203 0.9999542587 0.9999560803 #> [2946] 0.9999576025 0.9999577597 0.9999579921 0.9999579956 0.9999581188 #> [2951] 0.9999583806 0.9999592653 0.9999593218 0.9999593286 0.9999598798 #> [2956] 0.9999621258 0.9999625247 0.9999635258 0.9999642972 0.9999650220 #> [2961] 0.9999660666 0.9999661412 0.9999664948 0.9999667925 0.9999673195 #> [2966] 0.9999682441 0.9999690014 0.9999693868 0.9999694916 0.9999706254 #> [2971] 0.9999709074 0.9999717152 0.9999720783 0.9999726333 0.9999730645 #> [2976] 0.9999731289 0.9999738926 0.9999739589 0.9999749655 0.9999783206 #> [2981] 0.9999797449 0.9999804468 0.9999814854 0.9999845468 0.9999850660 #> [2986] 0.9999865772 0.9999878996 0.9999881513 0.9999882465 0.9999892870 #> [2991] 0.9999901929 0.9999904793 0.9999930028 0.9999931566 0.9999931758 #> [2996] 0.9999942057 0.9999980754 0.9999984538 0.9999986603 0.9999988162 #>  #> $n #> [1] 3000 #>  #> $call #> PatraSen_dist_calc(data = data1_transfo, gridsize = 200) #>  #> attr(,\"class\") #> [1] \"PS_dist_fun\""},{"path":"/reference/PatraSen_est_mix_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate by Patra and Sen the unknown component weight as well as the unknown distribution in admixture models — PatraSen_est_mix_model","title":"Estimate by Patra and Sen the unknown component weight as well as the unknown distribution in admixture models — PatraSen_est_mix_model","text":"Estimation unknown elements (Patra Sen method) admixture model probability density function l: l = p*f + (1-p)*g, g known component two-component mixture, p unknown proportion unknown component distribution f. information 'Details' concerning estimation method.","code":""},{"path":"/reference/PatraSen_est_mix_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate by Patra and Sen the unknown component weight as well as the unknown distribution in admixture models — PatraSen_est_mix_model","text":"","code":"PatraSen_est_mix_model(   data,   method = c(\"lwr.bnd\", \"fixed\", \"cv\"),   c.n = NULL,   folds = 10,   reps = 1,   cn.s = NULL,   cn.length = 100,   gridsize = 600 )"},{"path":"/reference/PatraSen_est_mix_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate by Patra and Sen the unknown component weight as well as the unknown distribution in admixture models — PatraSen_est_mix_model","text":"data Sample known component density admixture model transformed Uniform(0,1) distribution. method Either 'fixed' 'cv', depending whether compute estimate based value 'c.n' use cross-validation choosing 'c.n' (tuning parameter). c.n positive number, default value equal 0.1 log(log(n)), 'n' length observed sample. folds Number folds used cross-validation, default 10. reps Number replications cross-validation, default 1. cn.s sequence 'c.n' used cross-validation (vector values). Default equally spaced grid 100 values .001 x log(log(n)) 0.2 x log(log(n)). cn.length (default 100) Number equally spaced tuning parameter (.001 x log(log(n)) 0.2 x log(log(n))). Values search . gridsize (default 600) Number equally spaced points (0 1) evaluate distance function. Larger values computationally intensive also lead accurate estimates.","code":""},{"path":"/reference/PatraSen_est_mix_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate by Patra and Sen the unknown component weight as well as the unknown distribution in admixture models — PatraSen_est_mix_model","text":"list containing 'alp.hat' (estimate unknown component weight), 'Fs.hat' (list elements 'x' 'y' values function estimate unknown cumulative distribution function), 'dist.' object class 'dist.fun' using complete data.gen, 'c.n' value tuning parameter used compute final estimate, finally 'cv.' object class 'cv.mixmodel'. object NULL method \"fixed\".","code":""},{"path":"/reference/PatraSen_est_mix_model.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate by Patra and Sen the unknown component weight as well as the unknown distribution in admixture models — PatraSen_est_mix_model","text":"See Patra, R.K. Sen, B. (2016); Estimation Two-component Mixture Model Applications Multiple Testing; JRSS Series B, 78, pp. 869--893.","code":""},{"path":"/reference/PatraSen_est_mix_model.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Estimate by Patra and Sen the unknown component weight as well as the unknown distribution in admixture models — PatraSen_est_mix_model","text":"Xavier Milhaud xavier.milhaud.research@gmail.com","code":""},{"path":"/reference/PatraSen_est_mix_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate by Patra and Sen the unknown component weight as well as the unknown distribution in admixture models — PatraSen_est_mix_model","text":"","code":"## Simulate data: list.comp <- list(f = 'norm', g = 'norm') list.param <- list(f = list(mean = 3, sd = 0.5),                    g = list(mean = 0, sd = 1)) data1 <- rsimmix(n = 1500, unknownComp_weight = 0.8, list.comp, list.param)[['mixt.data']] ## Transform the known component of the admixture model into a Uniform(O,1) distribution: list.comp <- list(f = NULL, g = 'norm') list.param <- list(f = NULL, g = list(mean = 0, sd = 1)) data1_transfo <- knownComp_to_uniform(data = data1, comp.dist=list.comp, comp.param=list.param) PatraSen_est_mix_model(data = data1_transfo, method = 'fixed',                        c.n = 0.1*log(log(length(data1_transfo))), gridsize = 1000)$alp.hat #> [1] 0.762"},{"path":"/reference/admix-package.html","id":null,"dir":"Reference","previous_headings":"","what":"admix: Package Admix for Admixture (aka Contamination) Models — admix-package","title":"admix: Package Admix for Admixture (aka Contamination) Models — admix-package","text":"Implements techniques estimate unknown quantities related two-component admixture models, two components can belong distribution (note case multinomial mixtures, two components must belong family). Estimation methods depend assumptions made unknown component density (see Bordes Vandekerkhove (2010) doi:10.3103/S1066530710010023 ; Patra Sen (2016) doi:10.1111/rssb.12148 ); Milhaud, Pommeret, Salhi Vandekerkhove (2022) doi:10.1016/j.jspi.2021.05.010 ). practice, one can estimate mixture weight unknown component density wide variety frameworks. top , hypothesis tests can performed one two-sample contexts test unknown component density (see Milhaud, Pommeret, Salhi, Vandekerkhove (2023)). Finally, clustering unknown mixture components also feasible K-samples setting.","code":""},{"path":[]},{"path":"/reference/admix-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"admix: Package Admix for Admixture (aka Contamination) Models — admix-package","text":"Maintainer: Xavier Milhaud xavier.milhaud.research@gmail.com contributors: Pierre Vandekerkhove [contributor] Denys Pommeret [contributor] Yahia Salhi [contributor]","code":""},{"path":"/reference/admix_clustering.html","id":null,"dir":"Reference","previous_headings":"","what":"Clustering of K populations following admixture models — admix_clustering","title":"Clustering of K populations following admixture models — admix_clustering","text":"Create clusters unknown components related K populations following admixture models. Based K-sample test using Inversion - Best Matching (IBM) approach, see 'Details' information.","code":""},{"path":"/reference/admix_clustering.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clustering of K populations following admixture models — admix_clustering","text":"","code":"admix_clustering(   samples = NULL,   n_sim_tab = 100,   comp.dist = NULL,   comp.param = NULL,   tabul.dist = NULL,   conf.level = 0.95,   parallel = FALSE,   n_cpu = 2 )"},{"path":"/reference/admix_clustering.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clustering of K populations following admixture models — admix_clustering","text":"samples list K observed samples clustered, following admixture distributions. n_sim_tab Number simulated gaussian processes used tabulation inner convergence distribution IBM approach. comp.dist list 2*K elements corresponding component distributions (specified R native names distributions) involved K admixture models. Elements, grouped 2, refer unknown known components admixture model, unknown elements, must specified 'NULL' objects. instance, 'comp.dist' specified follows K = 3: list(f1 = NULL, g1 = 'norm', f2 = NULL, g2 = 'norm', f3 = NULL, g3 = 'rnorm'). comp.param list 2*K elements corresponding parameters component distributions, element list . names used list must correspond native R argument names distributions. Elements, grouped 2, refer parameters unknown known components admixture model. unknown elements, must specified 'NULL' objects. instance, 'comp.param' specified follows (K = 3): list(f1 = NULL, g1 = list(mean=0,sd=1), f2 = NULL, g2 = list(mean=3,sd=1.1), f3 = NULL, g3 = list(mean=-2,sd=0.6)). tabul.dist useful comparisons detected clusters different confidence levels. list tabulated distributions stochastic integral cluster previously detected. conf.level confidence level K-sample test used clustering procedure. parallel (default FALSE) Boolean indicate whether parallel computations performed (speed-tabulation). n_cpu (default 2) Number cores used parallelizing.","code":""},{"path":"/reference/admix_clustering.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clustering of K populations following admixture models — admix_clustering","text":"list eight elements: 1) number populations consideration; 2) number detected clusters; 3) list p-values test performed; 4) cluster affiliation population; 5) chosen confidence level statistical tests; 6) cluster components; 7) estimated weights unknown component distributions inside cluster (remind estimated weights consistent null); 8) matrix pairwise discrepancies among populations.","code":""},{"path":"/reference/admix_clustering.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Clustering of K populations following admixture models — admix_clustering","text":"See paper following HAL weblink: https://hal.science/hal-04129130","code":""},{"path":"/reference/admix_clustering.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Clustering of K populations following admixture models — admix_clustering","text":"Xavier Milhaud xavier.milhaud.research@gmail.com","code":""},{"path":"/reference/admix_clustering.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clustering of K populations following admixture models — admix_clustering","text":"","code":"# \\donttest{ ## Simulate data (chosen parameters indicate 2 clusters (populations (1,3), and (2,4)): list.comp <- list(f1 = \"gamma\", g1 = \"exp\",                   f2 = \"gamma\", g2 = \"exp\",                   f3 = \"gamma\", g3 = \"gamma\",                   f4 = \"gamma\", g4 = \"exp\") list.param <- list(f1 = list(shape = 16, rate = 4), g1 = list(rate = 1/3.5),                    f2 = list(shape = 14, rate = 2), g2 = list(rate = 1/5),                    f3 = list(shape = 16, rate = 4), g3 = list(shape = 12, rate = 2),                    f4 = list(shape = 14, rate = 2), g4 = list(rate = 1/7)) A.sim <- rsimmix(n=2600, unknownComp_weight=0.8, comp.dist = list(list.comp$f1,list.comp$g1),                  comp.param = list(list.param$f1, list.param$g1))$mixt.data B.sim <- rsimmix(n=3000, unknownComp_weight=0.7, comp.dist = list(list.comp$f2,list.comp$g2),                  comp.param = list(list.param$f2, list.param$g2))$mixt.data C.sim <- rsimmix(n=3500, unknownComp_weight=0.6, comp.dist = list(list.comp$f3,list.comp$g3),                  comp.param = list(list.param$f3, list.param$g3))$mixt.data D.sim <- rsimmix(n=4800, unknownComp_weight=0.5, comp.dist = list(list.comp$f4,list.comp$g4),                  comp.param = list(list.param$f4, list.param$g4))$mixt.data ## Look for the clusters: list.comp <- list(f1 = NULL, g1 = \"exp\",                   f2 = NULL, g2 = \"exp\",                   f3 = NULL, g3 = \"gamma\",                   f4 = NULL, g4 = \"exp\") list.param <- list(f1 = NULL, g1 = list(rate = 1/3.5),                    f2 = NULL, g2 = list(rate = 1/5),                    f3 = NULL, g3 = list(shape = 12, rate = 2),                    f4 = NULL, g4 = list(rate = 1/7)) clusters <- admix_clustering(samples = list(A.sim,B.sim,C.sim,D.sim), n_sim_tab = 8,                              comp.dist=list.comp, comp.param=list.param, conf.level = 0.95,                              parallel = FALSE, n_cpu = 2) #> In 'IBM_estimProp': optimization algorithm was changed (in 'optim') from 'Nelder-Mead' to 'BFGS' to avoid the solution to explose. #> In 'IBM_estimProp': optimization algorithm was changed (in 'optim') from 'Nelder-Mead' to 'BFGS' to avoid the solution to explose. #> In 'IBM_estimProp': optimization algorithm was changed (in 'optim') from 'Nelder-Mead' to 'BFGS' to avoid the solution to explose. #> In 'IBM_estimProp': optimization algorithm was changed (in 'optim') from 'Nelder-Mead' to 'BFGS' to avoid the solution to explose. #> In 'IBM_estimProp': optimization algorithm was changed (in 'optim') from 'Nelder-Mead' to 'BFGS' to avoid the solution to explose. #> In 'IBM_estimProp': optimization algorithm was changed (in 'optim') from 'Nelder-Mead' to 'BFGS' to avoid the solution to explose. #> In 'IBM_estimProp': optimization algorithm was changed (in 'optim') from 'Nelder-Mead' to 'BFGS' to avoid the solution to explose. #> In 'IBM_estimProp': optimization algorithm was changed (in 'optim') from 'Nelder-Mead' to 'BFGS' to avoid the solution to explose. #>    |                                                           |                                                  |   0%   |                                                           |======                                            |  12%   |                                                           |======================================            |  75%   |                                                           |==================================================| 100% clusters #> Call: #> admix_clustering(samples = list(A.sim, B.sim, C.sim, D.sim),  #>     n_sim_tab = 8, comp.dist = list.comp, comp.param = list.param,  #>     conf.level = 0.95, parallel = FALSE, n_cpu = 2) #>  #> The number of populations/samples under study is 4. #> The level of the underlying k-sample testing procedure is set to 5%. #>  #> The number of detected clusters in these populations equals 2. #> The p-values of the k-sample tests (showing when to close the clusters (i.e. p-value < 0.05) equal: 0.833, 0, 0.429. #>  #> The list of clusters with populations belonging to them (in numeric format, i.e. inside c()) : #>    - Cluster #1: vector of populations c(1, 3) #>   - Cluster #2: vector of populations c(2, 4) #>  #> The list of estimated weights for the unknown component distributions in each detected cluster #>       (in the same format and order as listed populations for clusters just above) : #>    - estimated weights of the unknown component distributions for cluster  1 :  c(0.802633122318937, 0.601508943855704) #>   - estimated weights of the unknown component distributions for cluster  2 :  c(0.684133012785428, 0.506306562342257) #>  #> The matrix giving the distances between populations, used in the clustering procedure through the k-sample tests: #>             [,1]       [,2]       [,3]        [,4] #> [1,]  0.00000000 9.60410877 0.02650656 25.00205066 #> [2,]  9.60410877 0.00000000 4.71997911  0.03720576 #> [3,]  0.02650656 4.71997911 0.00000000  7.25008868 #> [4,] 25.00205066 0.03720576 7.25008868  0.00000000 # }"},{"path":"/reference/admix_estim.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate the unknown parameters of the admixture model(s) under study — admix_estim","title":"Estimate the unknown parameters of the admixture model(s) under study — admix_estim","text":"Estimate component weights, location shift parameter (case symmetric unknown component density), unknown component distribution using different estimation techniques. remind -th admixture model probability density function (pdf) l_i : l_i = p_i * f_i + (1-p_i) * g_i, g_i known component density. unknown quantities p_i f_i estimated.","code":""},{"path":"/reference/admix_estim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate the unknown parameters of the admixture model(s) under study — admix_estim","text":"","code":"admix_estim(   samples = NULL,   sym.f = FALSE,   est.method = c(\"PS\", \"BVdk\", \"IBM\"),   comp.dist = NULL,   comp.param = NULL )"},{"path":"/reference/admix_estim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate the unknown parameters of the admixture model(s) under study — admix_estim","text":"samples list K samples studied, following admixture distributions. sym.f boolean indicating whether unknown component densities assumed symmetric . est.method estimation method applied. Can one 'BVdk' (Bordes Vandekerkhove estimator), 'PS' (Patra Sen estimator), 'IBM' (Inversion Best-Matching approach). estimation method performed sample. Important note: estimation 'IBM' unbiased H0, meaning choosing method requires perform previously test hypothesis pairs samples. details, see section 'Details' . comp.dist list 2*K elements corresponding component distributions (specified R native names distributions) involved K admixture models. Elements, grouped 2, refer unknown known components admixture model, unknown elements, must specified 'NULL' objects. instance, 'comp.dist' specified follows K = 3: list(f1 = NULL, g1 = 'norm', f2 = NULL, g2 = 'norm', f3 = NULL, g3 = 'norm'). comp.param list 2*K elements corresponding parameters component distributions, element list . names used list must correspond native R argument names distributions. Elements, grouped 2, refer parameters unknown known components admixture model. unknown elements, must specified 'NULL' objects. instance, 'comp.param' specified follows (K = 3): list(f1 = NULL, g1 = list(mean=0,sd=1), f2 = NULL, g2 = list(mean=3,sd=1.1), f3 = NULL, g3 = list(mean=-2,sd=0.6)).","code":""},{"path":"/reference/admix_estim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate the unknown parameters of the admixture model(s) under study — admix_estim","text":"list containing estimated weight every unknown component distribution among admixture samples.","code":""},{"path":"/reference/admix_estim.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate the unknown parameters of the admixture model(s) under study — admix_estim","text":"details different estimation techniques, see ) IBM approach https://hal.science/hal-03201760 ; ii) Patra Sen estimator: Patra, R.K. Sen, B. (2016); Estimation Two-component Mixture Model Applications Multiple Testing; JRSS Series B, 78, pp. 869--893. ; iii) BVdk estimator: Bordes, L. Vandekerkhove, P. (2010); Semiparametric two-component mixture model component known: asymptotically normal estimator; Math. Meth. Stat.; 19, pp. 22--41.","code":""},{"path":"/reference/admix_estim.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Estimate the unknown parameters of the admixture model(s) under study — admix_estim","text":"Xavier Milhaud xavier.milhaud.research@gmail.com","code":""},{"path":"/reference/admix_estim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate the unknown parameters of the admixture model(s) under study — admix_estim","text":"","code":"##### On a simulated example to see whether the true parameters are well estimated. list.comp <- list(f1 = \"norm\", g1 = \"norm\",                   f2 = \"norm\", g2 = \"norm\") list.param <- list(f1 = list(mean = 0, sd = 1), g1 = list(mean = 2, sd = 0.7),                    f2 = list(mean = 0, sd = 1), g2 = list(mean = -3, sd = 1.1)) ## Simulate data: sim1 <- rsimmix(n = 2100, unknownComp_weight = 0.8, comp.dist = list(list.comp$f1,list.comp$g1),                 comp.param = list(list.param$f1, list.param$g1))$mixt.data sim2 <- rsimmix(n= 2000, unknownComp_weight = 0.85, comp.dist = list(list.comp$f2,list.comp$g2),                 comp.param = list(list.param$f2, list.param$g2))$mixt.data ## Estimate the mixture weights of the admixture models: list.comp <- list(f1 = NULL, g1 = \"norm\",                   f2 = NULL, g2 = \"norm\") list.param <- list(f1 = NULL, g1 = list(mean = 2, sd = 0.7),                    f2 = NULL, g2 = list(mean = -3, sd = 1.1)) estim <- admix_estim(samples = list(sim1,sim2), sym.f = TRUE, est.method = 'IBM',                      comp.dist = list.comp, comp.param = list.param) #> Warning: Do not forget that estimators of proportions are reliable only if unknown component distributions are tested equal!"},{"path":"/reference/admix_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Hypothesis test between unknown components of the admixture models under study — admix_test","title":"Hypothesis test between unknown components of the admixture models under study — admix_test","text":"Perform hypothesis test unknown components list admixture models, remind -th admixture model probability density function (pdf) l_i : l_i = p_i * f_i + (1-p_i) * g_i, g_i known component density. unknown quantities p_i f_i thus estimated, leading test given following null alternative hypothesis: H0: f_i = f_j != j   H1 : exists least != j f_i differs f_j. test can performed using two methods, either comparison coefficients obtained polynomial basis expansions component densities, inner-convergence property obtained using IBM approach. See 'Details' information.","code":""},{"path":"/reference/admix_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hypothesis test between unknown components of the admixture models under study — admix_test","text":"","code":"admix_test(   samples = NULL,   sym.f = FALSE,   test.method = c(\"Poly\", \"ICV\"),   sim_U = NULL,   n_sim_tab = 50,   min_size = NULL,   comp.dist = NULL,   comp.param = NULL,   support = c(\"Real\", \"Integer\", \"Positive\", \"Bounded.continuous\"),   conf.level = 0.95,   parallel = FALSE,   n_cpu = 2 )"},{"path":"/reference/admix_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hypothesis test between unknown components of the admixture models under study — admix_test","text":"samples list K samples studied, following admixture distributions. sym.f boolean indicating whether unknown component densities assumed symmetric . test.method testing method applied. Can either 'Poly' (polynomial basis expansion) 'ICV' (inner convergence IBM). testing method performed samples. one-sample case, 'Poly' available test gaussianity test. details, see section 'Details' . sim_U (Used 'ICV' testing method, otherwise useless) Random draws inner convergence part contrast defined IBM approach (see 'Details' ). n_sim_tab (Used 'ICV' testing method, otherwise useless) Number simulated gaussian processes used tabulation inner convergence distribution IBM approach. min_size (Potentially used 'ICV' testing method, otherwise useless) Minimal size among samples (needed take account correction factor variance-covariance assessment). comp.dist list 2*K elements corresponding component distributions (specified R native names distributions) involved K admixture models. Elements, grouped 2, refer unknown known components admixture model, unknown elements, must specified 'NULL' objects. instance, 'comp.dist' specified follows K = 3: list(f1 = NULL, g1 = 'norm', f2 = NULL, g2 = 'norm', f3 = NULL, g3 = 'rnorm'). comp.param list 2*K elements corresponding parameters component distributions, element list . names used list must correspond native R argument names distributions. Elements, grouped 2, refer parameters unknown known components admixture model. unknown elements, must specified 'NULL' objects. instance, 'comp.param' specified follows (K = 3): list(f1 = NULL, g1 = list(mean=0,sd=1), f2 = NULL, g2 = list(mean=3,sd=1.1), f3 = NULL, g3 = list(mean=-2,sd=0.6)). support (Potentially used 'Poly' testing method, otherwise useless) support observations; one \"Real\", \"Integer\", \"Positive\", \"Bounded.continuous\". conf.level confidence level K-sample test. parallel (default FALSE) Boolean indicating whether parallel computations performed (speed-tabulation). n_cpu (default 2) Number cores used parallelizing.","code":""},{"path":"/reference/admix_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hypothesis test between unknown components of the admixture models under study — admix_test","text":"list containing decision test (reject ), confidence level test performed, p-value test, value test statistic (following chi2 distribution one degree freedom null).","code":""},{"path":"/reference/admix_test.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Hypothesis test between unknown components of the admixture models under study — admix_test","text":"details hypothesis techniques, see ) Inner convergence IBM approach https://hal.science/hal-03201760 ; ii) Polynomial expansions 'False Discovery Rate model Gaussianity test' (EJS, Pommeret & Vanderkerkhove, 2017), 'Semiparametric two-sample admixture components comparison test: symmetric case' (JSPI, Milhaud & al., 2021).","code":""},{"path":"/reference/admix_test.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Hypothesis test between unknown components of the admixture models under study — admix_test","text":"Xavier Milhaud xavier.milhaud.research@gmail.com","code":""},{"path":"/reference/admix_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hypothesis test between unknown components of the admixture models under study — admix_test","text":"","code":"##### On a simulated example, with 1 sample (gaussianity test): list.comp <- list(f1 = \"norm\", g1 = \"norm\") list.param <- list(f1 = list(mean = 0, sd = 1), g1 = list(mean = 2, sd = 0.7)) ## Simulate data: sim1 <- rsimmix(n = 300, unknownComp_weight = 0.85, comp.dist = list(list.comp$f1,list.comp$g1),                 comp.param = list(list.param$f1, list.param$g1))$mixt.data ## Perform the test hypothesis: list.comp <- list(f1 = NULL, g1 = \"norm\") list.param <- list(f1 = NULL, g1 = list(mean = 2, sd = 0.7)) gaussTest <- admix_test(samples = list(sim1), sym.f = TRUE, test.method = 'Poly', sim_U = NULL,                         n_sim_tab = 50, min_size = NULL, comp.dist = list.comp,                         comp.param = list.param, support = \"Real\", conf.level = 0.95,                         parallel = FALSE, n_cpu = 2)"},{"path":"/reference/allGalaxies.html","id":null,"dir":"Reference","previous_headings":"","what":"Four galaxies (Carina, Sextans, Sculptor, Fornax) measurements of heliocentric velocities from SIMBAD astronomical database — allGalaxies","title":"Four galaxies (Carina, Sextans, Sculptor, Fornax) measurements of heliocentric velocities from SIMBAD astronomical database — allGalaxies","text":"Four galaxies (Carina, Sextans, Sculptor, Fornax) measurements heliocentric velocities SIMBAD astronomical database","code":""},{"path":"/reference/allGalaxies.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Four galaxies (Carina, Sextans, Sculptor, Fornax) measurements of heliocentric velocities from SIMBAD astronomical database — allGalaxies","text":"","code":"allGalaxies"},{"path":"/reference/allGalaxies.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Four galaxies (Carina, Sextans, Sculptor, Fornax) measurements of heliocentric velocities from SIMBAD astronomical database — allGalaxies","text":"evolving data frame velocities 4 dSph galaxies; namely Carina, Sextans, Sculptor Fornax. Currently contains 8,862 rows 3 columns, information : Target Target identification; Galaxy-ID number HV Weighted mean Heliocentric rest frame velocity Name name galaxy","code":""},{"path":"/reference/allGalaxies.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Four galaxies (Carina, Sextans, Sculptor, Fornax) measurements of heliocentric velocities from SIMBAD astronomical database — allGalaxies","text":"https://vizier.u-strasbg.fr/viz-bin/VizieR-3?-source=J/AJ/137/3100/stars&-.max=50&-.form=HTML%20Table&-.add=_r&-.add=_RAJ,_DEJ&-.add=_RA%2a-c.eq,_DE%2a-c.eq&-sort=_r&-oc.form=sexa","code":""},{"path":"/reference/decontaminated_cdf.html","id":null,"dir":"Reference","previous_headings":"","what":"Provide the decontaminated cumulative distribution function (CDF) of the unknown component in an admixture model — decontaminated_cdf","title":"Provide the decontaminated cumulative distribution function (CDF) of the unknown component in an admixture model — decontaminated_cdf","text":"Estimate decontaminated CDF unknown component admixture model study, inversion admixture cumulative distribution function. Recall admixture model follows cumulative distribution function (CDF) L, L = p*F + (1-p)*G, g known CDF p f unknown quantities.","code":""},{"path":"/reference/decontaminated_cdf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Provide the decontaminated cumulative distribution function (CDF) of the unknown component in an admixture model — decontaminated_cdf","text":"","code":"decontaminated_cdf(sample1, comp.dist, comp.param, estim.p)"},{"path":"/reference/decontaminated_cdf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Provide the decontaminated cumulative distribution function (CDF) of the unknown component in an admixture model — decontaminated_cdf","text":"sample1 Observations sample study. comp.dist list two elements corresponding component distributions (specified R native names distributions) involved admixture model. two elements refer unknown known components admixture model, unknown elements, must specified 'NULL' objects (e.g. 'comp.dist' set list(f1=NULL, g1='norm')). comp.param list two elements corresponding parameters component distributions, element list . names used list must correspond native R argument names distributions. two elements refer parameters unknown known components admixture model. unknown elements, must specified 'NULL' objects (e.g. 'comp.param' set list(f1=NULL, g1=list(mean=0,sd=1))). estim.p estimated weight unknown component distribution, related proportion unknown component admixture model studied.","code":""},{"path":"/reference/decontaminated_cdf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Provide the decontaminated cumulative distribution function (CDF) of the unknown component in an admixture model — decontaminated_cdf","text":"decontaminated CDF F admixture model, class 'stepfun' (step function).","code":""},{"path":"/reference/decontaminated_cdf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Provide the decontaminated cumulative distribution function (CDF) of the unknown component in an admixture model — decontaminated_cdf","text":"decontaminated CDF obtained inverting admixture CDF, given L = p*F + (1-p)*G, isolate unknown component F estimated p. means F = (1/hat(p)) * (hat(L)-(1-p)*G).","code":""},{"path":"/reference/decontaminated_cdf.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Provide the decontaminated cumulative distribution function (CDF) of the unknown component in an admixture model — decontaminated_cdf","text":"Xavier Milhaud xavier.milhaud.research@gmail.com","code":""},{"path":"/reference/decontaminated_cdf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Provide the decontaminated cumulative distribution function (CDF) of the unknown component in an admixture model — decontaminated_cdf","text":"","code":"####### Continuous support: ## Simulate data: list.comp <- list(f1 = 'norm', g1 = 'norm',                   f2 = 'norm', g2 = 'norm') list.param <- list(f1 = list(mean = 3, sd = 0.5), g1 = list(mean = 0, sd = 1),                    f2 = list(mean = 3, sd = 0.5), g2 = list(mean = 5, sd = 2)) sample1 <- rsimmix(n=3500, unknownComp_weight=0.5, comp.dist = list(list.comp$f1,list.comp$g1),                                                    comp.param=list(list.param$f1,list.param$g1)) sample2 <- rsimmix(n=3000, unknownComp_weight=0.7, comp.dist = list(list.comp$f2,list.comp$g2),                                                    comp.param=list(list.param$f2,list.param$g2)) ## Estimate the mixture weight in each of the sample in real-life setting: list.comp <- list(f1 = NULL, g1 = 'norm',                   f2 = NULL, g2 = 'norm') list.param <- list(f1 = NULL, g1 = list(mean = 0, sd = 1),                    f2 = NULL, g2 = list(mean = 5, sd = 2)) estimate <- IBM_estimProp(sample1[['mixt.data']], sample2[['mixt.data']], comp.dist = list.comp,                           comp.param = list.param, with.correction = FALSE, n.integ = 1000) ## Determine the decontaminated version of the unknown CDF by inversion: decontaminated_cdf(sample1 = sample1[['mixt.data']], comp.dist = list.comp[1:2],                     comp.param = list.param[1:2], estim.p = estimate$prop.estim[1]) #> Step function #> Call: stats::stepfun(x = x_values, y = c(0, F1_decontamin)) #>  x[1:3000] = -3.6896, -3.6868, -3.684,  ..., 4.7101, 4.7129 #> 3001 plateau levels =      0, 0.00046951, 0.00046819,  ..., 0.99941,      1 ####### Countable discrete support: list.comp <- list(f1 = 'pois', g1 = 'pois',                   f2 = 'pois', g2 = 'pois') list.param <- list(f1 = list(lambda = 3), g1 = list(lambda = 2),                    f2 = list(lambda = 3), g2 = list(lambda = 4)) sample1 <- rsimmix(n=6000, unknownComp_weight=0.6, comp.dist = list(list.comp$f1,list.comp$g1),                                                    comp.param=list(list.param$f1,list.param$g1)) sample2 <- rsimmix(n=4500, unknownComp_weight=0.8, comp.dist = list(list.comp$f2,list.comp$g2),                                                    comp.param=list(list.param$f2,list.param$g2)) ## Estimate the mixture weight in each of the sample in real-life setting: list.comp <- list(f1 = NULL, g1 = 'pois',                   f2 = NULL, g2 = 'pois') list.param <- list(f1 = NULL, g1 = list(lambda = 2),                    f2 = NULL, g2 = list(lambda = 4)) estimate <- IBM_estimProp(sample1[['mixt.data']], sample2[['mixt.data']], comp.dist = list.comp,                           comp.param = list.param, with.correction = FALSE, n.integ = 1000) decontaminated_cdf(sample1 = sample1[['mixt.data']], comp.dist = list.comp[1:2],                    comp.param = list.param[1:2], estim.p = estimate$prop.estim[1]) #> Step function #> Call: stats::stepfun(x = x_values, y = c(0, F1_decontamin)) #>  x[1:10] =      0,      1,      2,  ...,      8,      9 #> 11 plateau levels =      0, 0.04819, 0.19202,  ..., 0.99787,      1 ####### Finite discrete support: list.comp <- list(f1 = 'multinom', g1 = 'multinom',                   f2 = 'multinom', g2 = 'multinom') list.param <- list(f1 = list(size=1, prob=c(0.3,0.4,0.3)), g1 = list(size=1, prob=c(0.6,0.3,0.1)),                    f2 = list(size=1, prob=c(0.3,0.4,0.3)), g2 = list(size=1, prob=c(0.2,0.6,0.2))) sample1 <- rsimmix(n=8000, unknownComp_weight=0.6, comp.dist = list(list.comp$f1,list.comp$g1),                                                    comp.param=list(list.param$f1,list.param$g1)) sample2 <- rsimmix(n=6000, unknownComp_weight=0.8, comp.dist = list(list.comp$f2,list.comp$g2),                                                    comp.param=list(list.param$f2,list.param$g2)) list.comp <- list(f1 = NULL, g1 = 'multinom',                   f2 = NULL, g2 = 'multinom') list.param <- list(f1 = NULL, g1 = list(size=1, prob=c(0.6,0.3,0.1)),                    f2 = NULL, g2 = list(size=1, prob=c(0.2,0.6,0.2))) estimate <- IBM_estimProp(sample1[['mixt.data']], sample2[['mixt.data']], comp.dist = list.comp,                           comp.param = list.param, with.correction = FALSE, n.integ = 1000) decontaminated_cdf(sample1 = sample1[['mixt.data']], comp.dist = list.comp[1:2],                     comp.param = list.param[1:2], estim.p = estimate$prop.estim[1]) #> Step function #> Call: stats::stepfun(x = x_values, y = c(0, F1_decontamin)) #>  x[1:3] =      1,      2,      3 #> 4 plateau levels =      0, 0.30148, 0.69509,      1"},{"path":"/reference/decontaminated_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Provide the decontaminated density of the unknown component in an admixture model. — decontaminated_density","title":"Provide the decontaminated density of the unknown component in an admixture model. — decontaminated_density","text":"Estimate decontaminated density unknown component admixture model study, inversion admixture cumulative distribution function. Recall admixture model follows cumulative distribution function (CDF) L, L = p*F + (1-p)*G, g known CDF p f unknown quantities.","code":""},{"path":"/reference/decontaminated_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Provide the decontaminated density of the unknown component in an admixture model. — decontaminated_density","text":"","code":"decontaminated_density(sample1, comp.dist, comp.param, estim.p)"},{"path":"/reference/decontaminated_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Provide the decontaminated density of the unknown component in an admixture model. — decontaminated_density","text":"sample1 Observations first sample study. comp.dist list two elements corresponding component distributions (specified R native names distributions) involved admixture model. two elements refer unknown known components admixture model, unknown elements, must specified 'NULL' objects (e.g. 'comp.dist' set list(f1=NULL, g1='norm')). comp.param list two elements corresponding parameters component distributions, element list . names used list must correspond native R argument names distributions. two elements refer parameters unknown known components admixture model. unknown elements, must specified 'NULL' objects (e.g. 'comp.param' set list(f1=NULL, g1=list(mean=0,sd=1))). estim.p estimated weight unknown component distribution, related proportion unknown component admixture model studied.","code":""},{"path":"/reference/decontaminated_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Provide the decontaminated density of the unknown component in an admixture model. — decontaminated_density","text":"list containing decontaminated density admixture model (class 'function'), support observations (either discrete continuous).","code":""},{"path":"/reference/decontaminated_density.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Provide the decontaminated density of the unknown component in an admixture model. — decontaminated_density","text":"decontaminated density obtained inverting admixture density, given l = p*f + (1-p)*g, isolate unknown component f estimated p.","code":""},{"path":"/reference/decontaminated_density.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Provide the decontaminated density of the unknown component in an admixture model. — decontaminated_density","text":"Xavier Milhaud xavier.milhaud.research@gmail.com","code":""},{"path":"/reference/decontaminated_density.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Provide the decontaminated density of the unknown component in an admixture model. — decontaminated_density","text":"","code":"## Simulate data:  ####### Continuous support: list.comp <- list(f1 = 'norm', g1 = 'norm',                   f2 = 'norm', g2 = 'norm') list.param <- list(f1 = list(mean = 3, sd = 0.5), g1 = list(mean = 0, sd = 1),                    f2 = list(mean = 3, sd = 0.5), g2 = list(mean = 5, sd = 2)) sample1 <- rsimmix(n=8000, unknownComp_weight=0.5, comp.dist = list(list.comp$f1,list.comp$g1),                                                    comp.param=list(list.param$f1,list.param$g1)) sample2 <- rsimmix(n=7000, unknownComp_weight=0.7, comp.dist = list(list.comp$f2,list.comp$g2),                                                    comp.param=list(list.param$f2,list.param$g2)) ## Estimate the mixture weight in each of the sample in real-life setting: list.comp <- list(f1 = NULL, g1 = 'norm',                   f2 = NULL, g2 = 'norm') list.param <- list(f1 = NULL, g1 = list(mean = 0, sd = 1),                    f2 = NULL, g2 = list(mean = 5, sd = 2)) estimate <- IBM_estimProp(sample1[['mixt.data']], sample2[['mixt.data']], comp.dist = list.comp,                           comp.param = list.param, with.correction = FALSE, n.integ = 1000) ## Determine the decontaminated version of the unknown density by inversion: decontaminated_density(sample1 = sample1[['mixt.data']], comp.dist = list.comp[1:2],                        comp.param = list.param[1:2], estim.p = estimate$prop.estim[1]) #> $decontaminated_density_function #> function (x)  #> (1/estim.p) * (l1_emp(x) - (1 - estim.p) * g1(x)) #> <bytecode: 0x55561d66e240> #> <environment: 0x55561d66efd0> #>  #> $support #> [1] \"continuous\" #>  #> $call #> decontaminated_density(sample1 = sample1[[\"mixt.data\"]], comp.dist = list.comp[1:2],  #>     comp.param = list.param[1:2], estim.p = estimate$prop.estim[1]) #>  #> attr(,\"class\") #> [1] \"decontaminated_density\"  ####### Discrete support: list.comp <- list(f1 = 'pois', g1 = 'pois',                   f2 = 'pois', g2 = 'pois') list.param <- list(f1 = list(lambda = 3), g1 = list(lambda = 2),                    f2 = list(lambda = 3), g2 = list(lambda = 4)) sample1 <- rsimmix(n=7000, unknownComp_weight=0.6, comp.dist = list(list.comp$f1,list.comp$g1),                                                    comp.param=list(list.param$f1,list.param$g1)) sample2 <- rsimmix(n=6000, unknownComp_weight=0.8, comp.dist = list(list.comp$f2,list.comp$g2),                                                    comp.param=list(list.param$f2,list.param$g2)) ## Estimate the mixture weight in each of the sample in real-life setting: list.comp <- list(f1 = NULL, g1 = 'pois',                   f2 = NULL, g2 = 'pois') list.param <- list(f1 = NULL, g1 = list(lambda = 2),                    f2 = NULL, g2 = list(lambda = 4)) estimate <- IBM_estimProp(sample1[['mixt.data']], sample2[['mixt.data']], comp.dist = list.comp,                           comp.param = list.param, with.correction = FALSE, n.integ = 1000) ## Determine the decontaminated version of the unknown density by inversion: decontaminated_density(sample1 = sample1[['mixt.data']], comp.dist = list.comp[1:2],                        comp.param = list.param[1:2], estim.p = estimate$prop.estim[1]) #> $decontaminated_density_function #> function (x)  #> (1/estim.p) * (l1_emp(x) - (1 - estim.p) * g1(x)) #> <bytecode: 0x55561d66e240> #> <environment: 0x555622b7ed40> #>  #> $support #> [1] \"discrete\" #>  #> $call #> decontaminated_density(sample1 = sample1[[\"mixt.data\"]], comp.dist = list.comp[1:2],  #>     comp.param = list.param[1:2], estim.p = estimate$prop.estim[1]) #>  #> attr(,\"class\") #> [1] \"decontaminated_density\" ####### Finite discrete support: list.comp <- list(f1 = 'multinom', g1 = 'multinom',                   f2 = 'multinom', g2 = 'multinom') list.param <- list(f1 = list(size=1, prob=c(0.3,0.4,0.3)), g1 = list(size=1, prob=c(0.6,0.3,0.1)),                    f2 = list(size=1, prob=c(0.3,0.4,0.3)), g2 = list(size=1, prob=c(0.2,0.6,0.2))) sample1 <- rsimmix(n=12000, unknownComp_weight=0.6, comp.dist = list(list.comp$f1,list.comp$g1),                                                    comp.param=list(list.param$f1,list.param$g1)) sample2 <- rsimmix(n=10000, unknownComp_weight=0.8, comp.dist = list(list.comp$f2,list.comp$g2),                                                    comp.param=list(list.param$f2,list.param$g2)) ## Estimate the mixture weight in each of the sample in real-life setting: list.comp <- list(f1 = NULL, g1 = 'multinom',                   f2 = NULL, g2 = 'multinom') list.param <- list(f1 = NULL, g1 = list(size=1, prob=c(0.6,0.3,0.1)),                    f2 = NULL, g2 = list(size=1, prob=c(0.2,0.6,0.2))) estimate <- IBM_estimProp(sample1[['mixt.data']], sample2[['mixt.data']], comp.dist = list.comp,                           comp.param = list.param, with.correction = FALSE, n.integ = 1000) ## Determine the decontaminated version of the unknown density by inversion: decontaminated_density(sample1 = sample1[['mixt.data']], comp.dist = list.comp[1:2],                        comp.param = list.param[1:2], estim.p = estimate$prop.estim[1]) #> $decontaminated_density_function #> function (x)  #> (1/estim.p) * (l1_emp(x) - (1 - estim.p) * g1(x)) #> <bytecode: 0x55561d66e240> #> <environment: 0x55561f714800> #>  #> $support #> [1] \"discrete\" #>  #> $call #> decontaminated_density(sample1 = sample1[[\"mixt.data\"]], comp.dist = list.comp[1:2],  #>     comp.param = list.param[1:2], estim.p = estimate$prop.estim[1]) #>  #> attr(,\"class\") #> [1] \"decontaminated_density\""},{"path":"/reference/detect_support_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect the support of the random variables under study — detect_support_type","title":"Detect the support of the random variables under study — detect_support_type","text":"Given one two sets observations (two samples), function provides plausible type support underlying random variables studied. Basically, less 3 percent observations different values, consider support discrete. Otherwise, consider continuous support.","code":""},{"path":"/reference/detect_support_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect the support of the random variables under study — detect_support_type","text":"","code":"detect_support_type(sample1, sample2 = NULL)"},{"path":"/reference/detect_support_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect the support of the random variables under study — detect_support_type","text":"sample1 first sample observations study. sample2 second sample observations study.","code":""},{"path":"/reference/detect_support_type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect the support of the random variables under study — detect_support_type","text":"type support, either discrete continuous.","code":""},{"path":"/reference/detect_support_type.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Detect the support of the random variables under study — detect_support_type","text":"Xavier Milhaud xavier.milhaud.research@gmail.com","code":""},{"path":"/reference/detect_support_type.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Detect the support of the random variables under study — detect_support_type","text":"","code":"## Simulate the two mixture samples: list.comp <- list(f1 = 'norm', g1 = 'norm',                   f2 = 'norm', g2 = 'norm') list.param <- list(f1 = list(mean = 3, sd = 0.5), g1 = list(mean = 0, sd = 1),                     f2 = list(mean = 1, sd = 0.1), g2 = list(mean = 5, sd = 2)) sample1 <- rsimmix(n=1500, unknownComp_weight=0.5, comp.dist = list(list.comp$f1,list.comp$g1),                    comp.param=list(list.param$f1,list.param$g1)) sample2 <- rsimmix(n=2000, unknownComp_weight=0.7, comp.dist = list(list.comp$f2,list.comp$g2),                    comp.param=list(list.param$f2,list.param$g2)) ## Test the type of support: detect_support_type(sample1[['mixt.data']], sample2[['mixt.data']]) #> [1] \"continuous\""},{"path":"/reference/estimVarCov_empProcess.html","id":null,"dir":"Reference","previous_headings":"","what":"Variance-covariance matrix of the empirical process in an admixture model — estimVarCov_empProcess","title":"Variance-covariance matrix of the empirical process in an admixture model — estimVarCov_empProcess","text":"Estimate variance-covariance matrix given empirical process, based Donsker correlation. Compute Donsker correlation two time points (x,y) given empirical process R code (another implementation C++ also available speed computation).","code":""},{"path":"/reference/estimVarCov_empProcess.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variance-covariance matrix of the empirical process in an admixture model — estimVarCov_empProcess","text":"","code":"estimVarCov_empProcess(   x,   y,   obs.data,   known.p = NULL,   comp.dist = NULL,   comp.param = NULL )"},{"path":"/reference/estimVarCov_empProcess.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Variance-covariance matrix of the empirical process in an admixture model — estimVarCov_empProcess","text":"x First time point considered computation correlation given empirical process. y Second time point considered computation correlation given empirical process. obs.data Sample permits estimate cumulative distribution function (cdf). known.p NULL default (useful compute exact Donsker correlation). component weight dedicated unknown mixture component available (case simulation studies) comp.dist NULL default (useful compute exact Donsker correlation). Otherwise, list two elements corresponding component distributions (specified R native names distributions) involved admixture model. elements must specified, instance list(f='norm', g='norm'). comp.param NULL default (useful compute exact Donsker correlation). Otherwise, list two elements corresponding parameters component distributions, element list . names used list must correspond native R argument names distributions. elements must specified, instance list(f=NULL, g=list(mean=0,sd=1)).","code":""},{"path":"/reference/estimVarCov_empProcess.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Variance-covariance matrix of the empirical process in an admixture model — estimVarCov_empProcess","text":"estimated variance-covariance matrix.","code":""},{"path":"/reference/estimVarCov_empProcess.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Variance-covariance matrix of the empirical process in an admixture model — estimVarCov_empProcess","text":"Xavier Milhaud xavier.milhaud.research@gmail.com","code":""},{"path":"/reference/estimVarCov_empProcess.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Variance-covariance matrix of the empirical process in an admixture model — estimVarCov_empProcess","text":"","code":"## Simulate data: list.comp <- list(f1 = 'norm', g1 = 'norm') list.param <- list(f1 = list(mean = 12, sd = 0.4),                    g1 = list(mean = 16, sd = 0.7)) obs.data <- rsimmix(n=2500, unknownComp_weight=0.5, comp.dist=list.comp, comp.param= list.param) ## Compute the variance-covariance matrix of the corresponding empirical process: t <- seq(from = min(obs.data$mixt.data), to = max(obs.data$mixt.data), length = 50) S2 <- sapply(t, function(s1) {                 sapply(t, function(s2) {                      estimVarCov_empProcess(x = s1, y = s2, obs.data = obs.data$mixt.data) })                 }) lattice::wireframe(S2)"},{"path":"/reference/gaussianity_test.html","id":null,"dir":"Reference","previous_headings":"","what":"One-sample gaussianity test in admixture models using Bordes and Vandekerkhove estimation method — gaussianity_test","title":"One-sample gaussianity test in admixture models using Bordes and Vandekerkhove estimation method — gaussianity_test","text":"Perform hypothesis test know whether unknown mixture component gaussian , knowing known one support real line (R). case non-gaussian known component can overcome thanks basic transformation cdf. Recall admixture model probability density function (pdf) l = p*f + (1-p)*g, g known pdf l observed (others unknown). Requires optimization (estimate unknown parameters) defined Bordes & Vandekerkhove (2010), means unknown mixture component must symmetric density.","code":""},{"path":"/reference/gaussianity_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"One-sample gaussianity test in admixture models using Bordes and Vandekerkhove estimation method — gaussianity_test","text":"","code":"gaussianity_test(   sample1,   comp.dist,   comp.param,   K = 3,   lambda = 0.2,   conf.level = 0.95,   support = c(\"Real\", \"Integer\", \"Positive\", \"Bounded.continuous\") )"},{"path":"/reference/gaussianity_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"One-sample gaussianity test in admixture models using Bordes and Vandekerkhove estimation method — gaussianity_test","text":"sample1 Observed sample mixture distribution given l = p*f + (1-p)*g, f p unknown g known. comp.dist List two elements corresponding component distributions involved admixture model. Unknown elements must specified 'NULL' objects. instance 'f' unknown: list(f = NULL, g = 'norm'). comp.param List two elements corresponding parameters component distributions, element list . names used list must correspond native R names distributions. Unknown elements must specified 'NULL' objects (e.g. 'f' unknown: list(f=NULL, g=list(mean=0,sd=1)). K Number coefficients considered polynomial basis expansion. lambda Rate normalization factor set penalization rule model selection (]0,1/2[). See 'Details' . conf.level confidence level, default 95 percent. Equals 1-alpha, alpha level test (type-error). support Support densities consideration, useful choose polynomial orthonormal basis. One 'Real', 'Integer', 'Positive', 'Bounded.continuous'.","code":""},{"path":"/reference/gaussianity_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"One-sample gaussianity test in admixture models using Bordes and Vandekerkhove estimation method — gaussianity_test","text":"list 6 elements, containing: 1) rejection decision; 2) p-value test; 3) test statistic; 4) variance-covariance matrix test statistic; 5) selected rank testing; 6) list estimates (unknown component weight 'p', shift location parameter 'mu' standard deviation 's' symmetric unknown distribution).","code":""},{"path":"/reference/gaussianity_test.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"One-sample gaussianity test in admixture models using Bordes and Vandekerkhove estimation method — gaussianity_test","text":"See paper 'False Discovery Rate model Gaussianity test' (Pommeret & Vanderkerkhove, 2017).","code":""},{"path":"/reference/gaussianity_test.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"One-sample gaussianity test in admixture models using Bordes and Vandekerkhove estimation method — gaussianity_test","text":"Xavier Milhaud xavier.milhaud.research@gmail.com","code":""},{"path":"/reference/gaussianity_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"One-sample gaussianity test in admixture models using Bordes and Vandekerkhove estimation method — gaussianity_test","text":"","code":"####### Under the null hypothesis H0. ## Parameters of the gaussian distribution to be tested: list.comp <- list(f = \"norm\", g = \"norm\") list.param <- list(f = c(mean = 2, sd = 0.5),                    g = c(mean = 0, sd = 1)) ## Simulate and plot the data at hand: obs.data <- rsimmix(n = 150, unknownComp_weight = 0.9, comp.dist = list.comp,                     comp.param = list.param)[['mixt.data']] plot(density(obs.data))  ## Performs the test: list.comp <- list(f = NULL, g = \"norm\") list.param <- list(f = NULL, g = c(mean = 0, sd = 1)) gaussianity_test(sample1 = obs.data, comp.dist = list.comp, comp.param = list.param,                  K = 3, lambda = 0.1, conf.level = 0.95, support = 'Real') #> $confidence_level #> [1] 0.95 #>  #> $rejection_rule #> [1] TRUE #>  #> $p_value #> [1] 2.795285e-06 #>  #> $test.stat #> [1] 21.95218 #>  #> $var.stat #>           [,1]      [,2]      [,3] #> [1,] 0.3827369        NA        NA #> [2,]        NA 0.7639471        NA #> [3,]        NA        NA 0.7594752 #>  #> $rank #> [1] 3 #>  #> $estimates #> $estimates$p #> [1] 0.990693 #>  #> $estimates$mu #> [1] 2.066073 #>  #> $estimates$s #> [1] 0.9798938 #>  #>"},{"path":"/reference/is_equal_knownComp.html","id":null,"dir":"Reference","previous_headings":"","what":"Test for equality of the known components between two admixture models — is_equal_knownComp","title":"Test for equality of the known components between two admixture models — is_equal_knownComp","text":"Test known components coming two two-components admixture models .","code":""},{"path":"/reference/is_equal_knownComp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test for equality of the known components between two admixture models — is_equal_knownComp","text":"","code":"is_equal_knownComp(comp.dist, comp.param)"},{"path":"/reference/is_equal_knownComp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test for equality of the known components between two admixture models — is_equal_knownComp","text":"comp.dist list four elements corresponding component distributions (specified R native names distributions) involved two admixture models. two first elements refer unknown known components 1st admixture model, last two ones second admixture model. unknown elements, must specified 'NULL' objects. instance, 'comp.dist' specified follows: list(f1=NULL, g1='norm', f2=NULL, g2='norm'). comp.param list four elements corresponding parameters component distributions, element list . names used list must correspond native R argument names distributions. two first elements refer parameters unknown known components 1st admixture model, last two ones second admixture model. unknown elements, must specified 'NULL' objects. instance, 'comp.param' specified follows: : list(f1=NULL, g1=list(mean=0,sd=1), f2=NULL, g2=list(mean=3,sd=1.1)).","code":""},{"path":"/reference/is_equal_knownComp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test for equality of the known components between two admixture models — is_equal_knownComp","text":"boolean (TRUE known components , otherwise FALSE).","code":""},{"path":"/reference/is_equal_knownComp.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Test for equality of the known components between two admixture models — is_equal_knownComp","text":"Xavier Milhaud xavier.milhaud.research@gmail.com","code":""},{"path":"/reference/is_equal_knownComp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test for equality of the known components between two admixture models — is_equal_knownComp","text":"","code":"list.comp <- list(f1 = 'norm', g1 = 'norm',                   f2 = 'norm', g2 = 'norm') list.param <- list(f1 = list(mean = 3, sd = 0.5), g1 = list(mean = 0, sd = 1),                    f2 = list(mean = 2, sd = 0.3), g2 = list(mean = 0, sd = 1)) is_equal_knownComp(comp.dist = list.comp, comp.param = list.param) #> [1] TRUE"},{"path":"/reference/kernel_cdf.html","id":null,"dir":"Reference","previous_headings":"","what":"Kernel estimation — kernel_cdf","title":"Kernel estimation — kernel_cdf","text":"Functions perform estimation cumulative distribution function (cdf) kernel estimators (non-gaussian kernel).","code":""},{"path":"/reference/kernel_cdf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Kernel estimation — kernel_cdf","text":"","code":"kernel_cdf(u, h)"},{"path":"/reference/kernel_cdf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Kernel estimation — kernel_cdf","text":"u point estimation made. h window kernel estimation.","code":""},{"path":"/reference/kernel_cdf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Kernel estimation — kernel_cdf","text":"estimated value cdf.","code":""},{"path":"/reference/kernel_cdf.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Kernel estimation — kernel_cdf","text":"Xavier Milhaud xavier.milhaud.research@gmail.com","code":""},{"path":"/reference/kernel_cdf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Kernel estimation — kernel_cdf","text":"","code":"kernel_cdf(0.4,0.5) #> [1] 0.98"},{"path":"/reference/kernel_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Kernel estimation — kernel_density","title":"Kernel estimation — kernel_density","text":"Functions perform estimation probability density function (pdf) kernel estimators (non-gaussian kernel).","code":""},{"path":"/reference/kernel_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Kernel estimation — kernel_density","text":"","code":"kernel_density(u, h)"},{"path":"/reference/kernel_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Kernel estimation — kernel_density","text":"u point estimation made. h window kernel estimation.","code":""},{"path":"/reference/kernel_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Kernel estimation — kernel_density","text":"estimated value pdf.","code":""},{"path":"/reference/kernel_density.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Kernel estimation — kernel_density","text":"Xavier Milhaud xavier.milhaud.research@gmail.com","code":""},{"path":"/reference/kernel_density.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Kernel estimation — kernel_density","text":"","code":"kernel_density(0.4,0.5) #> [1] 0.4"},{"path":"/reference/knownComp_to_uniform.html","id":null,"dir":"Reference","previous_headings":"","what":"Transforms the known component of the admixture distribution to a Uniform distribution — knownComp_to_uniform","title":"Transforms the known component of the admixture distribution to a Uniform distribution — knownComp_to_uniform","text":"admixture probability density function (pdf) follows l = p*f + (1-p)*g, p unknown weight f unknown component distribution: transforms g two-component mixture ditribution Uniform distribution. Useful use Patra Sen estimator estimation unknown weight p.","code":""},{"path":"/reference/knownComp_to_uniform.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transforms the known component of the admixture distribution to a Uniform distribution — knownComp_to_uniform","text":"","code":"knownComp_to_uniform(data, comp.dist, comp.param)"},{"path":"/reference/knownComp_to_uniform.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transforms the known component of the admixture distribution to a Uniform distribution — knownComp_to_uniform","text":"data Observations sample study, following admixture distribution. comp.dist list two elements corresponding component distributions (specified R native names distributions) involved admixture model. Unknown elements must specified 'NULL' objects, e.g. 'f' unknown: list(f=NULL, g='norm'). comp.param list two elements corresponding parameters component distributions, element list . names used list must correspond native R argument names distributions. Unknown elements must specified 'NULL' objects, e.g. 'f' unknown: list(f=NULL, g=list(mean=0,sd=1)).","code":""},{"path":"/reference/knownComp_to_uniform.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transforms the known component of the admixture distribution to a Uniform distribution — knownComp_to_uniform","text":"transformed data, .e. transformed mixture distribution known component g now follows Uniform(0,1) distribution.","code":""},{"path":"/reference/knownComp_to_uniform.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Transforms the known component of the admixture distribution to a Uniform distribution — knownComp_to_uniform","text":"Xavier Milhaud xavier.milhaud.research@gmail.com","code":""},{"path":"/reference/knownComp_to_uniform.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transforms the known component of the admixture distribution to a Uniform distribution — knownComp_to_uniform","text":"","code":"## Simulate data: list.comp <- list(f1 = 'norm', g1 = 'norm') list.param <- list(f1 = list(mean = 3, sd = 0.5),                    g1 = list(mean = 0, sd = 1)) sample1 <- rsimmix(n=1500, unknownComp_weight=0.5, comp.dist = list(list.comp$f1,list.comp$g1),                                                    comp.param=list(list.param$f1,list.param$g1)) plot_mixt_density(samples = list(sample1[['mixt.data']]), support = 'continuous')  ## Transform the known component into a Uniform(0,1) distribution: list.comp <- list(f1 = NULL, g1 = 'norm') list.param <- list(f1 = NULL, g1 = list(mean = 0, sd = 1)) transformed_data <- knownComp_to_uniform(data = sample1[['mixt.data']],                                          comp.dist = list.comp, comp.param = list.param) plot_mixt_density(samples = list(transformed_data), support = 'continuous')"},{"path":"/reference/milkyWay.html","id":null,"dir":"Reference","previous_headings":"","what":"Heliocentric velocity measured for the Milky Way (from Walker, M. G., M. Mateo, E. W. Olszewski, O. Y. Gnedin, X. Wang,\nB. Sen, and M. Woodroofe (2007). Velocity dispersion profiles of seven dwarf spheroidal galaxies. Astrophysical J. 667(1), L53–L56). — milkyWay","title":"Heliocentric velocity measured for the Milky Way (from Walker, M. G., M. Mateo, E. W. Olszewski, O. Y. Gnedin, X. Wang,\nB. Sen, and M. Woodroofe (2007). Velocity dispersion profiles of seven dwarf spheroidal galaxies. Astrophysical J. 667(1), L53–L56). — milkyWay","text":"Heliocentric velocity measured Milky Way (Walker, M. G., M. Mateo, E. W. Olszewski, O. Y. Gnedin, X. Wang, B. Sen, M. Woodroofe (2007). Velocity dispersion profiles seven dwarf spheroidal galaxies. Astrophysical J. 667(1), L53–L56).","code":""},{"path":"/reference/milkyWay.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Heliocentric velocity measured for the Milky Way (from Walker, M. G., M. Mateo, E. W. Olszewski, O. Y. Gnedin, X. Wang,\nB. Sen, and M. Woodroofe (2007). Velocity dispersion profiles of seven dwarf spheroidal galaxies. Astrophysical J. 667(1), L53–L56). — milkyWay","text":"","code":"milkyWay"},{"path":"/reference/milkyWay.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Heliocentric velocity measured for the Milky Way (from Walker, M. G., M. Mateo, E. W. Olszewski, O. Y. Gnedin, X. Wang,\nB. Sen, and M. Woodroofe (2007). Velocity dispersion profiles of seven dwarf spheroidal galaxies. Astrophysical J. 667(1), L53–L56). — milkyWay","text":"data frame 170,601 rows 1 column: V1 Heliocentric velocity measurements Milky way","code":""},{"path":"/reference/milkyWay.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Heliocentric velocity measured for the Milky Way (from Walker, M. G., M. Mateo, E. W. Olszewski, O. Y. Gnedin, X. Wang,\nB. Sen, and M. Woodroofe (2007). Velocity dispersion profiles of seven dwarf spheroidal galaxies. Astrophysical J. 667(1), L53–L56). — milkyWay","text":"https://www.aanda.org/articles/aa/full_html/2018/08/aa32905-18/aa32905-18.html","code":""},{"path":"/reference/orthoBasis_coef.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute expansion coefficients in a given orthonormal polynomial basis. — orthoBasis_coef","title":"Compute expansion coefficients in a given orthonormal polynomial basis. — orthoBasis_coef","text":"Compute coefficients corresponding decomposition density given orthonormal polynomial basis.","code":""},{"path":"/reference/orthoBasis_coef.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute expansion coefficients in a given orthonormal polynomial basis. — orthoBasis_coef","text":"","code":"orthoBasis_coef(   data,   comp.dist = NULL,   comp.param = NULL,   supp = c(\"Real\", \"Integer\", \"Positive\", \"Bounded.continuous\"),   degree,   m = 3,   other = NULL )"},{"path":"/reference/orthoBasis_coef.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute expansion coefficients in a given orthonormal polynomial basis. — orthoBasis_coef","text":"data Observed sample coefficients calculated. Can NULL 'comp.dist' 'comp.param' specified. comp.dist (default NULL) list two elements corresponding component distributions (specified R native names distributions) involved admixture model. Unknown elements must specified 'NULL' objects (instance unknown 'f': list(f=NULL, g='norm')). comp.param (default NULL) list two elements corresponding parameters component distributions, element list . names used list must correspond native R argument names distributions. Unknown elements must specified 'NULL' objects. instance 'f' unknown: list(f = NULL, g = list(mean=0,sd=1)). supp Support density considered. degree Degree polynomial basis built. m (default 3) used support 'Integer'. Corresponds mean reference measure, .e. Poisson(m). (default NULL) list precise bounds support bounded, second fourth elements give bounds.","code":""},{"path":"/reference/orthoBasis_coef.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute expansion coefficients in a given orthonormal polynomial basis. — orthoBasis_coef","text":"list composed 'degree' elements, element numeric vector (sample size) value represents k-th order coefficient found decomposing density orthonormal polynomial basis.","code":""},{"path":"/reference/orthoBasis_coef.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Compute expansion coefficients in a given orthonormal polynomial basis. — orthoBasis_coef","text":"Xavier Milhaud xavier.milhaud.research@gmail.com","code":""},{"path":"/reference/orthoBasis_coef.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute expansion coefficients in a given orthonormal polynomial basis. — orthoBasis_coef","text":"","code":"## Simulate data: sample1 <- rnorm(n = 7000, mean = 3, sd = 1) ## Compute the expansion coefficients in the orthonormal polynomial basis: coeff <- orthoBasis_coef(data = sample1, comp.dist = NULL, comp.param = NULL, supp = 'Real',                          degree = 3, m = 3, other = NULL) sapply(coeff, mean) #> [1]  2.981671  6.298942 10.885799 ## No observed data and decomposition of the known component of the admixture model: coeff <- orthoBasis_coef(data = NULL, comp.dist = list(NULL, 'norm'),             comp.param=list(NULL,list(mean=3,sd=1)), supp = 'Real', degree=3, m=3, other = NULL) sapply(coeff, mean) #> [1]  2.999593  6.361313 11.012928"},{"path":"/reference/orthoBasis_test_H0.html","id":null,"dir":"Reference","previous_headings":"","what":"Equality test of unknown components between two admixture models using polynomial basis expansions — orthoBasis_test_H0","title":"Equality test of unknown components between two admixture models using polynomial basis expansions — orthoBasis_test_H0","text":"Test null hypothesis (H0: f1=f2) using decomposition unknown densities two admixture distributions adequate orthonormal polynomial basis. Recall two admixture models respective probability density functions (pdf) l1 = p1*f1 + (1-p1)g1 l2 = p2f2 + (1-p2)*g2, g1 g2 known elements. admixture weights p1 p2 thus estimated. information method, see 'Details' .","code":""},{"path":"/reference/orthoBasis_test_H0.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Equality test of unknown components between two admixture models using polynomial basis expansions — orthoBasis_test_H0","text":"","code":"orthoBasis_test_H0(   samples,   known.p = NULL,   comp.dist = NULL,   comp.param = NULL,   known.coef = NULL,   K = 3,   nb.ssEch = 2,   s = 0.49,   var.explicit = FALSE,   nb.echBoot = NULL,   support = c(\"Real\", \"Integer\", \"Positive\", \"Bounded.continuous\", \"Bounded.discrete\"),   bounds.supp = NULL,   est.method = c(\"BVdk\", \"PS\"),   uniformized.knownComp_data = NULL )"},{"path":"/reference/orthoBasis_test_H0.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Equality test of unknown components between two admixture models using polynomial basis expansions — orthoBasis_test_H0","text":"samples list two observed samples, sample follows mixture distribution given l = p*f + (1-p)*g, f p unknown g known. known.p (default NULL) Numeric vector two elements, respectively component weight unknown component first second samples. comp.dist list four elements corresponding component distributions (specified R native names distributions) involved two admixture models. two first elements refer unknown known components 1st admixture model, last two ones second admixture model. unknown elements, must specified 'NULL' objects. instance, 'comp.dist' specified follows: list(f1=NULL, g1='norm', f2=NULL, g2='norm'). comp.param list four elements corresponding parameters component distributions, element list . names used list must correspond native R argument names distributions. two first elements refer parameters unknown known components 1st admixture model, last two ones second admixture model. unknown elements, must specified 'NULL' objects. instance, 'comp.param' specified follows: : list(f1=NULL, g1=list(mean=0,sd=1), f2=NULL, g2=list(mean=3,sd=1.1)). known.coef Coefficients polynomial basis expansion, corresponding known component densities g1 g2. K Number coefficients considered polynomial basis expansion. nb.ssEch Number subsamples created original data decorrelate estimation different parameters. s Rate normalization factor set penalization rule model selection (]0,1/2[), see 'Details'. var.explicit Boolean allows choose explicit assessment variance test statistic (FALSE=bootstrap), FIXME : seems bootstrap procedure work context admixtures. nb.echBoot number bootstrap samples 'var.explicit' set FALSE. support support densities consideration, useful choose polynomial orthonormal basis. bounds.supp (default NULL) useful support = 'bounded', list minimum maximum bounds, specified following: list( list(min.f1,min.g1,min.f2,min.g2) , list(max.f1,max.g1,max.f2,max.g2) ) est.method Estimation method get component weights, either 'PS' (Patra Sen estimation) 'BVdk' (Bordes Vendekerkhove estimation). uniformized.knownComp_data (default NULL) useful 'est.method' set 'PS', real-life applications distribution known component admixture model also unknown. case, known component previously made uniformly(0,1)-distributed applying empirical cumulative distribution known component function data. means 'comp.dist' 'comp.param' must set NULL.","code":""},{"path":"/reference/orthoBasis_test_H0.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Equality test of unknown components between two admixture models using polynomial basis expansions — orthoBasis_test_H0","text":"list six elements containing: 1) rejection decision; 2) p-value test; 3) test statistic; 4) variance-covariance matrix test statistic; 5) selected rank testing, 6) estimates two component weights.","code":""},{"path":"/reference/orthoBasis_test_H0.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Equality test of unknown components between two admixture models using polynomial basis expansions — orthoBasis_test_H0","text":"See paper HAL website: https://hal.science/hal-03692868","code":""},{"path":"/reference/orthoBasis_test_H0.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Equality test of unknown components between two admixture models using polynomial basis expansions — orthoBasis_test_H0","text":"Xavier Milhaud xavier.milhaud.research@gmail.com","code":""},{"path":"/reference/orthoBasis_test_H0.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Equality test of unknown components between two admixture models using polynomial basis expansions — orthoBasis_test_H0","text":"","code":"# \\donttest{ ###### Using Bordes and Vandekerkhove estimation (valid if symetric unknown component densities). #### Under the null hypothesis H0. ## Simulate data: list.comp <- list(f1 = \"norm\", g1 = \"norm\",                   f2 = \"norm\", g2 = \"norm\") list.param <- list(f1 = c(mean = 1, sd = 1), g1 = c(mean = 4, sd = 1),                    f2 = c(mean = 1, sd = 1), g2 = c(mean = 5, sd = 0.5)) sim.X <- rsimmix(n = 250, unknownComp_weight=0.9, comp.dist = list(list.comp$f1,list.comp$g1),                  comp.param = list(list.param$f1, list.param$g1))$mixt.data sim.Y <- rsimmix(n = 300, unknownComp_weight=0.8, comp.dist = list(list.comp$f2,list.comp$g2),                  comp.param = list(list.param$f2, list.param$g2))$mixt.data plot_mixt_density(samples = list(sim.X, sim.Y), support = \"continuous\")  ## Perform the hypothesis test in real-life conditions: list.comp <- list(f1 = NULL, g1 = \"norm\",                   f2 = NULL, g2 = \"norm\") list.param <- list(f1 = NULL, g1 = c(mean = 4, sd = 1),                    f2 = NULL, g2 = c(mean = 5, sd = 0.5)) test <- orthoBasis_test_H0(samples = list(sim.X, sim.Y),              known.p=NULL, comp.dist = list.comp, comp.param = list.param, known.coef=NULL, K=3,              nb.ssEch = 2, s = 0.25, var.explicit=TRUE, nb.echBoot=NULL, support = 'Real',              bounds.supp = NULL, est.method = 'BVdk', uniformized.knownComp_data = NULL) test$decision #> NULL # }"},{"path":"/reference/plot.decontaminated_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the decontaminated density of the unknown component for an estimated admixture model — plot.decontaminated_density","title":"Plot the decontaminated density of the unknown component for an estimated admixture model — plot.decontaminated_density","text":"Plot decontaminated density unknown component admixture model study, inversion admixture cumulative distribution function. Recall admixture model follows cumulative distribution function (CDF) L, L = p*F + (1-p)*G, g known CDF p f unknown quantities.","code":""},{"path":"/reference/plot.decontaminated_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the decontaminated density of the unknown component for an estimated admixture model — plot.decontaminated_density","text":"","code":"# S3 method for decontaminated_density plot(x, ..., x_val, add_plot = FALSE)"},{"path":"/reference/plot.decontaminated_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the decontaminated density of the unknown component for an estimated admixture model — plot.decontaminated_density","text":"x object class 'decontamin_dens' (see ?decontaminated_density). ... Arguments passed methods, graphical parameters (see par). x_val vector X-axis values plot decontaminated density f. add_plot (default FALSE) boolean specifying one plots decontaminated density existing plot. Used visual comparison purpose.","code":""},{"path":"/reference/plot.decontaminated_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the decontaminated density of the unknown component for an estimated admixture model — plot.decontaminated_density","text":"plot decontaminated density.","code":""},{"path":"/reference/plot.decontaminated_density.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot the decontaminated density of the unknown component for an estimated admixture model — plot.decontaminated_density","text":"decontaminated density obtained inverting admixture density, given l = p*f + (1-p)*g, isolate unknown component f estimated p.","code":""},{"path":"/reference/plot.decontaminated_density.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot the decontaminated density of the unknown component for an estimated admixture model — plot.decontaminated_density","text":"Xavier Milhaud xavier.milhaud.research@gmail.com","code":""},{"path":"/reference/plot.decontaminated_density.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the decontaminated density of the unknown component for an estimated admixture model — plot.decontaminated_density","text":"","code":"####### Continuous support: ## Simulate data: list.comp <- list(f1 = 'norm', g1 = 'norm',                   f2 = 'norm', g2 = 'norm') list.param <- list(f1 = list(mean = 3, sd = 0.5), g1 = list(mean = 0, sd = 1),                    f2 = list(mean = 3, sd = 0.5), g2 = list(mean = 5, sd = 2)) sample1 <- rsimmix(n=3000, unknownComp_weight=0.7, comp.dist = list(list.comp$f1,list.comp$g1),                                                    comp.param=list(list.param$f1,list.param$g1)) sample2 <- rsimmix(n=2500, unknownComp_weight=0.8, comp.dist = list(list.comp$f2,list.comp$g2),                                                    comp.param=list(list.param$f2,list.param$g2)) ## Estimate the mixture weight in each of the sample in real-life setting: list.comp <- list(f1 = NULL, g1 = 'norm',                   f2 = NULL, g2 = 'norm') list.param <- list(f1 = NULL, g1 = list(mean = 0, sd = 1),                    f2 = NULL, g2 = list(mean = 5, sd = 2)) estimate <- IBM_estimProp(sample1[['mixt.data']], sample2[['mixt.data']], comp.dist = list.comp,                           comp.param = list.param, with.correction = FALSE, n.integ = 1000) ## Determine the decontaminated version of the unknown density by inversion: res1 <- decontaminated_density(sample1 = sample1[['mixt.data']], comp.dist = list.comp[1:2],                                comp.param = list.param[1:2], estim.p = estimate$prop.estim[1]) res2 <- decontaminated_density(sample1 = sample2[['mixt.data']], comp.dist = list.comp[3:4],                                comp.param = list.param[3:4], estim.p = estimate$prop.estim[2]) ## Use appropriate sequence of x values: plot(x = res1, x_val = seq(from = 0, to = 6, length.out = 100), add_plot = FALSE) plot(x = res2, col = \"red\", x_val = seq(from = 0, to = 6, length.out = 100), add_plot = TRUE)   ####### Countable discrete support: list.comp <- list(f1 = 'pois', g1 = 'pois',                   f2 = 'pois', g2 = 'pois') list.param <- list(f1 = list(lambda = 3), g1 = list(lambda = 2),                    f2 = list(lambda = 3), g2 = list(lambda = 4)) sample1 <- rsimmix(n=4000, unknownComp_weight=0.7, comp.dist = list(list.comp$f1,list.comp$g1),                                                    comp.param=list(list.param$f1,list.param$g1)) sample2 <- rsimmix(n=3500, unknownComp_weight=0.85, comp.dist = list(list.comp$f2,list.comp$g2),                                                    comp.param=list(list.param$f2,list.param$g2)) ## Estimate the mixture weight in each of the sample in real-life setting: list.comp <- list(f1 = NULL, g1 = 'pois',                   f2 = NULL, g2 = 'pois') list.param <- list(f1 = NULL, g1 = list(lambda = 2),                    f2 = NULL, g2 = list(lambda = 4)) estimate <- IBM_estimProp(sample1[['mixt.data']], sample2[['mixt.data']], comp.dist = list.comp,                           comp.param = list.param, with.correction = FALSE, n.integ = 1000) ## Determine the decontaminated version of the unknown density by inversion: res1 <- decontaminated_density(sample1 = sample1[['mixt.data']], comp.dist = list.comp[1:2],                                comp.param = list.param[1:2], estim.p = estimate$prop.estim[1]) res2 <- decontaminated_density(sample1 = sample2[['mixt.data']], comp.dist = list.comp[3:4],                                comp.param = list.param[3:4], estim.p = estimate$prop.estim[2]) ## Use appropriate sequence of x values: plot(x = res1, x_val = seq(from = 0, to = 15, by = 1), add_plot = FALSE) plot(x = res2, col = \"red\", x_val= seq(from=0,to=15,by=1), add_plot = TRUE)   ####### Finite discrete support: list.comp <- list(f1 = 'multinom', g1 = 'multinom',                   f2 = 'multinom', g2 = 'multinom') list.param <- list(f1 = list(size=1, prob=c(0.3,0.4,0.3)), g1 = list(size=1, prob=c(0.6,0.3,0.1)),                    f2 = list(size=1, prob=c(0.3,0.4,0.3)), g2 = list(size=1, prob=c(0.2,0.6,0.2))) sample1 <- rsimmix(n=4000, unknownComp_weight=0.8, comp.dist = list(list.comp$f1,list.comp$g1),                                                    comp.param=list(list.param$f1,list.param$g1)) sample2 <- rsimmix(n=3500, unknownComp_weight=0.9, comp.dist = list(list.comp$f2,list.comp$g2),                                                    comp.param=list(list.param$f2,list.param$g2)) ## Estimate the mixture weight in each of the sample in real-life setting: list.comp <- list(f1 = NULL, g1 = 'multinom',                   f2 = NULL, g2 = 'multinom') list.param <- list(f1 = NULL, g1 = list(size=1, prob=c(0.6,0.3,0.1)),                    f2 = NULL, g2 = list(size=1, prob=c(0.2,0.6,0.2))) estimate <- IBM_estimProp(sample1[['mixt.data']], sample2[['mixt.data']], comp.dist = list.comp,                           comp.param = list.param, with.correction = FALSE, n.integ = 1000) ## Determine the decontaminated version of the unknown density by inversion: res1 <- decontaminated_density(sample1 = sample1[['mixt.data']], comp.dist = list.comp[1:2],                                comp.param = list.param[1:2], estim.p = estimate$prop.estim[1]) res2 <- decontaminated_density(sample1 = sample2[['mixt.data']], comp.dist = list.comp[3:4],                                comp.param = list.param[3:4], estim.p = estimate$prop.estim[2]) ## Use appropriate sequence of x values: plot(x = res1, x_val = seq(from = 0, to=6, by = 1), add_plot = FALSE) plot(x = res2, col = \"red\", x_val = seq(from = 0, to = 6, by = 1), add_plot = TRUE)"},{"path":"/reference/plot_mixt_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the density of some given sample(s) with mixture distributions. — plot_mixt_density","title":"Plot the density of some given sample(s) with mixture distributions. — plot_mixt_density","text":"Plot density sample(s) optional arguments improve visualization.","code":""},{"path":"/reference/plot_mixt_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the density of some given sample(s) with mixture distributions. — plot_mixt_density","text":"","code":"plot_mixt_density(   samples,   user.bounds = NULL,   support = c(\"continuous\", \"discrete\"),   main = \"\" )"},{"path":"/reference/plot_mixt_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the density of some given sample(s) with mixture distributions. — plot_mixt_density","text":"samples Observed samples (mixture distributions) density plotted. user.bounds (default NULL) Bounds limit range x-axis plotting. support Support distributions, know whether density plot histogram displayed. main Title plot.","code":""},{"path":"/reference/plot_mixt_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the density of some given sample(s) with mixture distributions. — plot_mixt_density","text":"plot densities samples provided inputs.","code":""},{"path":"/reference/plot_mixt_density.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot the density of some given sample(s) with mixture distributions. — plot_mixt_density","text":"Xavier Milhaud xavier.milhaud.research@gmail.com","code":""},{"path":"/reference/plot_mixt_density.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the density of some given sample(s) with mixture distributions. — plot_mixt_density","text":"","code":"##### Continuous support: list.comp <- list(f1 = \"norm\", g1 = \"norm\",                   f2 = \"norm\", g2 = \"norm\",                   f3 = \"norm\", g3 = \"norm\") list.param <- list(f1 = list(mean = 5, sd = 1), g1 = list(mean = 2, sd = 0.7),                    f2 = list(mean = 0, sd = 1), g2 = list(mean = -3, sd = 1.1),                    f3 = list(mean = 9, sd = 1), g3 = list(mean = 6, sd = 2)) ## Simulate data: sim1 <- rsimmix(n = 300, unknownComp_weight = 0.8, comp.dist = list(list.comp$f1,list.comp$g1),                 comp.param = list(list.param$f1, list.param$g1))$mixt.data sim2 <- rsimmix(n= 250, unknownComp_weight = 0.85, comp.dist = list(list.comp$f2,list.comp$g2),                 comp.param = list(list.param$f2, list.param$g2))$mixt.data sim3 <- rsimmix(n= 400, unknownComp_weight = 0.6, comp.dist = list(list.comp$f3,list.comp$g3),                 comp.param = list(list.param$f3, list.param$g3))$mixt.data plot_mixt_density(samples = list(sim1,sim2,sim3), user.bounds = NULL, support = \"continuous\")   ####### Countable discrete support: list.comp <- list(f1 = 'pois', g1 = 'pois',                   f2 = 'pois', g2 = 'pois') list.param <- list(f1 = list(lambda = 7), g1 = list(lambda = 1),                    f2 = list(lambda = 2), g2 = list(lambda = 15)) sim1 <- rsimmix(n=4000, unknownComp_weight=0.5, comp.dist = list(list.comp$f1,list.comp$g1),                 comp.param=list(list.param$f1,list.param$g1))$mixt.data sim2 <- rsimmix(n=3500, unknownComp_weight=0.3, comp.dist = list(list.comp$f2,list.comp$g2),                 comp.param=list(list.param$f2,list.param$g2))$mixt.data plot_mixt_density(samples = list(sim1,sim2), user.bounds = NULL, support = \"discrete\")"},{"path":"/reference/poly_orthonormal_basis.html","id":null,"dir":"Reference","previous_headings":"","what":"Build an orthonormal basis to decompose some given probability density function — poly_orthonormal_basis","title":"Build an orthonormal basis to decompose some given probability density function — poly_orthonormal_basis","text":"Build orthonormal basis, needed decompose probability density function (pdf) unknown component admixture, depending support consideration.","code":""},{"path":"/reference/poly_orthonormal_basis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build an orthonormal basis to decompose some given probability density function — poly_orthonormal_basis","text":"","code":"poly_orthonormal_basis(   support = c(\"Real\", \"Integer\", \"Positive\", \"Bounded.continuous\", \"Bounded.discrete\"),   deg,   x,   m )"},{"path":"/reference/poly_orthonormal_basis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build an orthonormal basis to decompose some given probability density function — poly_orthonormal_basis","text":"support Support random variables implied two-component mixture distribution. deg Degree basis built. x (NULL default) used support 'Integer'. point polynomial value evaluated. m (NULL default) used support 'Integer'. Corresponds mean reference measure, .e. Poisson(m).","code":""},{"path":"/reference/poly_orthonormal_basis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build an orthonormal basis to decompose some given probability density function — poly_orthonormal_basis","text":"orthonormal polynomial basis used decompose density unknown component mixture distribution.","code":""},{"path":"/reference/poly_orthonormal_basis.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Build an orthonormal basis to decompose some given probability density function — poly_orthonormal_basis","text":"Xavier Milhaud xavier.milhaud.research@gmail.com","code":""},{"path":"/reference/poly_orthonormal_basis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build an orthonormal basis to decompose some given probability density function — poly_orthonormal_basis","text":"","code":"poly_orthonormal_basis(support = 'Real', deg = 10, x = NULL, m = NULL) #> [[1]] #> 1  #>  #> [[2]] #> x  #>  #> [[3]] #> -1 + x^2  #>  #> [[4]] #> -3*x + x^3  #>  #> [[5]] #> 3 - 6*x^2 + x^4  #>  #> [[6]] #> 15*x - 10*x^3 + x^5  #>  #> [[7]] #> -15 + 45*x^2 - 15*x^4 + x^6  #>  #> [[8]] #> -105*x + 105*x^3 - 21*x^5 + x^7  #>  #> [[9]] #> 105 - 420*x^2 + 210*x^4 - 28*x^6 + x^8  #>  #> [[10]] #> 945*x - 1260*x^3 + 378*x^5 - 36*x^7 + x^9  #>  #> [[11]] #> -945 + 4725*x^2 - 3150*x^4 + 630*x^6 - 45*x^8 + x^10  #>"},{"path":"/reference/print.admix_cluster.html","id":null,"dir":"Reference","previous_headings":"","what":"Results of the clustering algorithm performed over the K populations following admixture models. — print.admix_cluster","title":"Results of the clustering algorithm performed over the K populations following admixture models. — print.admix_cluster","text":"Print detected clusters among populations study. method also prints number clusters, p-values statistical tests performed building clusters, estimated weights unknown component distributions inside cluster, discrepancy matrix. latter represents kind distance populations.","code":""},{"path":"/reference/print.admix_cluster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Results of the clustering algorithm performed over the K populations following admixture models. — print.admix_cluster","text":"","code":"# S3 method for admix_cluster print(x, ...)"},{"path":"/reference/print.admix_cluster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Results of the clustering algorithm performed over the K populations following admixture models. — print.admix_cluster","text":"x object class 'admix_cluster' (see ?admix_clustering). ... arguments passed methods.","code":""},{"path":"/reference/print.admix_cluster.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Results of the clustering algorithm performed over the K populations following admixture models. — print.admix_cluster","text":"Xavier Milhaud xavier.milhaud.research@gmail.com","code":""},{"path":"/reference/print.admix_cluster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Results of the clustering algorithm performed over the K populations following admixture models. — print.admix_cluster","text":"","code":"# \\donttest{ ## Simulate data (chosen parameters indicate 2 clusters (populations (1,3), (2,4))!): list.comp <- list(f1 = \"gamma\", g1 = \"exp\",                   f2 = \"gamma\", g2 = \"exp\",                   f3 = \"gamma\", g3 = \"gamma\",                   f4 = \"gamma\", g4 = \"exp\") list.param <- list(f1 = list(shape = 16, rate = 4), g1 = list(rate = 1/3.5),                    f2 = list(shape = 14, rate = 2), g2 = list(rate = 1/5),                    f3 = list(shape = 16, rate = 4), g3 = list(shape = 12, rate = 2),                    f4 = list(shape = 14, rate = 2), g4 = list(rate = 1/7)) A.sim <- rsimmix(n=2600, unknownComp_weight=0.8, comp.dist = list(list.comp$f1,list.comp$g1),                  comp.param = list(list.param$f1, list.param$g1))$mixt.data B.sim <- rsimmix(n=3000, unknownComp_weight=0.7, comp.dist = list(list.comp$f2,list.comp$g2),                  comp.param = list(list.param$f2, list.param$g2))$mixt.data C.sim <- rsimmix(n=3500, unknownComp_weight=0.6, comp.dist = list(list.comp$f3,list.comp$g3),                  comp.param = list(list.param$f3, list.param$g3))$mixt.data D.sim <- rsimmix(n=4800, unknownComp_weight=0.5, comp.dist = list(list.comp$f4,list.comp$g4),                  comp.param = list(list.param$f4, list.param$g4))$mixt.data ## Look for the clusters: list.comp <- list(f1 = NULL, g1 = \"exp\",                   f2 = NULL, g2 = \"exp\",                   f3 = NULL, g3 = \"gamma\",                   f4 = NULL, g4 = \"exp\") list.param <- list(f1 = NULL, g1 = list(rate = 1/3.5),                    f2 = NULL, g2 = list(rate = 1/5),                    f3 = NULL, g3 = list(shape = 12, rate = 2),                    f4 = NULL, g4 = list(rate = 1/7)) clusters <- admix_clustering(samples = list(A.sim,B.sim,C.sim,D.sim), n_sim_tab = 8,                              comp.dist=list.comp, comp.param=list.param, conf.level = 0.95,                              parallel=FALSE, n_cpu=2) #> In 'IBM_estimProp': optimization algorithm was changed (in 'optim') from 'Nelder-Mead' to 'BFGS' to avoid the solution to explose. #> In 'IBM_estimProp': optimization algorithm was changed (in 'optim') from 'Nelder-Mead' to 'BFGS' to avoid the solution to explose. #> In 'IBM_estimProp': optimization algorithm was changed (in 'optim') from 'Nelder-Mead' to 'BFGS' to avoid the solution to explose. #> In 'IBM_estimProp': optimization algorithm was changed (in 'optim') from 'Nelder-Mead' to 'BFGS' to avoid the solution to explose. #> In 'IBM_estimProp': optimization algorithm was changed (in 'optim') from 'Nelder-Mead' to 'BFGS' to avoid the solution to explose. #> In 'IBM_estimProp': optimization algorithm was changed (in 'optim') from 'Nelder-Mead' to 'BFGS' to avoid the solution to explose. #> In 'IBM_estimProp': optimization algorithm was changed (in 'optim') from 'Nelder-Mead' to 'BFGS' to avoid the solution to explose. #> In 'IBM_estimProp': optimization algorithm was changed (in 'optim') from 'Nelder-Mead' to 'BFGS' to avoid the solution to explose. #>    |                                                           |                                                  |   0%   |                                                           |======                                            |  12%   |                                                           |======================================            |  75%   |                                                           |==================================================| 100% print(clusters) #> Call: #> admix_clustering(samples = list(A.sim, B.sim, C.sim, D.sim),  #>     n_sim_tab = 8, comp.dist = list.comp, comp.param = list.param,  #>     conf.level = 0.95, parallel = FALSE, n_cpu = 2) #>  #> The number of populations/samples under study is 4. #> The level of the underlying k-sample testing procedure is set to 5%. #>  #> The number of detected clusters in these populations equals 2. #> The p-values of the k-sample tests (showing when to close the clusters (i.e. p-value < 0.05) equal: 1, 0, 0.75. #>  #> The list of clusters with populations belonging to them (in numeric format, i.e. inside c()) : #>    - Cluster #1: vector of populations c(2, 4) #>   - Cluster #2: vector of populations c(1, 3) #>  #> The list of estimated weights for the unknown component distributions in each detected cluster #>       (in the same format and order as listed populations for clusters just above) : #>    - estimated weights of the unknown component distributions for cluster  1 :  c(0.732571980678951, 0.52224278415262) #>   - estimated weights of the unknown component distributions for cluster  2 :  c(0.808365148202347, 0.621614834153343) #>  #> The matrix giving the distances between populations, used in the clustering procedure through the k-sample tests: #>             [,1]        [,2]        [,3]        [,4] #> [1,]  0.00000000 12.52622710  0.01814076 22.91330116 #> [2,] 12.52622710  0.00000000  8.03239137  0.01625855 #> [3,]  0.01814076  8.03239137  0.00000000 14.08459093 #> [4,] 22.91330116  0.01625855 14.08459093  0.00000000 # }"},{"path":"/reference/print.admix_estim.html","id":null,"dir":"Reference","previous_headings":"","what":"Print the results of estimated parameters from K admixture models — print.admix_estim","title":"Print the results of estimated parameters from K admixture models — print.admix_estim","text":"Print estimated weight p unknown component admixture model study Recall admixture model follows cumulative distribution function (CDF) L, L = p*F + (1-p)*G, g known CDF p f unknown quantities.","code":""},{"path":"/reference/print.admix_estim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print the results of estimated parameters from K admixture models — print.admix_estim","text":"","code":"# S3 method for admix_estim print(x, ...)"},{"path":"/reference/print.admix_estim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print the results of estimated parameters from K admixture models — print.admix_estim","text":"x object class 'admix_estim' (see ?admix_estim). ... arguments passed methods.","code":""},{"path":"/reference/print.admix_estim.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print the results of estimated parameters from K admixture models — print.admix_estim","text":"Xavier Milhaud xavier.milhaud.research@gmail.com","code":""},{"path":"/reference/print.admix_estim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print the results of estimated parameters from K admixture models — print.admix_estim","text":"","code":"##### On a simulated example to see whether the true parameters are well estimated. list.comp <- list(f1 = \"norm\", g1 = \"norm\",                   f2 = \"norm\", g2 = \"norm\") list.param <- list(f1 = list(mean = 0, sd = 1), g1 = list(mean = 2, sd = 0.7),                    f2 = list(mean = 0, sd = 1), g2 = list(mean = -3, sd = 1.1)) ## Simulate data: sim1 <- rsimmix(n = 2100, unknownComp_weight = 0.8, comp.dist = list(list.comp$f1,list.comp$g1),                 comp.param = list(list.param$f1, list.param$g1))$mixt.data sim2 <- rsimmix(n= 2000, unknownComp_weight = 0.85, comp.dist = list(list.comp$f2,list.comp$g2),                 comp.param = list(list.param$f2, list.param$g2))$mixt.data ## Estimate the mixture weights of the admixture models: list.comp <- list(f1 = NULL, g1 = \"norm\",                   f2 = NULL, g2 = \"norm\") list.param <- list(f1 = NULL, g1 = list(mean = 2, sd = 0.7),                    f2 = NULL, g2 = list(mean = -3, sd = 1.1)) estim <- admix_estim(samples = list(sim1,sim2), sym.f = TRUE, est.method = 'IBM',                      comp.dist = list.comp, comp.param = list.param) #> Warning: Do not forget that estimators of proportions are reliable only if unknown component distributions are tested equal! print(x = estim) #> Call: #> admix_estim(samples = list(sim1, sim2), sym.f = TRUE, est.method = \"IBM\",  #>     comp.dist = list.comp, comp.param = list.param) #>  #> The number of populations/samples under study is 2. #>  #>  #> The list of estimated weight(s) for the unknown component distribution(s) is : #>    - estimated weight of the unknown component distribution for population  1 :  0.80614865446969 #>   - estimated weight of the unknown component distribution for population  2 :  0.847040937801103 #>  #> The list of estimated location(s) for the unknown component distribution(s) is : #>    - estimated location of the unknown component distribution for population  1 :  NA #>   - estimated location of the unknown component distribution for population  2 :  NA #>  #> The chosen estimation technique is IBM. #> Was the unknown density assumed to be symmetric (not important unless BVdk estimation is performed)? TRUE. #>"},{"path":"/reference/print.admix_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Print the results of statistical test for equality of unknown component distributions in admixture models — print.admix_test","title":"Print the results of statistical test for equality of unknown component distributions in admixture models — print.admix_test","text":"Print decision (well useful information) statistical test null hypothesis corresponding equality unknown component distributions admixture models. precisely, given two () admixture models cumulative distribution functions (CDF) L1 L2, Li = pi*Fi + (1-pi)*Gi =1,2 Gi known CDFs, function performs test: H0: F1 = F2 versus H1: F1 != F2.","code":""},{"path":"/reference/print.admix_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print the results of statistical test for equality of unknown component distributions in admixture models — print.admix_test","text":"","code":"# S3 method for admix_test print(x, ...)"},{"path":"/reference/print.admix_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print the results of statistical test for equality of unknown component distributions in admixture models — print.admix_test","text":"x object class 'admix_test' (see ?admix_test). ... arguments passed methods.","code":""},{"path":"/reference/print.admix_test.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print the results of statistical test for equality of unknown component distributions in admixture models — print.admix_test","text":"Xavier Milhaud xavier.milhaud.research@gmail.com","code":""},{"path":"/reference/print.admix_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print the results of statistical test for equality of unknown component distributions in admixture models — print.admix_test","text":"","code":"##### On a simulated example, with 1 sample (gaussianity test): list.comp <- list(f1 = \"norm\", g1 = \"norm\") list.param <- list(f1 = list(mean = 0, sd = 1), g1 = list(mean = 2, sd = 0.7)) ## Simulate data: sim1 <- rsimmix(n = 300, unknownComp_weight = 0.85, comp.dist = list(list.comp$f1,list.comp$g1),                 comp.param = list(list.param$f1, list.param$g1))$mixt.data ## Perform the test hypothesis: list.comp <- list(f1 = NULL, g1 = \"norm\") list.param <- list(f1 = NULL, g1 = list(mean = 2, sd = 0.7)) gaussTest <- admix_test(samples = list(sim1), sym.f = TRUE, test.method = 'Poly', sim_U = NULL,                         n_sim_tab = 50, min_size = NULL, comp.dist = list.comp,                         comp.param = list.param, support = \"Real\", conf.level = 0.95,                         parallel = FALSE, n_cpu = 2) print(gaussTest) #> Call: #> admix_test(samples = list(sim1), sym.f = TRUE, test.method = \"Poly\",  #>     sim_U = NULL, n_sim_tab = 50, min_size = NULL, comp.dist = list.comp,  #>     comp.param = list.param, support = \"Real\", conf.level = 0.95,  #>     parallel = FALSE, n_cpu = 2) #>  #> Is the null hypothesis rejected? FALSE #> The type-I error is fixed to 5% #> The p-value of the test equals 0.6477276 #> The value of the test statistics is 0.208777 #>"},{"path":"/reference/rsimmix.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulation of a two-component mixture model — rsimmix","title":"Simulation of a two-component mixture model — rsimmix","text":"Simulate two-component mixture model following probability density function (pdf) l l = p*f + (1-p)*g, f g mixture component distributions, p mixture weight.","code":""},{"path":"/reference/rsimmix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulation of a two-component mixture model — rsimmix","text":"","code":"rsimmix(   n = 1000,   unknownComp_weight = 0.5,   comp.dist = list(f = \"norm\", g = \"norm\"),   comp.param = list(f = c(mean = 0, sd = 1), g = c(mean = 2, sd = 1)) )"},{"path":"/reference/rsimmix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulation of a two-component mixture model — rsimmix","text":"n Number observations drawn. unknownComp_weight Weight component distribution f (representing unknown component admixture models). comp.dist list two elements corresponding component distributions (specified R native names distributions) involved mixture model. elements respectively refer two components f g. unknown elements permitted. instance, 'comp.dist' set equal list(f = 'rnorm', g = 'norm'). comp.param list two elements corresponding parameters component distributions, element list . names used list must correspond native R argument names distributions. elements respectively refer parameters f g distributions mixture model. unknown elements permitted. instance, 'comp.param' set equal list(f=list(mean=2,sd=0.3), g=list(mean=0,sd=1)).","code":""},{"path":"/reference/rsimmix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulation of a two-component mixture model — rsimmix","text":"list three components. first, named 'mixt.data', simulated sample specified mixture distribution. second, named 'unknown.data', refers data simulated corresponding distribution f. third, named 'known.data', corresponds observations affiliated known component g.","code":""},{"path":"/reference/rsimmix.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Simulation of a two-component mixture model — rsimmix","text":"Xavier Milhaud xavier.milhaud.research@gmail.com","code":""},{"path":"/reference/rsimmix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulation of a two-component mixture model — rsimmix","text":"","code":"sim.X <- rsimmix(n = 2000, unknownComp_weight = 0.7, comp.dist = list(f = 'norm', g = 'norm'),                  comp.param = list(f = list(mean = 3, sd = 0.5), g = list(mean = 0, sd = 1))) class(sim.X) #> [1] \"list\" attributes(sim.X) #> $names #> [1] \"mixt.data\"    \"unknown.data\" \"known.data\"   #>  plot_mixt_density(samples = list(sim.X$mixt.data), user.bounds = NULL, support = 'continuous')"},{"path":"/reference/rsimmix_mix.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulation of a two-component gaussian mixture with one component following a two-component gaussian mixture — rsimmix_mix","title":"Simulation of a two-component gaussian mixture with one component following a two-component gaussian mixture — rsimmix_mix","text":"Simulate two-component gaussian admixture model, first component gaussian mixture ","code":""},{"path":"/reference/rsimmix_mix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulation of a two-component gaussian mixture with one component following a two-component gaussian mixture — rsimmix_mix","text":"","code":"rsimmix_mix(n, m, s, p, a)"},{"path":"/reference/rsimmix_mix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulation of a two-component gaussian mixture with one component following a two-component gaussian mixture — rsimmix_mix","text":"n number observations drawn m mean (shift ) unknown components s standard deviation unknown components p weight unknown component (mixture). shift mean two distributions embedded unknown component","code":""},{"path":"/reference/rsimmix_mix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulation of a two-component gaussian mixture with one component following a two-component gaussian mixture — rsimmix_mix","text":"list containing data generated mixture mixture distribution, data known component density made uniform(0,1), known data (corresponding part data generated known component density).","code":""},{"path":"/reference/rsimmix_mix.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Simulation of a two-component gaussian mixture with one component following a two-component gaussian mixture — rsimmix_mix","text":"Xavier Milhaud xavier.milhaud.research@gmail.com","code":""},{"path":"/reference/rsimmix_mix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulation of a two-component gaussian mixture with one component following a two-component gaussian mixture — rsimmix_mix","text":"","code":"sample1 <- rsimmix_mix(n = 3000, m = 5, s = 0.5, p = 0.3, a = 2)[['mixt.data']] plot(stats::density(sample1))"},{"path":"/reference/sim_gaussianProcess.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulation of a Gaussian process — sim_gaussianProcess","title":"Simulation of a Gaussian process — sim_gaussianProcess","text":"Simulate trajectory Gaussian process, given mean vector variance-covariance structure.","code":""},{"path":"/reference/sim_gaussianProcess.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulation of a Gaussian process — sim_gaussianProcess","text":"","code":"sim_gaussianProcess(   mean_vec,   varCov_mat,   from = 0,   to = 1,   start = 0,   nb.points = 10 )"},{"path":"/reference/sim_gaussianProcess.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulation of a Gaussian process — sim_gaussianProcess","text":"mean_vec Vector (multimensional) means increments following gaussian distribution. varCov_mat Corresponding variance-covariance structure. Initial time point process simulated. Last time point process simulated. start Useful user wants make trajectory start given value. nb.points Number points process simulated.","code":""},{"path":"/reference/sim_gaussianProcess.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulation of a Gaussian process — sim_gaussianProcess","text":"trajectory Gaussian processes simulating multivariate Gaussian distributions specified variance-covariance structure.","code":""},{"path":"/reference/sim_gaussianProcess.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Simulation of a Gaussian process — sim_gaussianProcess","text":"Xavier Milhaud xavier.milhaud.research@gmail.com","code":""},{"path":"/reference/sim_gaussianProcess.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulation of a Gaussian process — sim_gaussianProcess","text":"","code":"list.comp <- list(f1 = \"norm\", g1 = \"norm\") list.param <- list(f1 = list(mean = 12, sd = 0.4),                    g1 = list(mean = 16, sd = 0.7)) sample1 <- rsimmix(n = 2000, unknownComp_weight = 0.5, comp.dist = list.comp,                    comp.param = list.param)$mixt.data ## First get the variance-covariance matrix of the empirical process (Donsker correlation): cov_mat <- .Call('_admix_estimVarCov_empProcess_Rcpp', PACKAGE = 'admix',                   seq(from = min(sample1), to = max(sample1), length.out = 100), sample1) ## Plug it into the simulation of the gaussian process: B1 <- sim_gaussianProcess(mean_vec=rep(0,nrow(cov_mat)), varCov_mat=cov_mat, from=min(sample1),                           to = max(sample1), start = 0, nb.points = nrow(cov_mat)) plot(x = B1$dates, y = B1$traj1, type=\"l\", xlim = c(min(sample1),max(sample1)), ylim = c(-1,1))"},{"path":"/reference/stmf_small.html","id":null,"dir":"Reference","previous_headings":"","what":"Short-term Mortality Fluctuations (STMF) data series, restricted to 6 countries (Belgium, France, Italy, Netherlands, Spain, Germany). — stmf_small","title":"Short-term Mortality Fluctuations (STMF) data series, restricted to 6 countries (Belgium, France, Italy, Netherlands, Spain, Germany). — stmf_small","text":"Weekly death counts provide objective comparable way assessing scale short-term mortality elevations across countries (32 countries) time. Extraction date: 09/21/2020.","code":""},{"path":"/reference/stmf_small.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Short-term Mortality Fluctuations (STMF) data series, restricted to 6 countries (Belgium, France, Italy, Netherlands, Spain, Germany). — stmf_small","text":"","code":"stmf_small"},{"path":"/reference/stmf_small.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Short-term Mortality Fluctuations (STMF) data series, restricted to 6 countries (Belgium, France, Italy, Netherlands, Spain, Germany). — stmf_small","text":"data frame 88146 rows 19 variables: CountryCode Mortality database country code Year Year Week Week number Sex Gender ('m': male, 'f': female, 'b': ) D0_14 Age range 0-14 D15_64 Age range 15-64 D65_74 Age range 65-74 D75_84 Age range 75-84 D85p Age range 85-+ DTotal Count deaths ages combined R0_14 Crude death rate age range 0-14 R15_64 Crude death rate age range 15-64 R65_74 Crude death rate age range 65-74 R75_84 Crude death rate age range 75-84 R85p Crude death rate age range 85-+ RTotal Crude death rate ages combined Split Indicates data split aggregated age groups (0 original data necessary detailed age scale). example, original age scale 0-4, 5-29, 30-65, 65+, split equal 1 SplitSex Indicates original data available sex (0) data interpolated (1) Forecast Equals 1 years forecasted population exposures used calculate weekly death rates","code":""},{"path":"/reference/stmf_small.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Short-term Mortality Fluctuations (STMF) data series, restricted to 6 countries (Belgium, France, Italy, Netherlands, Spain, Germany). — stmf_small","text":"https://www.mortality.org","code":""},{"path":"/reference/two_samples_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Two-samples hypothesis test on the unknown component in admixture models — two_samples_test","title":"Two-samples hypothesis test on the unknown component in admixture models — two_samples_test","text":"Test hypothesis unknown component admixture models using different estimation techniques, different testing strategies.","code":""},{"path":"/reference/two_samples_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Two-samples hypothesis test on the unknown component in admixture models — two_samples_test","text":"","code":"two_samples_test(   samples,   known.p = NULL,   comp.dist = NULL,   comp.param = NULL,   method = c(\"ICV\", \"Poly\"),   n_sim_tab = NULL,   K = 3,   support = c(\"Real\", \"Positive\", \"Integer\", \"Bounded.continuous\"),   est.method = c(\"BVdk\", \"PS\"),   s = 0.49,   nb.ssEch = 2,   var.explicit = F,   nb.echBoot = NULL,   bounds.supp = NULL,   parallel = FALSE,   n_cpu = 2 )"},{"path":"/reference/two_samples_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Two-samples hypothesis test on the unknown component in admixture models — two_samples_test","text":"samples list two observed samples, sample follows mixture distribution given l = p*f + (1-p)*g, f p unknown g known. known.p (default NULL) true component weights p1 p2 known, useful simulation studies. comp.dist list four elements corresponding component distributions (specified R native names distributions) involved two admixture models. two first elements refer unknown known components 1st admixture model, last two ones second admixture model. unknown elements, must specified 'NULL' objects. instance, 'comp.dist' specified follows: list(f1=NULL, g1='norm', f2=NULL, g2='norm'). comp.param list four elements corresponding parameters component distributions, element list . names used list must correspond native R argument names distributions. two first elements refer parameters unknown known components 1st admixture model, last two ones second admixture model. unknown elements, must specified 'NULL' objects. instance, 'comp.param' specified follows: : list(f1=NULL, g1=list(mean=0,sd=1), f2=NULL, g2=list(mean=3,sd=1.1)). method Method used testing. Choose either 'Poly' 'ICV'. 'Poly' refers comparison expansion coefficients polynomial orthonormal basis, whereas 'ICV' refers Inner Convergence property obtained using IBM approach. details provided 'Details'. n_sim_tab ('ICV' method) Number simulated gaussian processes used tabulation Inner Convergence distribution IBM approach. K ('Poly' method) Number coefficients considered polynomial basis expansion. support ('Poly' method) Support densities consideration, useful choose polynomial orthonormal basis. One 'Real', 'Integer', 'Positive', 'Bounded.continuous'. est.method ('Poly' method) Either 'BVdk' (Bordes Valdekerkhove estimation technique) 'PS' (Patra Sen estimation technique). latter used since estimators plugged test statistic square-root n consistent. details given Section 'Details' . s ('Poly' method) Rate normalization factor set penalization rule model selection (]0,1/2[). nb.ssEch ('Poly' method) Number subsamples created original data decorrelate estimation parameters. var.explicit ('Poly' method) Boolean enables choose explicit evaluation variance test statistic (FALSE=bootstrap). FIXME: seems bootstrap procedure work context admixtures. nb.echBoot ('Poly' method) Number bootstrap samples 'var.explicit' set FALSE. bounds.supp ('Poly' method) default NULL. Useful support = 'bounded.continuous', list minimum maximum bounds, specified follows: list( list(min.f1,min.g1,min.f2,min.g2) , list(max.f1,max.g1,max.f2,max.g2) ) parallel Boolean indicate whether parallel computations performed (speed-tabulation). n_cpu Number cores used parallelizing.","code":""},{"path":"/reference/two_samples_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Two-samples hypothesis test on the unknown component in admixture models — two_samples_test","text":"decision test information p-value others, depending method used.","code":""},{"path":"/reference/two_samples_test.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Two-samples hypothesis test on the unknown component in admixture models — two_samples_test","text":"details concerning different methods can choosen: ) 'Poly' relies two-sample testing strategy unknown component density decomposed orthonormal polynomial basis, estimation component weights related two two-component admixture models can performed either using Patra Sen estimator (despite latter square-root n consistent thus used hypothesis tests), Bordes Vandekerkhove estimation technique (unknown component density symmetric); ii) 'ICV' refers Inversion - Best Matching strategy constraints except need handle two samples.","code":""},{"path":"/reference/two_samples_test.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Two-samples hypothesis test on the unknown component in admixture models — two_samples_test","text":"Xavier Milhaud xavier.milhaud.research@gmail.com","code":""},{"path":"/reference/two_samples_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Two-samples hypothesis test on the unknown component in admixture models — two_samples_test","text":"","code":"# \\donttest{ ##### Under the null hypothesis H0 : ## Simulate data: list.comp <- list(f1 = \"norm\", g1 = \"norm\",                   f2 = \"norm\", g2 = \"norm\") list.param <- list(f1 = list(mean = 3, sd = 0.5), g1 = list(mean = 0, sd = 1),                    f2 = list(mean = 3, sd = 0.5), g2 = list(mean = 6, sd = 1.2)) sample1 <- rsimmix(n=250, unknownComp_weight=0.85, comp.dist = list(list.comp$f1,list.comp$g1),                    comp.param = list(list.param$f1,list.param$g1))[['mixt.data']] sample2 <- rsimmix(n=300, unknownComp_weight=0.8, comp.dist = list(list.comp$f2,list.comp$g2),                    comp.param = list(list.param$f2,list.param$g2))[['mixt.data']] plot_mixt_density(samples = list(sample1,sample2), user.bounds=NULL, support='continuous')  ##### Performs the test by the different methods : list.comp <- list(f1 = NULL, g1 = \"norm\",                   f2 = NULL, g2 = \"norm\") list.param <- list(f1 = NULL, g1 = list(mean = 0, sd = 1),                    f2 = NULL, g2 = list(mean = 6, sd = 1.2)) ## Using expansion coefficients in orthonormal polynomial basis: two_samples_test(samples = list(sample1, sample2), comp.dist=list.comp, comp.param=list.param,                  method = 'Poly', K = 3, support = 'Real', est.method = 'BVdk', s = 0.4,                  nb.ssEch = 2, var.explicit = TRUE) #> $rejection_rule #> [1] FALSE #>  #> $p_value #> [1] 0.9409324 #>  #> $test.stat #> [1] 0.005490514 #>  #> $varCov.matrix #>          [,1]     [,2]     [,3] #> [1,] 2.253787       NA       NA #> [2,]       NA 57.23313       NA #> [3,]       NA       NA 967.8617 #>  #> $rank #> [1] 1 #>  #> $p1 #> [1] 0.7758153 #>  #> $p2 #> [1] 0.8705051 #>  # }"}]
